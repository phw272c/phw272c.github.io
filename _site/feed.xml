<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-27T14:05:36-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Applied Spatial Data Science for Public Health</title><subtitle>This site contains the labs for Applied Spatial Data Science for Public Health, a course at UC Berkeley's School of Public Health.</subtitle><entry><title type="html">Lab 2 - Spatial variation in risk</title><link href="http://localhost:4000/lab-2/" rel="alternate" type="text/html" title="Lab 2 - Spatial variation in risk" /><published>2023-03-09T00:00:00-08:00</published><updated>2023-03-09T00:00:00-08:00</updated><id>http://localhost:4000/lab-2</id><content type="html" xml:base="http://localhost:4000/lab-2/"><![CDATA[<p>This week we are going to explore methods to understand and predict risk
across space from point data. These may be point level data
(i.e. measurements of something of interest at particular points) or
point process data (i.e. occurrences of events in a given area). When
you load this week’s libraries, it may prompt you to download
<a href="https://www.xquartz.org/">XQuartz</a>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">geodata</span><span class="p">)</span><span class="w"> 
</span><span class="n">library</span><span class="p">(</span><span class="n">Metrics</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">spatstat</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">raster</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">geoR</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">gtools</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">lme4</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">leaflet</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">oro.nifti</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rgdal</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>First load up some obfuscated malaria case-control data from Namibia.
This is comprised of latitudes and longitudes of cases and controls.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CaseControl</span><span class="o">&lt;-</span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/CaseControl.csv"</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">CaseControl</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##   household_id       lat     long case
## 1            1 -17.51470 16.05666    1
## 2            2 -17.82175 16.15147    1
## 3            3 -17.78743 15.93465    1
## 4            4 -17.51352 15.83933    1
## 5            5 -17.63668 15.91185    1
## 6            6 -17.64459 16.16105    1
</code></pre></div></div>

<p>To set ourselves up for further analyses, let’s create objects of just
cases and just controls.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Create a new object with just the cases, recoded as a number 1</span><span class="w">
</span><span class="n">Cases</span><span class="o">&lt;-</span><span class="n">CaseControl</span><span class="p">[</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">case</span><span class="o">==</span><span class="m">1</span><span class="p">,]</span><span class="w">

</span><span class="c1">#Create a new object with just the controls, recoded as a number 0</span><span class="w">
</span><span class="n">Controls</span><span class="o">&lt;-</span><span class="n">CaseControl</span><span class="p">[</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">case</span><span class="o">==</span><span class="m">0</span><span class="p">,]</span><span class="w">
</span></code></pre></div></div>

<p>We are also going to create a <code class="language-plaintext highlighter-rouge">SpatialPointsDataFrame</code> of the
case-control data</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CaseControl_SPDF</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">SpatialPointsDataFrame</span><span class="p">(</span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CaseControl</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"long"</span><span class="p">,</span><span class="w"> </span><span class="s2">"lat"</span><span class="p">)],</span><span class="w">
                                           </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CaseControl</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"household_id"</span><span class="p">,</span><span class="w"> </span><span class="s2">"case"</span><span class="p">)])</span><span class="w">
</span></code></pre></div></div>

<p>And get hold of a boundary file for Namibia.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#OLD NAM_Adm0&lt;-raster::getData('GADM',country='NAM',level=0)</span><span class="w">
</span><span class="c1">#NEW</span><span class="w">
</span><span class="n">NAM_Adm0</span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">gadm</span><span class="p">(</span><span class="n">country</span><span class="o">=</span><span class="s2">"NAM"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Spatial"</span><span class="p">)</span><span class="w">
</span><span class="nf">class</span><span class="p">(</span><span class="n">NAM_Adm0</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "SpatialPolygonsDataFrame"
## attr(,"package")
## [1] "sp"
</code></pre></div></div>

<p>Let’s plot and see what we have. First, create a color scheme based on
the case classification (0 or 1).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">case_color_scheme</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="s2">"red"</span><span class="p">),</span><span class="w"> </span><span class="n">CaseControl_SPDF</span><span class="o">$</span><span class="n">case</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Then, plot</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addTiles</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addCircleMarkers</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">CaseControl_SPDF</span><span class="p">,</span><span class="w"> 
                                              </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">case_color_scheme</span><span class="p">(</span><span class="n">CaseControl_SPDF</span><span class="o">$</span><span class="n">case</span><span class="p">),</span><span class="w">
                                              </span><span class="n">radius</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-8-1.png" alt="" /></p>

<h2 id="risk-mapping-using-kernel-density">Risk Mapping using Kernel Density</h2>

<p>To generate a kernel density estimate, we first need to generate point
pattern object of points (aka ppp). First, we need to define a window
defining the population from which the cases arose.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Nam_Owin</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">owin</span><span class="p">(</span><span class="n">xrange</span><span class="o">=</span><span class="nf">range</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">long</span><span class="p">),</span><span class="n">yrange</span><span class="o">=</span><span class="nf">range</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">lat</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>Now we can define the ppp object of the cases.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Cases_ppp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ppp</span><span class="p">(</span><span class="n">Cases</span><span class="o">$</span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">Cases</span><span class="o">$</span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">window</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Nam_Owin</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Cases_ppp</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-10-1.png" alt="" /></p>

<p>We can now generate and plot a kernel density estimate of cases.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">par</span><span class="p">(</span><span class="n">mar</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="nf">rep</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">)))</span><span class="w">
</span><span class="n">case_density</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">density</span><span class="p">(</span><span class="n">Cases_ppp</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">case_density</span><span class="p">)</span><span class="w"> </span><span class="c1"># Units are intensity of points per unit square</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-11-1.png" alt="" /></p>

<p>It’s possible to use different bandwidths. The larger the bandwidth, the
smoother the density estimate. You can also automatically chose a
bandwidth based on a variety of methods. Investigate <code class="language-plaintext highlighter-rouge">?bw.ppl</code> for more
information.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">mar</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">density</span><span class="p">(</span><span class="n">Cases_ppp</span><span class="p">,</span><span class="m">0.02</span><span class="p">),</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Bandwidth 0.02"</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">density</span><span class="p">(</span><span class="n">Cases_ppp</span><span class="p">,</span><span class="m">0.1</span><span class="p">),</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Bandwidth 0.1"</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">density</span><span class="p">(</span><span class="n">Cases_ppp</span><span class="p">,</span><span class="n">bw.ppl</span><span class="p">),</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Automatically selected bandwidth"</span><span class="p">)</span><span class="w"> </span><span class="c1"># automatic bandwidth selection based on cross-validation</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-12-1.png" alt="" /></p>

<p>If you want to map using leaflet, you have to convert the density object
to a rasterLayer with a coordinate reference system.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create raster</span><span class="w">
</span><span class="n">density_raster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="p">(</span><span class="n">density</span><span class="p">(</span><span class="n">Cases_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">bw.ppl</span><span class="p">))</span><span class="w">
</span><span class="n">crs</span><span class="p">(</span><span class="n">density_raster</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">crs</span><span class="p">(</span><span class="n">NAM_Adm0</span><span class="p">)</span><span class="w">

</span><span class="c1"># Plot</span><span class="w">
</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addTiles</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">density_raster</span><span class="p">,</span><span class="w"> </span><span class="n">opacity</span><span class="o">=</span><span class="m">0.6</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-13-1.png" alt="" /></p>

<p>But this is just a density of cases, i.e. it doesn’t account for the
denominator - the controls. To do this, we can use the Kelsall &amp; Diggle
method (see paper in course notes), which calculates the ratio of the
density estimate of cases:controls.</p>

<p>First we have to add ‘marks’ to the points. Marks are just values
associated with each point such as case or control (1/0).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CaseControl_ppp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ppp</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">CaseControl</span><span class="o">$</span><span class="n">lat</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">window</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Nam_Owin</span><span class="p">,</span><span class="w"> 
                       </span><span class="n">marks</span><span class="o">=</span><span class="n">as.factor</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">case</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>Now we can use the <code class="language-plaintext highlighter-rouge">relrisk</code> function from the spatstat package to look
at the risk of being a case relative to the background population. In
order to obtain an output of relative risk, we must specify relative =
TRUE in the code line (the probability of being a case, relative to
probability of being a control). If the ‘relative’ argument is not
included in the code line the argument is technically specified as
‘FALSE’ since this is the default and the output is the probability of
being a case. You can set sigma (bandwidth), but the default is to use
cross-validation to find a common bandwidth to use for cases and
controls. See <code class="language-plaintext highlighter-rouge">?bw.relrisk</code> for more details.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">par</span><span class="p">(</span><span class="n">mar</span><span class="o">=</span><span class="nf">rep</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">))</span><span class="w">
</span><span class="n">risk_est</span><span class="w"> </span><span class="o">&lt;-</span><span class="w">  </span><span class="n">relrisk</span><span class="p">(</span><span class="n">CaseControl_ppp</span><span class="p">)</span><span class="w"> 
</span><span class="n">plot</span><span class="p">(</span><span class="n">risk_est</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-15-1.png" alt="" /></p>

<h2 id="obtaining-a-relative-risk-of-being-a-case">Obtaining a relative risk of being a case</h2>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">par</span><span class="p">(</span><span class="n">mar</span><span class="o">=</span><span class="nf">rep</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">))</span><span class="w">
</span><span class="n">rel_risk_est</span><span class="w"> </span><span class="o">&lt;-</span><span class="w">  </span><span class="n">relrisk</span><span class="p">(</span><span class="n">CaseControl_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">relative</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">rel_risk_est</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-16-1.png" alt="" /></p>

<p>To plot on a web map, first specify the projection</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">risk_raster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="p">(</span><span class="n">risk_est</span><span class="p">)</span><span class="w">
</span><span class="n">crs</span><span class="p">(</span><span class="n">risk_raster</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">crs</span><span class="p">(</span><span class="n">NAM_Adm0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Then define a color palette</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">palette</span><span class="o">=</span><span class="n">tim.colors</span><span class="p">(</span><span class="m">64</span><span class="p">),</span><span class="w"> </span><span class="n">domain</span><span class="o">=</span><span class="n">values</span><span class="p">(</span><span class="n">risk_raster</span><span class="p">),</span><span class="w"> </span><span class="n">na.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Then plot with leaflet</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addTiles</span><span class="p">(</span><span class="s2">"http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">risk_raster</span><span class="p">,</span><span class="w"> </span><span class="n">opacity</span><span class="o">=</span><span class="m">0.6</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pal</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-19-1.png" alt="" /> <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>{=html} ##
Interpolation of point (prevalence etc.) data First load Ethiopia
malaria prevalence data</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/mal_data_eth_2009_no_dups.csv"</span><span class="p">,</span><span class="n">header</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Get the Ethiopia Adm 1 level boundary file using the raster package
which provides access to GADM data</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#OLD ETH_Adm_1 &lt;- raster::getData("GADM", country="ETH", level=1)</span><span class="w">
</span><span class="c1">#NEW</span><span class="w">
</span><span class="n">ETH_Adm_1</span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">gadm</span><span class="p">(</span><span class="n">country</span><span class="o">=</span><span class="s2">"ETH"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Spatial"</span><span class="p">)</span><span class="w">
</span><span class="nf">class</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "SpatialPolygonsDataFrame"
## attr(,"package")
## [1] "sp"
</code></pre></div></div>

<h3 id="inverse-distance-weighting-idw">Inverse distance weighting (IDW)</h3>

<p>Inverse distance weighting is one method of interpolation. To perform
IDW using the spatstat package, per kernel density estimates, we have to
create a ppp object with the outcome we wish to interpolate as marks. We
have to start by setting the observation window. In this case, we are
going to use the bounding box around Oromia State from which these data
were collected. To set the window for the <code class="language-plaintext highlighter-rouge">ppp</code> function, we need to use
the <code class="language-plaintext highlighter-rouge">owin</code> function.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">oromia</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="p">[</span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">NAME_1</span><span class="o">==</span><span class="s2">"Oromia"</span><span class="p">,]</span><span class="w">
</span><span class="n">oromia_window</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">owin</span><span class="p">(</span><span class="n">oromia</span><span class="o">@</span><span class="n">bbox</span><span class="p">[</span><span class="m">1</span><span class="p">,],</span><span class="w"> </span><span class="n">oromia</span><span class="o">@</span><span class="n">bbox</span><span class="p">[</span><span class="m">2</span><span class="p">,])</span><span class="w">
</span></code></pre></div></div>

<p>Then define a ppp of the prevalence data</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data_ppp</span><span class="o">&lt;-</span><span class="n">ppp</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">longitude</span><span class="p">,</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">latitude</span><span class="p">,</span><span class="w">
                         </span><span class="n">marks</span><span class="o">=</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr</span><span class="p">,</span><span class="n">window</span><span class="o">=</span><span class="n">oromia_window</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Set the parameters for displaying multiple plots in one screen and plot
different IDW results NB: 1) power represents the power function we want
to use 2) ‘at’ can be ‘pixels’ where it generates estimates across a
grid of pixels or ‘points’ where it interpolates values at every point
using leave-one-out-cross validation</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">idw</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">power</span><span class="o">=</span><span class="m">0.2</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="o">=</span><span class="s2">"pixels"</span><span class="p">),</span><span class="n">col</span><span class="o">=</span><span class="n">heat.colors</span><span class="p">(</span><span class="m">20</span><span class="p">),</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s2">"power = 0.2"</span><span class="p">)</span><span class="w"> 
</span><span class="n">plot</span><span class="p">(</span><span class="n">idw</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">power</span><span class="o">=</span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="o">=</span><span class="s2">"pixels"</span><span class="p">),</span><span class="n">col</span><span class="o">=</span><span class="n">heat.colors</span><span class="p">(</span><span class="m">20</span><span class="p">),</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s2">"power = 0.5"</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">idw</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">power</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="o">=</span><span class="s2">"pixels"</span><span class="p">),</span><span class="n">col</span><span class="o">=</span><span class="n">heat.colors</span><span class="p">(</span><span class="m">20</span><span class="p">),</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s2">"power = 0.1"</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">idw</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">power</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="o">=</span><span class="s2">"pixels"</span><span class="p">),</span><span class="n">col</span><span class="o">=</span><span class="n">heat.colors</span><span class="p">(</span><span class="m">20</span><span class="p">),</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s2">"power = 2"</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-24-1.png" alt="" /></p>

<p>To calculate the ‘best’ power to use, you can use cross-validation. This
is possible using the argument at=points when running the idw function.
There is no off the shelf function (that I know of) to do this, so you
have to loop through different power values and find the one that
produces the lowest error using cross-validation.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">powers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">0.05</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">0.05</span><span class="p">)</span><span class="w"> 
</span><span class="n">mse_result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NULL</span><span class="w"> 
</span><span class="k">for</span><span class="p">(</span><span class="n">power</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">powers</span><span class="p">){</span><span class="n">CV_idw</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">idw</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">power</span><span class="o">=</span><span class="n">power</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="o">=</span><span class="s2">"points"</span><span class="p">)</span><span class="w"> 
  </span><span class="n">mse_result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">mse_result</span><span class="p">,</span><span class="w"> </span><span class="n">mse</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="o">$</span><span class="n">marks</span><span class="p">,</span><span class="n">CV_idw</span><span class="p">))</span><span class="w"> 
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>See which produced the lowest error</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optimal_power</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">powers</span><span class="p">[</span><span class="n">which.min</span><span class="p">(</span><span class="n">mse_result</span><span class="p">)]</span><span class="w"> 
</span><span class="n">plot</span><span class="p">(</span><span class="n">powers</span><span class="p">,</span><span class="w"> </span><span class="n">mse_result</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-26-1.png" alt="" /> Plot observed versus
expected with optimal power</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CV_idw_opt</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">idw</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">power</span><span class="o">=</span><span class="n">optimal_power</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="o">=</span><span class="s2">"points"</span><span class="p">)</span><span class="w"> 
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="o">$</span><span class="n">marks</span><span class="p">,</span><span class="w"> </span><span class="n">CV_idw_opt</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"Observed prevalence"</span><span class="p">,</span><span class="w">
     </span><span class="n">ylab</span><span class="o">=</span><span class="s2">"Predicted prevalence"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-27-1.png" alt="" /></p>

<p>Plot using leaflet.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. Convert to a raster</span><span class="w">
</span><span class="n">ETH_malaria_data_idw_raster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="p">(</span><span class="n">idw</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="p">,</span><span class="w"> 
                                          </span><span class="n">power</span><span class="o">=</span><span class="m">0.2</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="o">=</span><span class="s2">"pixels"</span><span class="p">))</span><span class="w">
</span><span class="n">crs</span><span class="p">(</span><span class="n">ETH_malaria_data_idw_raster</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">crs</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">)</span><span class="w">

</span><span class="c1">#2. Define a color palette</span><span class="w">
</span><span class="n">colPal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">tim.colors</span><span class="p">(),</span><span class="w"> </span><span class="n">ETH_malaria_data_idw_raster</span><span class="p">[],</span><span class="w"> </span><span class="n">na.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">

</span><span class="c1"># 3. Plot</span><span class="w">
</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addTiles</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">ETH_malaria_data_idw_raster</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">colPal</span><span class="p">,</span><span class="w"> </span><span class="n">opacity</span><span class="o">=</span><span class="m">0.7</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">colPal</span><span class="p">,</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data_idw_raster</span><span class="p">[])</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-28-1.png" alt="" /> <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>{=html} ### Kriging
We are going to use the GeoR package to perform kriging. First, we have
to create a geodata object with the package GeoR. This wants dataframe
of x,y and data</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data_geo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.geodata</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="s2">"latitude"</span><span class="p">,</span><span class="s2">"pf_pr"</span><span class="p">)])</span><span class="w">
</span></code></pre></div></div>

<p>We can plot a summary plot using the lowess option gives us LOWESS
curves for the relationship between x and y. LOWESS stands for locally
weighted scatterplot smoothing.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">ETH_malaria_data_geo</span><span class="p">,</span><span class="w"> </span><span class="n">lowess</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-30-1.png" alt="" /></p>

<p>It’s important to assess whether there is a first order trend in the
data before kriging. We can see from the plots of the prevalence against
the x and y coordinates that there isn’t really any evidence of such a
trend. Were there to be evidence, you can add <code class="language-plaintext highlighter-rouge">trend = '1st'</code> or
<code class="language-plaintext highlighter-rouge">trend = '2nd'</code> to the plot command to see the result after having
regressed prevalence against x and y using a linear and polynomial
effect respectively.</p>

<p>Now generate and plot a variogram. As a rule of thumb, its a good idea
to limit variogram estimation to half the maximum interpoint distance</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MaxDist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">dist</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="s2">"latitude"</span><span class="p">)]))</span><span class="w">  </span><span class="o">/</span><span class="m">2</span><span class="w"> 
</span><span class="n">VarioCloud</span><span class="o">&lt;-</span><span class="n">variog</span><span class="p">(</span><span class="n">ETH_malaria_data_geo</span><span class="p">,</span><span class="w"> </span><span class="n">option</span><span class="o">=</span><span class="s2">"cloud"</span><span class="p">,</span><span class="w"> </span><span class="n">max.dist</span><span class="o">=</span><span class="n">MaxDist</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## variog: computing omnidirectional variogram
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">VarioCloud</span><span class="p">)</span><span class="w"> </span><span class="c1"># all pairwise comparisons</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-31-1.png" alt="" /> To make it easier to
interpret, we can bin points by distance. You can specify
<code class="language-plaintext highlighter-rouge">option = "bin"</code> but it’s the default so we left it out.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vario</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">variog</span><span class="p">(</span><span class="n">ETH_malaria_data_geo</span><span class="p">,</span><span class="w"> </span><span class="n">max.dist</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MaxDist</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## variog: computing omnidirectional variogram
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">Vario</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-32-1.png" alt="" /></p>

<p>It’s possible to change the way the variogram bins are constructed. Just
be careful not to have too few pairs of points in any distance class.
NB: <code class="language-plaintext highlighter-rouge">uvec</code> argument provides values to define the variogram binning
(e.g. let’s try bins of 0.2 decimal degrees, about 22 km).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vario</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">variog</span><span class="p">(</span><span class="n">ETH_malaria_data_geo</span><span class="p">,</span><span class="n">max.dist</span><span class="o">=</span><span class="n">MaxDist</span><span class="p">,</span><span class="n">uvec</span><span class="o">=</span><span class="n">seq</span><span class="p">(</span><span class="m">0.01</span><span class="p">,</span><span class="n">MaxDist</span><span class="p">,</span><span class="m">0.2</span><span class="p">))</span><span class="w"> 
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## variog: computing omnidirectional variogram
</code></pre></div></div>

<p>Let’s look at the number in each bin</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Vario</span><span class="o">$</span><span class="n">n</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##  [1]  85 432 541 586 692 607 652 661 679 663 736 764 711 692 577 585 594 551 630
## [20] 724
</code></pre></div></div>

<p>What is the minimum? A rule of thumb is 30 in each bin</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">min</span><span class="p">(</span><span class="n">Vario</span><span class="o">$</span><span class="n">n</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 85
</code></pre></div></div>

<p>Plot</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">Vario</span><span class="p">,</span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-36-1.png" alt="" /></p>

<p>We can now fit variogram model by minimized least squares using
different covariance models. In this case we are just going to use a
‘spherical’ and ‘exponential’ model.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">VarioMod_sph</span><span class="o">&lt;-</span><span class="n">variofit</span><span class="p">(</span><span class="n">Vario</span><span class="p">,</span><span class="w"> </span><span class="n">cov.model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"sph"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## variofit: covariance model used is spherical 
## variofit: weights used: npairs 
## variofit: minimisation function used: optim

## Warning in variofit(Vario, cov.model = "sph"): initial values not provided -
## running the default search

## variofit: searching for best initial value ... selected values:
##               sigmasq phi    tausq kappa
## initial.value "0"     "3.05" "0"   "0.5"
## status        "est"   "est"  "est" "fix"
## loss value: 2.28256710551259e-05
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">VarioMod_exp</span><span class="o">&lt;-</span><span class="n">variofit</span><span class="p">(</span><span class="n">Vario</span><span class="p">,</span><span class="w"> </span><span class="n">cov.model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"exp"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## variofit: covariance model used is exponential 
## variofit: weights used: npairs 
## variofit: minimisation function used: optim

## Warning in variofit(Vario, cov.model = "exp"): initial values not provided -
## running the default search

## variofit: searching for best initial value ... selected values:
##               sigmasq phi    tausq kappa
## initial.value "0"     "1.22" "0"   "0.5"
## status        "est"   "est"  "est" "fix"
## loss value: 2.76112575299845e-05
</code></pre></div></div>

<p>Plot results</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">Vario</span><span class="p">,</span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">VarioMod_sph</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="s2">"blue"</span><span class="p">,</span><span class="n">lwd</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">VarioMod_exp</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">,</span><span class="n">lwd</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-38-1.png" alt="" /></p>

<p>Get summaries of the fits.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">(</span><span class="n">VarioMod_sph</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## $pmethod
## [1] "WLS (weighted least squares)"
## 
## $cov.model
## [1] "spherical"
## 
## $spatial.component
##     sigmasq         phi 
## 0.000160867 3.048000000 
## 
## $spatial.component.extra
## kappa 
##   0.5 
## 
## $nugget.component
##        tausq 
## 8.043352e-05 
## 
## $fix.nugget
## [1] FALSE
## 
## $fix.kappa
## [1] TRUE
## 
## $practicalRange
## [1] 3.048
## 
## $sum.of.squares
##        value 
## 2.282567e-05 
## 
## $estimated.pars
##        tausq      sigmasq          phi 
## 8.043352e-05 1.608670e-04 3.048000e+00 
## 
## $weights
## [1] "npairs"
## 
## $call
## variofit(vario = Vario, cov.model = "sph")
## 
## attr(,"class")
## [1] "summary.variomodel"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">(</span><span class="n">VarioMod_exp</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## $pmethod
## [1] "WLS (weighted least squares)"
## 
## $cov.model
## [1] "exponential"
## 
## $spatial.component
##      sigmasq          phi 
## 0.0002281533 1.2192006253 
## 
## $spatial.component.extra
## kappa 
##   0.5 
## 
## $nugget.component
##        tausq 
## 3.042044e-05 
## 
## $fix.nugget
## [1] FALSE
## 
## $fix.kappa
## [1] TRUE
## 
## $practicalRange
## [1] 3.652398
## 
## $sum.of.squares
##        value 
## 2.643998e-05 
## 
## $estimated.pars
##        tausq      sigmasq          phi 
## 3.042044e-05 2.281533e-04 1.219201e+00 
## 
## $weights
## [1] "npairs"
## 
## $call
## variofit(vario = Vario, cov.model = "exp")
## 
## attr(,"class")
## [1] "summary.variomodel"
</code></pre></div></div>

<p>In this case, the spherical model has a slightly lower sum of squares,
suggesting it provides a better fit to the data.</p>

<p>Now we have a variogram model depicting the covariance between pairs of
points as a function of distance between points, we can use it to Krig
values at prediction locations. To allow us to compare with IDW, first
get grid of points from the IDW example for comparison</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. Create prediction grid</span><span class="w">
</span><span class="n">IDW</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">idw</span><span class="p">(</span><span class="n">ETH_malaria_data_ppp</span><span class="p">,</span><span class="w"> </span><span class="n">power</span><span class="o">=</span><span class="m">0.2</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="o">=</span><span class="s2">"pixels"</span><span class="p">)</span><span class="w">
</span><span class="n">pred_grid_x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="n">IDW</span><span class="o">$</span><span class="n">xcol</span><span class="p">,</span><span class="nf">length</span><span class="p">(</span><span class="n">IDW</span><span class="o">$</span><span class="n">yrow</span><span class="p">))</span><span class="w">
</span><span class="n">pred_grid_y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sort</span><span class="p">(</span><span class="nf">rep</span><span class="p">(</span><span class="n">IDW</span><span class="o">$</span><span class="n">yrow</span><span class="p">,</span><span class="nf">length</span><span class="p">(</span><span class="n">IDW</span><span class="o">$</span><span class="n">xcol</span><span class="p">)))</span><span class="w">
</span><span class="n">pred_grid</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">pred_grid_x</span><span class="p">,</span><span class="n">pred_grid_y</span><span class="p">)</span><span class="w">

</span><span class="c1"># 2. Now krig to those points</span><span class="w">
</span><span class="n">KrigPred</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">krige.conv</span><span class="p">(</span><span class="n">ETH_malaria_data_geo</span><span class="p">,</span><span class="w"> </span><span class="n">loc</span><span class="o">=</span><span class="n">pred_grid</span><span class="p">,</span><span class="w">
                       </span><span class="n">krige</span><span class="o">=</span><span class="n">krige.control</span><span class="p">(</span><span class="n">obj.model</span><span class="o">=</span><span class="n">VarioMod_sph</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## krige.conv: model with constant mean
## krige.conv: Kriging performed using global neighbourhood
</code></pre></div></div>

<p>Visualize predictions.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">image</span><span class="p">(</span><span class="n">KrigPred</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="n">heat.colors</span><span class="p">(</span><span class="m">50</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-41-1.png" alt="" /></p>

<p>If you want to create a raster of your predictions, you can use the
<code class="language-plaintext highlighter-rouge">rasterFromXYZ</code> function.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">KrigPred_raster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rasterFromXYZ</span><span class="p">(</span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">pred_grid_x</span><span class="p">,</span><span class="w">
                                 </span><span class="n">y</span><span class="o">=</span><span class="n">pred_grid_y</span><span class="p">,</span><span class="w">
                                 </span><span class="n">z</span><span class="o">=</span><span class="n">KrigPred</span><span class="o">$</span><span class="n">predict</span><span class="p">))</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">KrigPred_raster</span><span class="p">)</span><span class="w">
</span><span class="n">points</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="s2">"latitude"</span><span class="p">)],</span><span class="w">
       </span><span class="n">cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">10</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-42-1.png" alt="" /></p>

<p>Generating cross-validated predictions in straightforward in geoR using
the
<a href="https://www.rdocumentation.org/packages/geoR/versions/1.8-1/topics/xvalid"><code class="language-plaintext highlighter-rouge">xvlalid</code></a>
function. Two types of validation are possible: 1. leaving-on-out cross
validation where each data location (all or a subset) is removed in turn
and predicted using the remaining locations, for a given model. 2.
External validation which can predict to locations outside of the
dataset. Here we will use the default leave-one-out cross validation for
all points.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xvalid_result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xvalid</span><span class="p">(</span><span class="n">ETH_malaria_data_geo</span><span class="p">,</span><span class="w"> </span><span class="n">model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VarioMod_sph</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## xvalid: number of data locations       = 203
## xvalid: number of validation locations = 203
## xvalid: performing cross-validation at location ... 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 
## xvalid: end of cross-validation
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot on log odds scale</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">xvalid_result</span><span class="o">$</span><span class="n">data</span><span class="p">,</span><span class="n">xvalid_result</span><span class="o">$</span><span class="n">predicted</span><span class="p">,</span><span class="w"> </span><span class="n">asp</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w">
     </span><span class="n">xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Observed prevalence"</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="o">=</span><span class="s2">"Cross-validated predicted prevalence"</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-3/unnamed-chunk-43-1.png" alt="" /></p>

<p>You might notice that some of the kriged values are &lt;0. Since we are
trying to modeling probabilities this can’t be true. In these
situations, it is possible to apply a transformation to your data before
kriging and then back-transform results. One transformation useful for
probabilities is the logit transform (used in logistic regression). The
<code class="language-plaintext highlighter-rouge">logit</code> and <code class="language-plaintext highlighter-rouge">inv.logit</code> functions from the package <code class="language-plaintext highlighter-rouge">gtools</code> can be used
for this. Note that it doesn’t work if you have 0 values as you can’t
log(0). You can add a small amount to avoid this situation. The process
would look like this.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Add small amount to avoid zeros</span><span class="w">
</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr_adj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">0.001</span><span class="w">

</span><span class="c1"># Apply logit transform and convert to geodata</span><span class="w">
</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr_logit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">logit</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr_adj</span><span class="p">)</span><span class="w">
</span><span class="n">ETH_malaria_data_geo_logit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.geodata</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="s2">"latitude"</span><span class="p">,</span><span class="s2">"pf_pr_logit"</span><span class="p">)])</span><span class="w">

</span><span class="c1"># Fit (spherical) variogram</span><span class="w">
</span><span class="n">Vario_logit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">variog</span><span class="p">(</span><span class="n">ETH_malaria_data_geo_logit</span><span class="p">,</span><span class="w"> </span><span class="n">max.dist</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MaxDist</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## variog: computing omnidirectional variogram
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">VarioMod_sph_logit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">variofit</span><span class="p">(</span><span class="n">Vario_logit</span><span class="p">,</span><span class="w"> </span><span class="n">cov.model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"sph"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## variofit: covariance model used is spherical 
## variofit: weights used: npairs 
## variofit: minimisation function used: optim

## Warning in variofit(Vario_logit, cov.model = "sph"): initial values not
## provided - running the default search

## variofit: searching for best initial value ... selected values:
##               sigmasq phi    tausq  kappa
## initial.value "1.16"  "2.45" "0.15" "0.5"
## status        "est"   "est"  "est"  "fix"
## loss value: 448.598010419967
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get CV kriged predictions</span><span class="w">
</span><span class="n">xvalid_result_logit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xvalid</span><span class="p">(</span><span class="n">ETH_malaria_data_geo_logit</span><span class="p">,</span><span class="w"> </span><span class="n">model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VarioMod_sph_logit</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## xvalid: number of data locations       = 203
## xvalid: number of validation locations = 203
## xvalid: performing cross-validation at location ... 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 
## xvalid: end of cross-validation
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xvalid_result_inv_logit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">inv.logit</span><span class="p">(</span><span class="n">xvalid_result_logit</span><span class="o">$</span><span class="n">predicted</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h2 id="pop-quiz">Pop quiz</h2>

<ul>
  <li>How could you compare how well the best fitting IDW performs versus
kriging?</li>
  <li>Which appears to be more accurate?</li>
  <li>Can you visualize where predictions from IDW differ to kriging?</li>
  <li>Does inclusion of a trend surface improve kriging estimates?</li>
</ul>

<p>Answers
<a href="https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/code/week_3_cheat_sheet.R">here</a></p>

<h2 id="key-readings">Key readings</h2>

<h4 id="good-overview">Good overview</h4>

<p>Pfeiffer, D., T. P. Robinson, M. Stevenson, K. B. Stevens, D. J. Rogers
and A. C. Clements (2008). Spatial analysis in epidemiology, Oxford
University Press Oxford. Chapter 6.</p>

<h4 id="technical-paper-covering-kernel-estimation-of-relative-risk-key-reference-but-not-necessary-to-understand-in-detail">Technical paper covering kernel estimation of relative risk. Key reference but not necessary to understand in detail.</h4>

<p>Kelsall, Julia E., and Peter J. Diggle. “Kernel estimation of relative
risk.” Bernoulli 1.1-2 (1995): 3-16.</p>

<h4 id="illustration-of-the-kelsall-diggle-approach-used-to-map-sleeping-sickness-risk">Illustration of the Kelsall Diggle approach used to map sleeping sickness risk</h4>

<p><a href="https://journals.plos.org/plosntds/article?id=10.1371/journal.pntd.0001859">Simarro, Pere P., et al. ”Estimating and mapping the population at risk
of sleeping sickness.” PLoS neglected tropical diseases 6.10 (2012):
e1859.</a></p>

<h2 id="additional-readings">Additional readings</h2>

<h4 id="nice-example-of-kriging-applied-across-space-and-time">Nice example of kriging applied across space and time</h4>

<p><a href="https://journals.plos.org/plosmedicine/article?id=10.1371/journal.pmed.0030271">Gething, Peter W., et al. ”A local space–time kriging approach applied
to a national outpatient malaria data set.” Computers &amp; geosciences
33.10 (2007):
1337-1350.</a></p>

<h4 id="additional-example-of-kelsall-diggle-in-action">Additional example of Kelsall Diggle in action</h4>

<p>Di Salvo, Francesca, et al. ”Spatial variation in mortality risk for
hematological malignancies near a petrochemical refinery: A
population-based case-control study.” Environmental research 140 (2015):
641-648.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[This week we are going to explore methods to understand and predict risk across space from point data. These may be point level data (i.e. measurements of something of interest at particular points) or point process data (i.e. occurrences of events in a given area). When you load this week’s libraries, it may prompt you to download XQuartz.]]></summary></entry><entry><title type="html">Lab 3 - Analysis of spatial clustering</title><link href="http://localhost:4000/lab-3/" rel="alternate" type="text/html" title="Lab 3 - Analysis of spatial clustering" /><published>2023-03-09T00:00:00-08:00</published><updated>2023-03-09T00:00:00-08:00</updated><id>http://localhost:4000/lab-3</id><content type="html" xml:base="http://localhost:4000/lab-3/"><![CDATA[<h3 id="aim">Aim</h3>

<p>To introduce methods for exploring clustering in spatial data</p>

<h3 id="content">Content</h3>

<p>This post provides an introduction to methods for exploring clustering
in different types of spatial data. The approaches will be explored
together in R, followed by an opportunity to adapt the code and run the
analysis yourself.</p>

<h3 id="datasets">Datasets</h3>

<ol>
  <li>Malaria point prevalence data at the village level from Burkina Faso</li>
  <li>Leukemia data at the census tract level from New York State</li>
  <li>Malaria case event data and population controls from northern
Namibia</li>
</ol>

<p>First we will attach the libraries used for visualization.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">rgdal</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">raster</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">spatstat</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">plotrix</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">leaflet</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">maptools</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">RColorBrewer</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">lattice</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">geoR</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">plotrix</span><span class="p">)</span><span class="w"> 
</span><span class="n">library</span><span class="p">(</span><span class="n">car</span><span class="p">)</span><span class="w"> </span><span class="c1"># contains a function for logistic transformation (log odds) to make more normal</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">geodata</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>These libraries are for spatial data management and point process
analysis.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span><span class="w">

</span><span class="c1"># Moran's I and spatial dependencies</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">spdep</span><span class="p">)</span><span class="w"> </span><span class="c1"># Spatial Dependence: Weighting Schemes, Statistics and Models</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ape</span><span class="p">)</span><span class="w"> </span><span class="c1"># Analyses of Phylogenetics and Evolution</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">pgirmess</span><span class="p">)</span><span class="w"> </span><span class="c1"># Data Analysis in Ecology</span><span class="w">

</span><span class="c1"># Libraries for point processes</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">spatstat</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">splancs</span><span class="p">)</span><span class="w"> </span><span class="c1"># K-function</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">smacpod</span><span class="p">)</span><span class="w"> </span><span class="c1"># Spatial scanning statistic</span><span class="w">
</span></code></pre></div></div>

<p>We’re going to load in some malaria data from Burkina Faso and visualize
it using Leaflet to see if we can initially assess if there may be
evidence of spatial clustering. What do you think?</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Open BF malaria data</span><span class="w">
</span><span class="n">BF_malaria_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/BF_malaria_data.csv"</span><span class="p">,</span><span class="n">header</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span><span class="c1">#OLD BF_Adm_1 &lt;- raster::getData("GADM", country="BFA", level=1)</span><span class="w">

</span><span class="n">BF_Adm_1</span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">gadm</span><span class="p">(</span><span class="n">country</span><span class="o">=</span><span class="s2">"BFA"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Spatial"</span><span class="p">)</span><span class="w">
</span><span class="nf">class</span><span class="p">(</span><span class="n">BF_Adm_1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "SpatialPolygonsDataFrame"
## attr(,"package")
## [1] "sp"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">proj4string</span><span class="p">(</span><span class="n">BF_Adm_1</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">CRS</span><span class="p">(</span><span class="s1">'+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 '</span><span class="p">)</span><span class="w">

</span><span class="c1"># Calculate prevalence</span><span class="w">
</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">prevalence</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">positives</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">examined</span><span class="w">

</span><span class="c1"># What do the data look like - do you see evidence of spatial clustering?</span><span class="w">
</span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="s2">"Oranges"</span><span class="p">,</span><span class="w"> </span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">prevalence</span><span class="p">)</span><span class="w">
</span><span class="n">leaflet</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addTiles</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addCircleMarkers</span><span class="p">(</span><span class="o">~</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="o">~</span><span class="n">latitude</span><span class="p">,</span><span class="w"> </span><span class="n">fillOpacity</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w">
                                                             </span><span class="n">fillColor</span><span class="o">=</span><span class="w"> </span><span class="o">~</span><span class="n">pal</span><span class="p">(</span><span class="n">prevalence</span><span class="p">),</span><span class="w"> </span><span class="n">radius</span><span class="o">=~</span><span class="n">prevalence</span><span class="o">*</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">stroke</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">weight</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pal</span><span class="p">,</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">~</span><span class="n">prevalence</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-4-1.png" alt="" /></p>

<h2 id="part-i-testing-for-spatial-autocorrelation-in-point-level-data">Part I: Testing for spatial autocorrelation in point-level data</h2>

<h3 id="global-spatial-autocorrelation">Global spatial autocorrelation</h3>

<p>In this section we’re going to look at some more formal statistical
tests of global spatial autocorrelation. We’ll look at two general ways
of doing this: using ‘Moran’s I’ and using correlograms. These can each
be done using multiple different packages in R.</p>

<p>Approach 1: Calculate Moran’s I using a distance based matrix</p>

<p>First we will look at the distribution of the prevalence data to see if
they are close to normally distributed. If the are very skewed, we will
need to transform them because the Moran’s I test produces a comparison
to the normal distribution. Here, we will use the logit transformation
to produce a more normal distribution. Then we will calculate the
distance between each of the points and use the inverse of the distance
matrix to produce a matrix of weights that we will use to calculate
Moran’s I.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hist</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">prevalence</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Prevalence"</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-5-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">logit</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">prevalence</span><span class="p">)</span><span class="w">
</span><span class="n">hist</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Log odds"</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-5-2.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Generate a distance matrix</span><span class="w">
</span><span class="n">BF.dists</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">dist</span><span class="p">(</span><span class="n">cbind</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">latitude</span><span class="p">)))</span><span class="w">
</span><span class="nf">dim</span><span class="p">(</span><span class="n">BF.dists</span><span class="p">)</span><span class="w"> </span><span class="c1"># 109 x 109 matrix of distance between all sets of points</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 109 109
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Take the inverse of the matrix values so that closer values have a larger weight and vs vs</span><span class="w">
</span><span class="n">BF.dists.inv</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">/</span><span class="n">BF.dists</span><span class="w">
</span><span class="n">diag</span><span class="p">(</span><span class="n">BF.dists.inv</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">   </span><span class="c1"># replace the diagonal values with zero</span><span class="w">

</span><span class="c1"># Computes Moran's I autocorrelation coefficient of x giving a matrix of weights (here based on distance) </span><span class="w">
</span><span class="n">Moran.I</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="p">,</span><span class="w"> </span><span class="n">BF.dists.inv</span><span class="p">)</span><span class="w">                 </span><span class="c1"># from the "ape" package</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## $observed
## [1] 0.0666352
## 
## $expected
## [1] -0.009259259
## 
## $sd
## [1] 0.01639855
## 
## $p.value
## [1] 3.690017e-06
</code></pre></div></div>

<p>Approach 2: Create a correlogram to explore Moran’s I over different
spatial lags. The “pgirmess” package requires spdep (which also has
correlogram options) but is much simplier and user-friendly.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calculate the maximum distance between points</span><span class="w">
</span><span class="n">maxDist</span><span class="o">&lt;-</span><span class="nf">max</span><span class="p">(</span><span class="n">dist</span><span class="p">(</span><span class="n">cbind</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">latitude</span><span class="p">)))</span><span class="w">
</span><span class="n">maxDist</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 7.534414
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xy</span><span class="o">=</span><span class="n">cbind</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">latitude</span><span class="p">)</span><span class="w">
</span><span class="n">pgi.cor</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">correlog</span><span class="p">(</span><span class="n">coords</span><span class="o">=</span><span class="n">xy</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="o">=</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="o">=</span><span class="s2">"Moran"</span><span class="p">,</span><span class="w"> </span><span class="n">nbclass</span><span class="o">=</span><span class="m">10</span><span class="p">)</span><span class="w">   </span><span class="c1"># "pgirmess" package</span><span class="w">
</span><span class="c1"># coords = xy cordinates, z= vector of values at each location and nbclass = the number of bins</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">pgi.cor</span><span class="p">)</span><span class="w"> </span><span class="c1"># statistically significant values (p&lt;0.05) are plotted in red</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-6-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pgi.cor</span><span class="w"> </span><span class="c1"># distclass is midpoint for the bin</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Moran I statistic 
##       dist.class        coef      p.value    n
##  [1,]  0.4121237  0.13669304 6.435709e-04 1092
##  [2,]  1.1618390  0.13700359 3.059924e-06 2176
##  [3,]  1.9115538  0.09009855 2.482029e-05 2680
##  [4,]  2.6612685 -0.02082828 6.589705e-01 2172
##  [5,]  3.4109833 -0.10323722 9.946353e-01 1376
##  [6,]  4.1606981 -0.16259353 9.997622e-01 1146
##  [7,]  4.9104129 -0.20629178 9.991684e-01  662
##  [8,]  5.6601277 -0.27492632 9.990240e-01  320
##  [9,]  6.4098425 -0.11874035 7.536360e-01  128
## [10,]  7.1595572 -0.25618534 7.320096e-01   20
</code></pre></div></div>

<p>Based on the correlogram, over what spatial lags are there evidence for
spatial autocorrelation? Is this clustering positive or negative?</p>

<p>Compare the correlogram to the results from a semivariogram approach:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">BF_malaria_data_geo</span><span class="o">&lt;-</span><span class="n">as.geodata</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="s2">"latitude"</span><span class="p">,</span><span class="s2">"log_odds"</span><span class="p">)])</span><span class="w">

</span><span class="c1"># Generate and plot a binned variogram (10 bins) NB: have made for full max distance (even though likely inaccurate) for comparison</span><span class="w">
</span><span class="n">Vario</span><span class="o">&lt;-</span><span class="n">variog</span><span class="p">(</span><span class="n">BF_malaria_data_geo</span><span class="p">,</span><span class="n">max.dist</span><span class="o">=</span><span class="m">7.53</span><span class="p">,</span><span class="n">uvec</span><span class="o">=</span><span class="n">seq</span><span class="p">(</span><span class="m">0.4121237</span><span class="p">,</span><span class="m">7.1595572</span><span class="p">,</span><span class="n">l</span><span class="o">=</span><span class="m">10</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Vario</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">pgi.cor</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-8-1.png" alt="" /></p>

<p>Approach 3: Calculate Moran’s I using a binary distance matrix. For this
approach, we are going to create sets of ‘neighbors’ based upon their
proximity. This approach can be used with point data but is especially
useful for areal data, as we will see shortly.</p>

<p>For this approach, you will need to consider what is a sensible distance
to classify points as neighbors. Considerations might include the scale
of analysis and the distribution of points. In the comparison of
different neighboring structures, you can see that increasing the
distance within which one is considered a neighbor dramatically
increases the overall number of neighbor linkages.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">coords</span><span class="o">&lt;-</span><span class="n">coordinates</span><span class="p">(</span><span class="n">xy</span><span class="p">)</span><span class="w"> </span><span class="c1"># set spatial coordinates to create a spatial object</span><span class="w">
</span><span class="n">IDs</span><span class="o">&lt;-</span><span class="n">row.names</span><span class="p">(</span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">coords</span><span class="p">))</span><span class="w">

</span><span class="c1"># In this approach, we chose a distance d such that pairs of points with distances less than </span><span class="w">
</span><span class="c1"># d are neighbors and those further apart are not. </span><span class="w">

</span><span class="n">Neigh_nb</span><span class="o">&lt;-</span><span class="n">knn2nb</span><span class="p">(</span><span class="n">knearneigh</span><span class="p">(</span><span class="n">coords</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">longlat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w"> </span><span class="n">row.names</span><span class="o">=</span><span class="n">IDs</span><span class="p">)</span><span class="w">     </span><span class="c1"># using the "spdep" package</span><span class="w">
</span><span class="c1"># assigns at least one neighbor to each and calculates the distances between</span><span class="w">
</span><span class="n">dsts</span><span class="o">&lt;-</span><span class="n">unlist</span><span class="p">(</span><span class="n">nbdists</span><span class="p">(</span><span class="n">Neigh_nb</span><span class="p">,</span><span class="n">coords</span><span class="p">))</span><span class="w"> </span><span class="c1"># returns the distance between nearest neighbors for each point</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">dsts</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
## 0.03727 0.12693 0.19004 0.22742 0.27488 1.10524
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">max_1nn</span><span class="o">&lt;-</span><span class="nf">max</span><span class="p">(</span><span class="n">dsts</span><span class="p">)</span><span class="w">
</span><span class="n">max_1nn</span><span class="w"> </span><span class="c1"># maximum distance to provide at least one neighbor to each point</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 1.10524
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># We create different neighbor structures based upon distance</span><span class="w">
</span><span class="n">Neigh_kd1</span><span class="o">&lt;-</span><span class="n">dnearneigh</span><span class="p">(</span><span class="n">coords</span><span class="p">,</span><span class="n">d1</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">d2</span><span class="o">=</span><span class="n">max_1nn</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="o">=</span><span class="n">IDs</span><span class="p">)</span><span class="w">   </span><span class="c1"># neighbors within maximum distance</span><span class="w">
</span><span class="n">Neigh_kd2</span><span class="o">&lt;-</span><span class="n">dnearneigh</span><span class="p">(</span><span class="n">coords</span><span class="p">,</span><span class="n">d1</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">d2</span><span class="o">=</span><span class="m">2</span><span class="o">*</span><span class="n">max_1nn</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="o">=</span><span class="n">IDs</span><span class="p">)</span><span class="w"> </span><span class="c1"># neighbors within 2X maximum distance</span><span class="w">

</span><span class="n">nb_1</span><span class="o">&lt;-</span><span class="nf">list</span><span class="p">(</span><span class="n">d1</span><span class="o">=</span><span class="n">Neigh_kd1</span><span class="p">,</span><span class="w"> </span><span class="n">d2</span><span class="o">=</span><span class="n">Neigh_kd2</span><span class="p">)</span><span class="w"> </span><span class="c1"># list of neighbor structures</span><span class="w">
</span><span class="n">sapply</span><span class="p">(</span><span class="n">nb_1</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">is.symmetric.nb</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">verbose</span><span class="o">=</span><span class="nb">F</span><span class="p">,</span><span class="w"> </span><span class="n">force</span><span class="o">=</span><span class="nb">T</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##   d1   d2 
## TRUE TRUE
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Checks for symmetry (i.e. if i is a neighbor of j, then j is a neighbor of i). Does not always hold for k-nearest neighbours</span><span class="w">
</span><span class="n">sapply</span><span class="p">(</span><span class="n">nb_1</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">n.comp.nb</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">$</span><span class="n">nc</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## d1 d2 
##  1  1
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Number of disjoint connected subgraphs</span><span class="w">

</span><span class="c1"># Plot neighbors comparing the two distances </span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">mar</span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">xy</span><span class="p">,</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Neigh_kd1</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"green"</span><span class="p">,</span><span class="n">add</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">xy</span><span class="p">,</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Neigh_kd2</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="s2">"green"</span><span class="p">,</span><span class="w"> </span><span class="n">add</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-9-1.png" alt="" /></p>

<p>To run a spatial test for clustering, we need to assign weights to the
neighbor list. We will use the neighbor structure with all neighbors
within the maximum neighbor distance between any two points.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#assign weights; </span><span class="w">
</span><span class="n">weights</span><span class="o">&lt;-</span><span class="n">nb2listw</span><span class="p">(</span><span class="n">Neigh_kd1</span><span class="p">,</span><span class="w"> </span><span class="n">style</span><span class="o">=</span><span class="s2">"W"</span><span class="p">)</span><span class="w">   </span><span class="c1"># row standardized binary weights, using minimum distance for one neighbor</span><span class="w">
</span><span class="n">weights</span><span class="w">                                   </span><span class="c1"># "B" is simplest binary weights</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Characteristics of weights list object:
## Neighbour list object:
## Number of regions: 109 
## Number of nonzero links: 1914 
## Percentage nonzero weights: 16.10976 
## Average number of links: 17.55963 
## 
## Weights style: W 
## Weights constants summary:
##     n    nn  S0       S1       S2
## W 109 11881 109 16.44475 442.0046
</code></pre></div></div>

<p>Using this weights matrix, we can now run the Moran’s I test on the
logit transformed prevalence using the neighborhood matrix. How do the
results compare to other approaches?</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">moran.test</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">listw</span><span class="o">=</span><span class="n">weights</span><span class="p">)</span><span class="w">  </span><span class="c1">#using row standardised weights</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
##  Moran I test under randomisation
## 
## data:  BF_malaria_data$log_odds  
## weights: weights    
## 
## Moran I statistic standard deviate = 4.7332, p-value = 1.105e-06
## alternative hypothesis: greater
## sample estimates:
## Moran I statistic       Expectation          Variance 
##       0.154300895      -0.009259259       0.001194126
</code></pre></div></div>

<p>We can also use a simulation approach: we simulate the test statistic
using random permutations of BF_malaria_data$log_odds so that the
values are randomly assigned to locations and the statistic is computed
nsim times; we compare the observed statistic to the distribution. What
do you conclude about evidence for spatial autocorrelation?</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">set.seed</span><span class="p">(</span><span class="m">1234</span><span class="p">)</span><span class="w">
</span><span class="n">bperm</span><span class="o">&lt;-</span><span class="n">moran.mc</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">listw</span><span class="o">=</span><span class="n">weights</span><span class="p">,</span><span class="n">nsim</span><span class="o">=</span><span class="m">999</span><span class="p">)</span><span class="w">
</span><span class="n">bperm</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
##  Monte-Carlo simulation of Moran I
## 
## data:  BF_malaria_data$log_odds 
## weights: weights  
## number of simulations + 1: 1000 
## 
## statistic = 0.1543, observed rank = 1000, p-value = 0.001
## alternative hypothesis: greater
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#statistic = 0.15, observed rank = 1000, p-value = 0.001</span><span class="w">

</span><span class="c1"># Plot simulated test statistics</span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">mar</span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">hist</span><span class="p">(</span><span class="n">bperm</span><span class="o">$</span><span class="n">res</span><span class="p">,</span><span class="w"> </span><span class="n">freq</span><span class="o">=</span><span class="nb">T</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="m">20</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"Simulated Moran's I"</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="m">0.15</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-12-1.png" alt="" /></p>

<p>We can now also take a look at running Moran’s I for areal data
(polygons), using a dataset on leukemia from New York (Turnbull et al
1990). We will also use these data later in the course in week 7.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nydata</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rgdal</span><span class="o">::</span><span class="n">readOGR</span><span class="p">(</span><span class="s2">"https://github.com/phw272c/phw272c.github.io/raw/master/data/nydata.geojson"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## OGR data source with driver: GeoJSON 
## Source: "https://github.com/phw272c/phw272c.github.io/raw/master/data/nydata.geojson", layer: "nydata"
## with 281 features
## It has 17 fields
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#lets take a look at the data</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">nydata</span><span class="o">@</span><span class="n">data</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##          AREANAME     AREAKEY        X        Y POP8 TRACTCAS  PROPCAS
## 0 Binghamton city 36007000100 4.069397 -67.3533 3540     3.08 0.000870
## 1 Binghamton city 36007000200 4.639371 -66.8619 3560     4.08 0.001146
## 2 Binghamton city 36007000300 5.709063 -66.9775 3739     1.09 0.000292
## 3 Binghamton city 36007000400 7.613831 -65.9958 2784     1.07 0.000384
## 4 Binghamton city 36007000500 7.315968 -67.3183 2571     3.06 0.001190
## 5 Binghamton city 36007000600 8.558753 -66.9344 2729     1.06 0.000388
##   PCTOWNHOME PCTAGE65P        Z  AVGIDIST PEXPOSURE   Cases       Xm       Ym
## 0  0.3277311 0.1466102  0.14197 0.2373852  3.167099 3.08284 4069.397 -67353.3
## 1  0.4268293 0.2351124  0.35555 0.2087413  3.038511 4.08331 4639.371 -66861.9
## 2  0.3377396 0.1380048 -0.58165 0.1708548  2.838229 1.08750 5709.063 -66977.5
## 3  0.4616048 0.1188937 -0.29634 0.1406045  2.643366 1.06515 7613.831 -65995.8
## 4  0.1924370 0.1415791  0.45689 0.1577753  2.758587 3.06017 7315.968 -67318.3
## 5  0.3651786 0.1410773 -0.28123 0.1726033  2.848411 1.06386 8558.753 -66934.4
##     Xshift  Yshift
## 0 423391.0 4661502
## 1 423961.0 4661993
## 2 425030.6 4661878
## 3 426935.4 4662859
## 4 426637.5 4661537
## 5 427880.3 4661921
</code></pre></div></div>

<p>For now, with this dataset we are only interested in seeing if there is
global clustering in the area-level case incidence. In the dataset we
find a ‘Cases’ variable that gives the estimated number of cases per
area. We need to also consider the population in each area however,
because areas with higher populations are more likely to have more cases
just due to population size. So we will first create an incidence
variable to normalize the case data by population size.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nydata</span><span class="o">$</span><span class="n">inc_per_1000</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">Cases</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">nydata</span><span class="o">$</span><span class="n">POP8</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></code></pre></div></div>

<p>As these are areas and not points, we will not use distance to define
the neighbors, but rather which polygons are directly touching one
another along a boundary or boundary point.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sf</span><span class="o">::</span><span class="n">sf_use_s2</span><span class="p">(</span><span class="kc">FALSE</span><span class="p">)</span><span class="w"> </span><span class="c1"># https://stackoverflow.com/questions/68478179/how-to-resolve-spherical-geometry-failures-when-joining-spatial-data</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Spherical geometry (s2) switched off
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Contiguity neighbors - all that share a boundary point</span><span class="w">
</span><span class="n">nydata_nb</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">poly2nb</span><span class="p">(</span><span class="n">nydata</span><span class="p">)</span><span class="w">  </span><span class="c1">#queen contiguity</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in st_is_longlat(pl): bounding box has potentially an invalid value
## range for longlat data

## Warning in st_is_longlat(pl): bounding box has potentially an invalid value
## range for longlat data

## Warning in st_is_longlat(x): bounding box has potentially an invalid value
## range for longlat data

## although coordinates are longitude/latitude, st_intersects assumes that they
## are planar
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nydata_nbr</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">poly2nb</span><span class="p">(</span><span class="n">nydata</span><span class="p">,</span><span class="w"> </span><span class="n">queen</span><span class="o">=</span><span class="nb">F</span><span class="p">)</span><span class="w">  </span><span class="c1">#rook contiguity</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in st_is_longlat(pl): bounding box has potentially an invalid value
## range for longlat data

## Warning in st_is_longlat(pl): bounding box has potentially an invalid value
## range for longlat data

## Warning in st_is_longlat(x): bounding box has potentially an invalid value
## range for longlat data

## although coordinates are longitude/latitude, st_intersects assumes that they
## are planar
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#coordinates</span><span class="w">
</span><span class="n">coords_ny</span><span class="o">&lt;-</span><span class="n">coordinates</span><span class="p">(</span><span class="n">nydata</span><span class="p">)</span><span class="w">

</span><span class="c1">#view and compare the neighbors</span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata_nb</span><span class="p">,</span><span class="n">coords_ny</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="s2">"blue"</span><span class="p">,</span><span class="n">add</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata_nbr</span><span class="p">,</span><span class="n">coords_ny</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="s2">"green"</span><span class="p">,</span><span class="n">add</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-15-1.png" alt="" /></p>

<p>As above, we then set the weights for the neighbor matrix. The default
is row standardized (each row sums to one), or binary, where neighbors
are 1 and 0 otherwise.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##set weights - contiguity</span><span class="w">
</span><span class="c1">#weights style W - row standardized</span><span class="w">
</span><span class="n">nydata_w</span><span class="o">&lt;-</span><span class="n">nb2listw</span><span class="p">(</span><span class="n">nydata_nb</span><span class="p">)</span><span class="w">
</span><span class="n">nydata_w</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Characteristics of weights list object:
## Neighbour list object:
## Number of regions: 281 
## Number of nonzero links: 1624 
## Percentage nonzero weights: 2.056712 
## Average number of links: 5.779359 
## 
## Weights style: W 
## Weights constants summary:
##     n    nn  S0       S1       S2
## W 281 78961 281 106.6125 1164.157
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#weights style B - binary</span><span class="w">
</span><span class="n">nydata_wB</span><span class="o">&lt;-</span><span class="n">nb2listw</span><span class="p">(</span><span class="n">nydata_nb</span><span class="p">,</span><span class="n">style</span><span class="o">=</span><span class="s2">"B"</span><span class="p">)</span><span class="w">
</span><span class="n">nydata_wB</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Characteristics of weights list object:
## Neighbour list object:
## Number of regions: 281 
## Number of nonzero links: 1624 
## Percentage nonzero weights: 2.056712 
## Average number of links: 5.779359 
## 
## Weights style: B 
## Weights constants summary:
##     n    nn   S0   S1    S2
## B 281 78961 1624 3248 41440
</code></pre></div></div>

<p>Based on this weights matrix, we can now do an initial check of spatial
autocorrelation in the data. What do you conclude? We will return to
this dataset in week 7.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##moran's tests of global spatial autocorrelation</span><span class="w">
</span><span class="n">moran.test</span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">inc_per_1000</span><span class="p">,</span><span class="n">listw</span><span class="o">=</span><span class="n">nydata_w</span><span class="p">)</span><span class="w">  </span><span class="c1">#using row standardized</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
##  Moran I test under randomisation
## 
## data:  nydata$inc_per_1000  
## weights: nydata_w    
## 
## Moran I statistic standard deviate = 1.8649, p-value = 0.0311
## alternative hypothesis: greater
## sample estimates:
## Moran I statistic       Expectation          Variance 
##       0.060405798      -0.003571429       0.001176865
</code></pre></div></div>

<h3 id="local-spatial-autocorrelation">Local spatial autocorrelation</h3>

<p>The above approaches examined evidence for global spatial autorrelation.
Now we’re going to look at local measures of clustering. One way to do
this is using ‘Local Moran’s I’, which we will illustrate using the
point-level data from Burkina Faso.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First calculate the local Moran's I around each point based on the spatial weights object (binary based on at least one neighbor)</span><span class="w">
</span><span class="n">I</span><span class="w"> </span><span class="o">&lt;-</span><span class="n">localmoran</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="p">,</span><span class="w"> </span><span class="n">weights</span><span class="p">)</span><span class="w">                         </span><span class="c1"># "spdep" package</span><span class="w">

</span><span class="c1"># Print 'LISA' for each point</span><span class="w">
</span><span class="n">Coef</span><span class="o">&lt;-</span><span class="n">printCoefmat</span><span class="p">(</span><span class="n">data.frame</span><span class="p">(</span><span class="n">I</span><span class="p">[</span><span class="n">IDs</span><span class="p">,],</span><span class="w"> </span><span class="n">row.names</span><span class="o">=</span><span class="n">row.names</span><span class="p">(</span><span class="n">coords</span><span class="p">),</span><span class="w">
                              </span><span class="n">check.names</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##                 Ii        E.Ii      Var.Ii    Z.Ii Pr(z != E(Ii))    
##   [1,]  1.8125e-01 -7.7320e-03  2.0321e-01  0.4192      0.6750550    
##   [2,] -1.2819e-01 -7.9011e-04  1.6567e-02 -0.9898      0.3222658    
##   [3,]  1.7760e-01 -1.0791e-02  2.2400e-01  0.3980      0.6905976    
##   [4,]  1.6095e-01 -1.4860e-02  3.0721e-01  0.3172      0.7510925    
##   [5,]  1.4150e-01 -3.5181e-04  5.1692e-03  1.9730      0.0484971 *  
##   [6,] -9.3562e-01 -1.4721e-02  3.8417e-01 -1.4858      0.1373384    
##   [7,]  2.0481e-01 -3.1400e-03  3.1249e-02  1.1763      0.2394560    
##   [8,]  1.0326e-01 -3.9330e-04  3.9249e-03  1.6546      0.0980141 .  
##   [9,]  6.4866e-01 -4.1543e-02  3.9751e-01  1.0947      0.2736389    
##  [10,]  2.2870e-01 -3.6550e-03  4.0807e-02  1.1502      0.2500442    
##  [11,] -6.3207e-02 -8.4035e-04  1.7620e-02 -0.4698      0.6384687    
##  [12,]  5.2887e-02 -1.3459e-04  1.0018e-03  1.6752      0.0938957 .  
##  [13,] -3.1234e-02 -5.2641e-05  4.7285e-04 -1.4339      0.1515894    
##  [14,] -2.7457e-01 -3.2778e-03  2.9348e-02 -1.5836      0.1132854    
##  [15,]  1.8953e+00 -3.2990e-02  2.5998e-01  3.7819      0.0001556 ***
##  [16,]  3.7821e-01 -5.6326e-03  3.2807e-02  2.1192      0.0340724 *  
##  [17,] -7.7082e-02 -5.2710e-05  3.9237e-04 -3.8888      0.0001008 ***
##  [18,]  1.6616e-01 -2.7475e-03  1.6049e-02  1.3333      0.1824444    
##  [19,]  1.4622e-01 -2.3970e-03  1.6356e-02  1.1621      0.2452126    
##  [20,]  2.1928e-01 -4.6906e-03  2.5458e-02  1.4037      0.1603973    
##  [21,]  2.6115e+00 -4.3279e-02  4.6398e-01  3.8975       9.72e-05 ***
##  [22,]  6.0848e-01 -3.6628e-03  2.7167e-02  3.7139      0.0002041 ***
##  [23,]  1.4323e-01 -2.4940e-03  1.5713e-02  1.1625      0.2450275    
##  [24,]  2.7566e-03 -3.0994e-05  2.7841e-04  0.1671      0.8673174    
##  [25,] -2.7090e-01 -1.6415e-03  8.3470e-03 -2.9472      0.0032066 ** 
##  [26,]  2.1542e+00 -3.8421e-02  3.6883e-01  3.6104      0.0003057 ***
##  [27,]  1.6954e+00 -5.6051e-02  3.0991e-01  3.1460      0.0016550 ** 
##  [28,] -4.3038e-01 -2.1343e-03  1.3451e-02 -3.6925      0.0002221 ***
##  [29,] -4.5056e-01 -4.9503e-03  2.8853e-02 -2.6234      0.0087059 ** 
##  [30,]  2.4252e+00 -1.2102e-01  8.6691e-01  2.7346      0.0062448 ** 
##  [31,]  9.2584e-02 -8.5393e-05  6.9586e-04  3.5130      0.0004431 ***
##  [32,] -3.1174e-02 -9.1729e-03  5.7403e-02 -0.0918      0.9268343    
##  [33,]  6.4106e-01 -4.5588e-03  3.6983e-02  3.3572      0.0007874 ***
##  [34,] -1.3437e-01 -4.3284e-04  3.2208e-03 -2.3600      0.0182749 *  
##  [35,] -1.8818e-03 -5.0218e-06  3.1717e-05 -0.3332      0.7389483    
##  [36,] -5.0239e-01 -7.1528e-03  5.2867e-02 -2.1539      0.0312505 *  
##  [37,]  1.4153e-02 -4.8535e-05  2.1754e-04  0.9629      0.3356070    
##  [38,]  4.0998e-01 -3.6404e-03  3.2582e-02  2.2915      0.0219368 *  
##  [39,]  1.6427e-02 -5.2015e-03  7.6056e-02  0.0784      0.9374896    
##  [40,] -2.7545e-01 -1.2675e-03  1.1371e-02 -2.5712      0.0101353 *  
##  [41,] -1.2604e-01 -3.7519e-02  1.2875e-01 -0.2467      0.8051351    
##  [42,]  3.6265e-01 -5.1487e-02  1.8386e-01  0.9658      0.3341195    
##  [43,]  1.7248e-03 -1.1431e-06  3.8659e-06  0.8778      0.3800330    
##  [44,] -3.3785e-01 -1.1374e-02  3.8030e-02 -1.6741      0.0941034 .  
##  [45,]  3.0104e-01 -1.2465e-02  4.1632e-02  1.5365      0.1244130    
##  [46,]  6.7195e-02 -1.4421e-03  4.8702e-03  0.9835      0.3253470    
##  [47,]  1.4938e-01 -2.7255e-02  9.4529e-02  0.5745      0.5656223    
##  [48,]  4.3522e-01 -1.4718e-02  5.4593e-02  1.9257      0.0541442 .  
##  [49,] -1.6736e-01 -4.1614e-03  1.2665e-02 -1.4502      0.1470058    
##  [50,]  4.1369e-01 -3.7769e-02  1.1676e-01  1.3212      0.1864341    
##  [51,] -5.0223e-01 -3.4350e-02  9.2048e-02 -1.5421      0.1230389    
##  [52,]  3.6965e-01 -2.8057e-03  2.0828e-02  2.5808      0.0098569 ** 
##  [53,] -3.0961e-01 -1.0434e-02  2.8654e-02 -1.7674      0.0771670 .  
##  [54,] -1.4140e-02 -6.2934e-05  2.1283e-04 -0.9649      0.3345770    
##  [55,]  2.0417e-01 -5.6924e-03  1.5707e-02  1.6745      0.0940283 .  
##  [56,]  3.0584e-03 -6.8129e-05  3.2507e-04  0.1734      0.8623295    
##  [57,]  4.8415e-01 -4.2565e-02  1.3093e-01  1.4556      0.1454901    
##  [58,] -1.3320e-02 -6.0679e-04  2.0509e-03 -0.2807      0.7789243    
##  [59,] -1.3369e-02 -3.2063e-05  7.7571e-05 -1.5143      0.1299608    
##  [60,]  5.3118e-02 -5.1915e-04  1.2013e-03  1.5475      0.1217365    
##  [61,]  1.0467e-01 -1.0876e-03  2.5153e-03  2.1086      0.0349789 *  
##  [62,] -4.9491e-02 -6.3766e-03  2.2590e-02 -0.2869      0.7742217    
##  [63,]  7.2047e-02 -4.2040e-03  1.9976e-02  0.5395      0.5895414    
##  [64,] -2.1793e-01 -4.1259e-03  1.4650e-02 -1.7665      0.0773166 .  
##  [65,] -2.9614e-01 -1.2994e-03  9.6605e-03 -2.9998      0.0027018 ** 
##  [66,]  9.5520e-02 -1.4102e-02  4.9570e-02  0.4924      0.6224591    
##  [67,]  4.5932e-02 -1.8184e-02  5.7360e-02  0.2677      0.7889236    
##  [68,]  9.3542e-01 -4.6004e-02  2.2354e-01  2.0758      0.0379153 *  
##  [69,]  1.3055e-01 -5.0112e-03  5.5872e-02  0.5735      0.5663029    
##  [70,]  1.2863e-01 -2.1095e-03  6.1268e-03  1.6702      0.0948753 .  
##  [71,]  2.1775e-01 -1.4675e-03  1.1942e-02  2.0060      0.0448548 *  
##  [72,] -5.2296e-02 -1.0877e-03  5.9246e-03 -0.6653      0.5058642    
##  [73,] -4.2840e-02 -7.6232e-04  4.1538e-03 -0.6529      0.5138407    
##  [74,] -7.4349e-02 -2.2058e-04  1.5084e-03 -1.9087      0.0563044 .  
##  [75,]  2.4038e-03 -1.7851e-07  6.3646e-07  3.0134      0.0025836 ** 
##  [76,]  3.0589e-02 -1.8076e-04  4.1842e-04  1.5042      0.1325193    
##  [77,]  3.3824e-01 -6.9083e-03  3.2737e-02  1.9076      0.0564413 .  
##  [78,]  5.1673e-01 -8.2918e-03  8.2092e-02  1.8324      0.0668895 .  
##  [79,] -2.1323e-02 -9.0292e-04  2.3893e-03 -0.4178      0.6761299    
##  [80,] -3.5618e-02 -1.5616e-04  4.3329e-04 -1.7036      0.0884505 .  
##  [81,]  7.7589e-02 -9.7284e-03  3.2582e-02  0.4837      0.6285717    
##  [82,] -7.0921e-02 -2.3914e-03  8.5061e-03 -0.7430      0.4574578    
##  [83,]  1.3071e-01 -1.9582e-03  5.9725e-03  1.7166      0.0860512 .  
##  [84,] -1.2850e-02 -7.8278e-06  2.9469e-05 -2.3657      0.0179962 *  
##  [85,]  2.9051e-02 -5.4606e-03  2.0445e-02  0.2414      0.8092748    
##  [86,]  2.2357e-01 -2.4572e-03  7.8750e-03  2.5470      0.0108643 *  
##  [87,]  3.9491e-01 -8.9711e-03  4.2424e-02  1.9609      0.0498962 *  
##  [88,]  7.6021e-02 -1.7009e-03  6.7619e-03  0.9452      0.3445681    
##  [89,]  2.7646e-01 -1.9951e-03  1.9878e-02  1.9750      0.0482679 *  
##  [90,] -7.2328e-02 -3.4831e-04  1.1776e-03 -2.0975      0.0359467 *  
##  [91,]  1.7124e-01 -1.9620e-03  6.6226e-03  2.1284      0.0333060 *  
##  [92,]  2.2277e-01 -2.9446e-03  1.3159e-02  1.9676      0.0491136 *  
##  [93,] -1.6416e-01 -4.6451e-03  2.0724e-02 -1.1081      0.2678358    
##  [94,] -8.5334e-02 -2.9359e-04  1.1688e-03 -2.4875      0.0128645 *  
##  [95,]  1.4523e-01 -3.1646e-02  1.0926e-01  0.5351      0.5925808    
##  [96,]  3.4949e-02 -9.9883e-04  6.3022e-03  0.4528      0.6506747    
##  [97,] -3.7727e-02 -7.8684e-04  4.6053e-03 -0.5443      0.5862018    
##  [98,] -8.3274e-02 -3.7601e-03  1.2669e-02 -0.7064      0.4799202    
##  [99,] -4.5113e-02 -1.8822e-04  8.9800e-04 -1.4992      0.1338279    
## [100,] -5.3629e-01 -1.0667e-02  5.0357e-02 -2.3423      0.0191634 *  
## [101,]  4.6925e-01 -3.1158e-02  2.0648e-01  1.1013      0.2707805    
## [102,]  1.3653e-02 -1.0162e-05  5.9525e-05  1.7710      0.0765650 .  
## [103,]  1.8685e-01 -2.6668e-03  1.6798e-02  1.4622      0.1436856    
## [104,] -8.6863e-03 -3.2087e-05  2.8823e-04 -0.5098      0.6102264    
## [105,]  2.9290e-02 -1.9567e-04  6.9752e-03  0.3531      0.7240497    
## [106,] -2.0335e-02 -1.2801e-03  1.0419e-02 -0.1867      0.8519111    
## [107,]  2.5801e-01 -5.5871e-03  3.5090e-02  1.4072      0.1593723    
## [108,]  4.9384e-02 -2.7835e-04  4.0901e-03  0.7765      0.4374357    
## [109,]  6.4535e-02 -1.2828e-03  1.3965e-01  0.1761      0.8601927    
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the spatial data against its spatially lagged values (the weighted mean of its neighbors)                         </span><span class="w">
</span><span class="n">nci</span><span class="o">&lt;-</span><span class="n">moran.plot</span><span class="p">(</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="p">,</span><span class="w"> </span><span class="n">listw</span><span class="o">=</span><span class="n">weights</span><span class="p">,</span><span class="w"> 
                </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"Log prevalence"</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="o">=</span><span class="s2">"Spatially lagged log prev"</span><span class="p">,</span><span class="w"> </span><span class="n">labels</span><span class="o">=</span><span class="nb">T</span><span class="p">,</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"grey"</span><span class="p">)</span><span class="w">
</span><span class="n">text</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">-5</span><span class="p">,</span><span class="m">-5</span><span class="p">),</span><span class="nf">c</span><span class="p">(</span><span class="m">0.9</span><span class="p">,</span><span class="w"> </span><span class="m">-1.9</span><span class="p">,</span><span class="m">0.9</span><span class="p">,</span><span class="m">-1.9</span><span class="p">),</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"High-High"</span><span class="p">,</span><span class="w"> </span><span class="s2">"High-Low"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Low-High"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Low-Low"</span><span class="p">),</span><span class="w"> </span><span class="n">cex</span><span class="o">=</span><span class="m">0.8</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-20-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Map points that are local outliers in the plot</span><span class="w">
</span><span class="n">infl</span><span class="o">&lt;-</span><span class="n">nci</span><span class="o">$</span><span class="n">is_inf</span><span class="o">==</span><span class="nb">T</span><span class="w"> </span><span class="c1"># find which points are statistically significant outliers</span><span class="w">
</span><span class="nf">sum</span><span class="p">(</span><span class="n">infl</span><span class="o">==</span><span class="nb">T</span><span class="p">)</span><span class="w">    </span><span class="c1">#13 true (12% - more than would expect by chance)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 13
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="o">&lt;-</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="w">
</span><span class="n">lhx</span><span class="o">&lt;-</span><span class="n">cut</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span><span class="w"> </span><span class="n">labels</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"L"</span><span class="p">,</span><span class="w"> </span><span class="s2">"H"</span><span class="p">),</span><span class="w"> </span><span class="n">include.lowest</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">

</span><span class="n">wx</span><span class="o">&lt;-</span><span class="n">lag</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span><span class="n">BF_malaria_data</span><span class="o">$</span><span class="n">log_odds</span><span class="p">)</span><span class="w">
</span><span class="n">lhwx</span><span class="o">&lt;-</span><span class="n">cut</span><span class="p">(</span><span class="n">wx</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="nf">min</span><span class="p">(</span><span class="n">wx</span><span class="p">),</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">wx</span><span class="p">),</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">wx</span><span class="p">)),</span><span class="w"> </span><span class="n">labels</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"L"</span><span class="p">,</span><span class="w"> </span><span class="s2">"H"</span><span class="p">),</span><span class="w"> </span><span class="n">include.lowest</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span><span class="n">lhlh</span><span class="o">&lt;-</span><span class="n">interaction</span><span class="p">(</span><span class="n">lhx</span><span class="p">,</span><span class="n">lhwx</span><span class="p">,</span><span class="n">infl</span><span class="p">,</span><span class="n">drop</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">

</span><span class="n">names</span><span class="o">&lt;-</span><span class="nf">rep</span><span class="p">(</span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">lhlh</span><span class="p">))</span><span class="w">
</span><span class="n">names</span><span class="p">[</span><span class="n">lhlh</span><span class="o">==</span><span class="s2">"L.L.TRUE"</span><span class="p">]</span><span class="o">&lt;-</span><span class="s2">"LL"</span><span class="w">
</span><span class="n">names</span><span class="p">[</span><span class="n">lhlh</span><span class="o">==</span><span class="s2">"H.L.TRUE"</span><span class="p">]</span><span class="o">&lt;-</span><span class="s2">"HL"</span><span class="w">
</span><span class="n">names</span><span class="p">[</span><span class="n">lhlh</span><span class="o">==</span><span class="s2">"L.H.TRUE"</span><span class="p">]</span><span class="o">&lt;-</span><span class="s2">"LH"</span><span class="w">
</span><span class="n">names</span><span class="p">[</span><span class="n">lhlh</span><span class="o">==</span><span class="s2">"H.H.TRUE"</span><span class="p">]</span><span class="o">&lt;-</span><span class="s2">"HH"</span><span class="w">
</span></code></pre></div></div>

<p>We can map the points to show the local clusters.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">BF_malaria_localM</span><span class="o">&lt;-</span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">cbind</span><span class="p">(</span><span class="n">xy</span><span class="p">,</span><span class="n">names</span><span class="p">))</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">BF_malaria_localM</span><span class="p">)</span><span class="o">&lt;-</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"names"</span><span class="p">)</span><span class="w">
</span><span class="n">BF_malaria_localM</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">)]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="w"> </span><span class="n">BF_malaria_localM</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">)],</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="nf">as.character</span><span class="p">(</span><span class="n">x</span><span class="p">))</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="n">factpal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorFactor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="s2">"cyan4"</span><span class="p">,</span><span class="s2">"coral4"</span><span class="p">,</span><span class="s2">"coral"</span><span class="p">,</span><span class="s2">"cyan"</span><span class="p">,</span><span class="s2">"lightgrey"</span><span class="p">),</span><span class="w"> </span><span class="n">names</span><span class="p">)</span><span class="w">
</span><span class="n">leaflet</span><span class="p">(</span><span class="n">BF_malaria_localM</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addTiles</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addCircleMarkers</span><span class="p">(</span><span class="o">~</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="o">~</span><span class="n">latitude</span><span class="p">,</span><span class="w"> </span><span class="n">fillOpacity</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w">
                                                               </span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="o">~</span><span class="n">factpal</span><span class="p">(</span><span class="n">names</span><span class="p">),</span><span class="w"> </span><span class="n">radius</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">stroke</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">weight</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">factpal</span><span class="p">,</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">~</span><span class="n">names</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="o">=</span><span class="s2">"Class"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-23-1.png" alt="" /></p>

<h2 id="part-ii-examining-spatial-point-processes">Part II: Examining spatial point processes</h2>

<p>In this section we’re going to look at a different type of point data,
point process data, and some of the tests we can use to examine spatial
autocorrelation in these data.</p>

<p>First we are going to load obfuscated malaria case data from northern
Namibia.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CaseControl</span><span class="o">&lt;-</span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/CaseControl.csv"</span><span class="p">)</span><span class="w">

</span><span class="c1">#  boundary file</span><span class="w">
</span><span class="c1">#OLD NAM_Adm0&lt;-raster::getData('GADM',country='NAM',level=0)</span><span class="w">

</span><span class="n">NAM_Adm0</span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">gadm</span><span class="p">(</span><span class="n">country</span><span class="o">=</span><span class="s2">"NAM"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Spatial"</span><span class="p">)</span><span class="w">
</span><span class="nf">class</span><span class="p">(</span><span class="n">NAM_Adm0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "SpatialPolygonsDataFrame"
## attr(,"package")
## [1] "sp"
</code></pre></div></div>

<p>We can convert the data to a SPDF and plot the cases and ‘controls’</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CaseControl_SPDF</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">SpatialPointsDataFrame</span><span class="p">(</span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CaseControl</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"long"</span><span class="p">,</span><span class="w"> </span><span class="s2">"lat"</span><span class="p">)],</span><span class="w">
                                           </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CaseControl</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"household_id"</span><span class="p">,</span><span class="w"> </span><span class="s2">"case"</span><span class="p">)])</span><span class="w">
</span><span class="n">cases</span><span class="o">&lt;-</span><span class="n">CaseControl_SPDF</span><span class="p">[</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">case</span><span class="o">==</span><span class="m">1</span><span class="p">,]</span><span class="w">
</span><span class="n">controls</span><span class="o">&lt;-</span><span class="n">CaseControl_SPDF</span><span class="p">[</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">case</span><span class="o">==</span><span class="m">0</span><span class="p">,]</span><span class="w">

</span><span class="c1"># Let's plot and see what we have</span><span class="w">
</span><span class="n">case_color_scheme</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="s2">"red"</span><span class="p">),</span><span class="w"> </span><span class="n">CaseControl_SPDF</span><span class="o">$</span><span class="n">case</span><span class="p">)</span><span class="w">
</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addTiles</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addCircleMarkers</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">CaseControl_SPDF</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">case_color_scheme</span><span class="p">(</span><span class="n">CaseControl_SPDF</span><span class="o">$</span><span class="n">case</span><span class="p">),</span><span class="w">
                                              </span><span class="n">radius</span><span class="o">=</span><span class="m">3</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-25-1.png" alt="" /></p>

<p>In the previous lecture, you already generated first order kernel
density estimates and calculated the ratio of the density estimate of
cases:controls. Now you will look at second order functions, summarizing
the spatial dependence between events</p>

<p>We need to change the case data to a PPP data type (‘point pattern’)</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CasesPPP</span><span class="o">&lt;-</span><span class="n">as</span><span class="p">(</span><span class="n">cases</span><span class="p">,</span><span class="w"> </span><span class="s2">"ppp"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>We use Ripley’s K function to summarize the spatial dependence between
events at a wide range of spatial scales</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">K</span><span class="o">&lt;-</span><span class="n">Kest</span><span class="p">(</span><span class="n">CasesPPP</span><span class="p">,</span><span class="n">correction</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"isotropic"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Ripley"</span><span class="p">))</span><span class="w">    </span><span class="c1">#uses the "spatstat" package</span><span class="w">

</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">))</span><span class="w"> </span><span class="c1"># Plot the estimate of K(r); note different border-corrected estimates ('iso', 'border' and 'trans')</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">K</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"d (dd)"</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="o">=</span><span class="s2">"K(dd)"</span><span class="p">)</span><span class="w"> </span><span class="c1"># Red dashed line is expected K value computed for a CRS process</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-27-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">E</span><span class="o">&lt;-</span><span class="n">envelope</span><span class="p">(</span><span class="n">CasesPPP</span><span class="p">,</span><span class="w"> </span><span class="n">Kest</span><span class="p">,</span><span class="w"> </span><span class="n">nsim</span><span class="o">=</span><span class="m">999</span><span class="p">)</span><span class="w"> </span><span class="c1"># Plot confidence envelope using MC simulation</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">E</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-29-1.png" alt="" /></p>

<p>The K-function computed for cases assumes that H0 is complete spatial
randomness. What are the limitations of this assumption?</p>

<p>Next we can look at the difference in Ripley’s K function between cases
and controls, using two approaches that do essentially the same thing;
#2 with hypothesis testing.</p>

<p>Approach 1: K function vignette from Bradley et al simply calculates the
K function for cases and controls, and evaluates the difference.</p>

<p>First create a marked point process.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CaseControlPPP</span><span class="o">&lt;-</span><span class="n">ppp</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">CaseControl</span><span class="o">$</span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">long</span><span class="p">),</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">lat</span><span class="p">),</span><span class="w"> </span><span class="n">marks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">case</span><span class="p">))</span><span class="w">

</span><span class="c1"># Calculate the K-function for cases</span><span class="w">
</span><span class="n">KX</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Kest</span><span class="p">(</span><span class="n">CaseControlPPP</span><span class="p">[</span><span class="n">CaseControlPPP</span><span class="o">$</span><span class="n">marks</span><span class="o">==</span><span class="m">1</span><span class="p">],</span><span class="n">correction</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"isotropic"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Ripley"</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">KX</span><span class="p">,</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="n">iso</span><span class="o">/</span><span class="nb">pi</span><span class="p">)</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">r</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-30-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calculate the K-function for controls</span><span class="w">
</span><span class="n">KY</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Kest</span><span class="p">(</span><span class="n">CaseControlPPP</span><span class="p">[</span><span class="n">CaseControlPPP</span><span class="o">$</span><span class="n">marks</span><span class="o">==</span><span class="m">0</span><span class="p">],</span><span class="n">correction</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"isotropic"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Ripley"</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">KY</span><span class="p">,</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="n">iso</span><span class="o">/</span><span class="nb">pi</span><span class="p">)</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">r</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-30-2.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calulate the difference in the two functions</span><span class="w">
</span><span class="n">Kdiff</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">eval.fv</span><span class="p">(</span><span class="n">KX</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">KY</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Kdiff</span><span class="p">,</span><span class="w"> </span><span class="n">legendpos</span><span class="o">=</span><span class="s2">"float"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-30-3.png" alt="" /></p>

<p>Approach 2: “Smacpod” package includes a function to estimate the
difference in K function and plot simulated CI. Also includes a function
to the test the significance based on these simulations.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kdest</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">kdest</span><span class="p">(</span><span class="n">CaseControlPPP</span><span class="p">,</span><span class="w"> </span><span class="n">case</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="n">nsim</span><span class="o">=</span><span class="m">999</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">0.95</span><span class="p">,</span><span class="w"> </span><span class="n">correction</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"isotropic"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Ripley"</span><span class="p">))</span><span class="w">  </span><span class="c1">#"smacpod" package</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 1 has been selected as the case group
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Note that the case = is position of the marks, not the value!  levels(CaseControlPPP$marks)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">kdest</span><span class="p">)</span><span class="w"> </span><span class="c1"># dark grey is min/max; light grey is confidence envelope (can change these with options)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-32-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kdplus.test</span><span class="p">(</span><span class="n">kdest</span><span class="p">)</span><span class="w"> </span><span class="c1"># Performs test of significance based on simulated confidence envelope and observed statistic</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
## Diggle and Chetwynd (1991) test for difference in K functions
## 
## KD(r) = K_case(r) - K_control(r)
## case label:  1 
## control label:  0 
## 
## null hypothesis: KD(r) = 0 for all r between 0 and 0.1653646 
## alternative hypothesis: KD(r) &gt; 0 for at least one r between 0 and 0.1653646 
## test statistic: 859.8309 
## p-value: 0.024 
## nsim: 999 
## simulation procedure: random labeling
</code></pre></div></div>

<h2 id="spatial-scan-statistics">Spatial Scan Statistics</h2>

<p>Finally we will look at spatial scan statistics using R.</p>

<p>On your own, you can also explore using SatScan, a free software tool
for spatial scan statistics that <a href="http://www.satscan.org/">you can find
here</a>.</p>

<p>For this exercise, we will use the “smacpod” library in R to run the
Kulldorf spatial scan statistic.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Convert CaseControl to a "PPP" object for spatial scan</span><span class="w">
</span><span class="n">CaseControlPPP</span><span class="o">&lt;-</span><span class="n">ppp</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">CaseControl</span><span class="o">$</span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">long</span><span class="p">),</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">lat</span><span class="p">),</span><span class="w"> </span><span class="n">marks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">CaseControl</span><span class="o">$</span><span class="n">case</span><span class="p">))</span><span class="w">

</span><span class="n">out</span><span class="o">&lt;-</span><span class="n">spscan.test</span><span class="p">(</span><span class="n">CaseControlPPP</span><span class="p">,</span><span class="w"> </span><span class="n">nsim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">999</span><span class="p">,</span><span class="w"> </span><span class="n">case</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">maxd</span><span class="o">=</span><span class="m">.15</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.05</span><span class="p">)</span><span class="w">    </span><span class="c1"># "smacpod" library</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 1 has been selected as the case group
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">CaseControlPPP</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-33-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">case_color_scheme</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="s2">"red"</span><span class="p">),</span><span class="w"> </span><span class="n">CaseControl_SPDF</span><span class="o">$</span><span class="n">case</span><span class="p">)</span><span class="w">
</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addTiles</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addCircleMarkers</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">CaseControl_SPDF</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">case_color_scheme</span><span class="p">(</span><span class="n">CaseControl_SPDF</span><span class="o">$</span><span class="n">case</span><span class="p">),</span><span class="w"> 
                                              </span><span class="n">stroke</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">radius</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">fillOpacity</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">addCircles</span><span class="p">(</span><span class="n">lng</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">out</span><span class="o">$</span><span class="n">clusters</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="o">$</span><span class="n">coords</span><span class="p">[,</span><span class="m">1</span><span class="p">],</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">out</span><span class="o">$</span><span class="n">clusters</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="o">$</span><span class="n">coords</span><span class="p">[,</span><span class="m">2</span><span class="p">],</span><span class="w"> </span><span class="n">weight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w">
             </span><span class="n">radius</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">out</span><span class="o">$</span><span class="n">clusters</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="o">$</span><span class="n">r</span><span class="o">*</span><span class="m">112</span><span class="o">*</span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="s2">"grey"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-4/unnamed-chunk-33-2.png" alt="" /></p>

<h2 id="key-readings">Key Readings</h2>

<p>Pullan, R. L., H. J. Sturrock, et al. (2012). “Spatial parasite ecology
and epidemiology: a review of methods and applications.” Parasitology
139(14): 1870-1887.</p>

<p>Pfeiffer DU, Robinson TP, Stevenson M, Stevens KB, Rogers DJ &amp; Clements
ACA (2008). Spatial Analysis in Epidemiology. Chapters 4 &amp; 5. Oxford
University Press, Oxford, UK.</p>

<h2 id="citation-for-the-leukemia-data">Citation for the leukemia data</h2>

<p>Turnbull, B. W. et al (1990) Monitoring for clusters of disease:
application to leukemia incidence in upstate New York American Journal
of Epidemiology, 132, 136-143</p>

<h2 id="other-good-resources">Other good resources</h2>

<p>Waller LA, Gotway CA (2004) Applied Spatial Statistics for Public Health
Data. John Wiley &amp; Sons, Hoboken, New Jersey.</p>

<ul>
  <li>R library rsatscan can be used to run SatScan from R, see also here:
<a href="https://www.satscan.org/rsatscan/rsatscan.html">rsatscan</a></li>
</ul>

<h2 id="selection-of-research-applications">Selection of research applications</h2>

<p>Bejon, P., T. N. Williams, et al. (2014). “A micro-epidemiological
analysis of febrile malaria in Coastal Kenya showing hotspots within
hotspots.” Elife 3: e02130.</p>

<p>Brooker S, Clarke S, Njagi JK, Polack S, Mugo B, Estambale B, Muchiri E,
Magnussen P &amp; Cox J (2004). Spatial clustering of malaria and associated
risk factors during an epidemic in a highland area of western Kenya.
Tropical Medicine and International Health 9: 757-766.</p>

<p>Fevre EM, Coleman PG, Odiit M, et al. (2001). The origins of a new
Trypanosoma brucei rhodesiense sleeping sickness outbreak in eastern
Uganda. Lancet 358: 625-628.</p>

<p>Huillard d’Aignaux J, Cousens SN, Delasnerie-Laupretre N, Brandel JP,
Salomon D, Laplanche JL, Hauw JJ &amp; Alperovitch A (2002). Analysis of the
geographical distribution of sporadic Creutzfeldt-Jakob disease in
France between 1992 and 1998. International Journal of Epidemiology 31:
490-495.</p>

<p>Gaudart J, Poudiougou B, Dicko A, et al. (2006). Space-time clustering
of childhood malaria at the household level: a dynamic cohort in a Mali
village. BMC Public Health 6: 286.</p>

<p>Kulldorff M, Athas WF, Feuer EJ, Miller BA &amp; Key CR (1998). Evaluating
cluster alarms: A Space-Time Scan Statistic and Brain Cancer in Los
Alamos, New Mexico. American Journal of Public Health 88, 1377-1380.</p>

<p>Kulldorff M &amp; Nagarwalla N (1995). Spatial disease clusters: Detection
and inference. Statistics in Medicine 14, 799-819. Odoi A, Martin SW,
Michel P, et al. (2004). Investigation of clusters of giardiasis using
GIS and a spatial scan statistic. Int J Health Geogr 3: 11.</p>

<p>Mosha, J. F., H. J. Sturrock, et al. (2014). “Hot spot or not: a
comparison of spatial statistical methods to predict prospective malaria
infections.” Malar J 13: 53.</p>

<p>Ngowi HA, Kassuku AA, Carabin H, et al. (2010). Spatial clustering of
porcine cysticercosis in Mbulu district, northern Tanzania. PLoS Negl
Trop Dis 4: e652.</p>

<p>Peterson I, Borrell LN, El-Sadr W, et al. (2009). A temporal-spatial
analysis of malaria transmission in Adama, Ethiopia. Am J Trop Med Hyg
81: 944-949.</p>

<p>Sissoko, M. S., L. L. van den Hoogen, et al. (2015). “Spatial Patterns
of Plasmodium falciparum Clinical Incidence, Asymptomatic Parasite
Carriage and Anopheles Density in Two Villages in Mali.” Am J Trop Med
Hyg 93(4): 790-797.</p>

<p>Washington CH, Radday J, Streit TG, et al. (2004). Spatial clustering of
filarial transmission before and after a Mass Drug Administration in a
setting of low infection prevalence. Filaria J 3: 3.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Aim]]></summary></entry><entry><title type="html">Lab 4 - Accessing spatial datasets</title><link href="http://localhost:4000/lab-4/" rel="alternate" type="text/html" title="Lab 4 - Accessing spatial datasets" /><published>2023-03-09T00:00:00-08:00</published><updated>2023-03-09T00:00:00-08:00</updated><id>http://localhost:4000/lab-4</id><content type="html" xml:base="http://localhost:4000/lab-4/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>In the last lab, we did cluster analysis to reveal noteworthy spatial
patterns in the outcome data (health related events/measures) and ways
to assess spatial autocorrelation. In lab 2 (Spatial variation in risk),
we actually kind of already used spatial autocorrelation to interpolate
the data and produce smooth maps of our outcomes.</p>

<p>Starting next week and till the end of the class, we will talk about
spatial regression modeling which combines regression modeling (first
trend) and spatial autocorrelation modeling (second trend).</p>

<p>Today, in this transition session, we will cover some of the spatial
data you can use in the regression modeling step.</p>

<h2 id="accessing-spatial-data">Accessing spatial data</h2>

<p>Many spatial data have been made directly available within R thanks to
packages but for some data, you might need to look online.</p>

<h3 id="from-r-packages">From R packages</h3>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load packages</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">raster</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">leaflet</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">geodata</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">terra</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>You have already used spatial data from the “raster” package via the
getData function. Let’s see what’s in there!</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Read vignette for details and references</span><span class="w">
</span><span class="c1">#OLD ?raster::getData()</span><span class="w">
</span><span class="c1">#NEW </span><span class="w">

</span><span class="o">?</span><span class="n">geodata</span><span class="w">
</span></code></pre></div></div>

<p>So you can download administrative boundaries (option name = ‘GADM’),
elevation (name = ‘alt’) and even climate variables (name =
‘worldclim’).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Ethiopia</span><span class="w">
</span><span class="c1"># Administrative boundaries (level 1)</span><span class="w">
</span><span class="c1">#OLD ETH_Adm_1 &lt;- raster::getData(name = "GADM",</span><span class="w">
 </span><span class="c1">#                            country = "ETH",</span><span class="w">
 </span><span class="c1">#                            level = 1)</span><span class="w">

</span><span class="c1">#NEW </span><span class="w">
</span><span class="n">ETH_Adm_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">gadm</span><span class="p">(</span><span class="n">country</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ETH"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Spatial"</span><span class="p">)</span><span class="w">
</span><span class="nf">class</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "SpatialPolygonsDataFrame"
## attr(,"package")
## [1] "sp"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Plot</span><span class="w">
  </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"CartoDB.Positron"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addPolygons</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="p">,</span><span class="w">
              </span><span class="n">popup</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">NAME_1</span><span class="p">,</span><span class="w">
              </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">NAME_1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-4-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Elevation (meters)</span><span class="w">
</span><span class="c1">#OLD ETH_elev &lt;- raster::getData(name = "alt",</span><span class="w">
 </span><span class="c1">#                           country = "ETH")</span><span class="w">
 
</span><span class="c1">#NEW </span><span class="w">
</span><span class="n">ETH_elev</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">elevation_30s</span><span class="p">(</span><span class="s2">"ETH"</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Raster"</span><span class="p">)</span><span class="w"> 
</span><span class="n">ETH_elev</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 1428, 1836, 2621808  (nrow, ncol, ncell)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 32.8, 48.1, 3.2, 15.1  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : ETH_elv_msk.tif 
## names      : ETH_elv_msk 
## values     : -202, 4459  (min, max)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raster_colorPal_elev</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">topo.colors</span><span class="p">(</span><span class="m">64</span><span class="p">),</span><span class="w">
                                     </span><span class="n">domain</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">ETH_elev</span><span class="p">),</span><span class="w">
                                     </span><span class="n">na.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w"> </span><span class="c1"># Define palette</span><span class="w">
</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Plot</span><span class="w">
  </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"CartoDB.Positron"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_elev</span><span class="p">,</span><span class="w">
                 </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_elev</span><span class="p">)</span><span class="w"> </span><span class="c1">#%&gt;%</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-4-2.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c1"># addLegend(pal = raster_colorPal_elev, </span><span class="w">
  </span><span class="c1">#           values = values(ETH_elev),</span><span class="w">
  </span><span class="c1">#           title = "Elevation&lt;br&gt;(meters)") </span><span class="w">
  </span><span class="c1"># I can't figure out why this ^ isn't working</span><span class="w">
</span></code></pre></div></div>

<h3 id="make-sure-you-get-what-you-want">Make sure you get what you want</h3>

<p>Need to correctly specify ‘country’ option:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#OLD raster::getData('ISO3')</span><span class="w">
</span><span class="n">cc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">country_codes</span><span class="p">()</span><span class="w">
</span><span class="n">cc</span><span class="w">
</span></code></pre></div></div>

<p>Varying ‘level’ option gives you different administrative boundaries and
disabling ‘mask’ option reveals elevation data comes from a larger
surface that goes beyond the country’s boundaries:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Ethiopia and South Sudan</span><span class="w">
</span><span class="c1"># Administrative boundaries (level 0)</span><span class="w">
</span><span class="c1">#OLD SSD_Adm_0 &lt;- raster::getData(name = "GADM",</span><span class="w">
 </span><span class="c1">#                            country = "SSD",</span><span class="w">
 </span><span class="c1">#                            level = 0)</span><span class="w">

</span><span class="c1">#NEW</span><span class="w">
</span><span class="n">SSD_Adm_0</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">gadm</span><span class="p">(</span><span class="n">country</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"SSD"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Spatial"</span><span class="p">)</span><span class="w">
</span><span class="nf">class</span><span class="p">(</span><span class="n">SSD_Adm_0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "SpatialPolygonsDataFrame"
## attr(,"package")
## [1] "sp"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Elevation (meters)</span><span class="w">
</span><span class="c1">#OLD ETH_elev_unmasked &lt;- raster::getData(name = "alt",</span><span class="w">
 </span><span class="c1">#                                    country = "ETH",</span><span class="w">
  </span><span class="c1">#                                   mask = FALSE)</span><span class="w">
</span><span class="c1">#NEW</span><span class="w">
</span><span class="n">ETH_elev_unmasked</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">elevation_30s</span><span class="p">(</span><span class="s2">"ETH"</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">(),</span><span class="w"> </span><span class="n">mask</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">),</span><span class="w"> </span><span class="s2">"Raster"</span><span class="p">)</span><span class="w">
</span><span class="n">ETH_elev_unmasked</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 1428, 1836, 2621808  (nrow, ncol, ncell)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 32.8, 48.1, 3.2, 15.1  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : ETH_elv.tif 
## names      : ETH_elv 
## values     : -202, 4459  (min, max)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raster_colorPal_elev_unmasked</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">topo.colors</span><span class="p">(</span><span class="m">64</span><span class="p">),</span><span class="w">
                                              </span><span class="n">domain</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">ETH_elev_unmasked</span><span class="p">),</span><span class="w">
                                              </span><span class="n">na.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w"> </span><span class="c1"># Define palette</span><span class="w">
</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Plot</span><span class="w">
  </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"CartoDB.Positron"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addPolygons</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="p">,</span><span class="w">
              </span><span class="n">popup</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="o">$</span><span class="n">NAME_0</span><span class="p">,</span><span class="w">
              </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="o">$</span><span class="n">NAME_0</span><span class="p">,</span><span class="w">
              </span><span class="n">fillOpacity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">
              </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"red"</span><span class="p">,</span><span class="w">
              </span><span class="n">weight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_elev_unmasked</span><span class="p">,</span><span class="w">
                 </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_elev_unmasked</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Elevation&lt;br&gt;(meters)"</span><span class="p">,</span><span class="w">
            </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">ETH_elev_unmasked</span><span class="p">),</span><span class="w">
            </span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_elev_unmasked</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-6-1.png" alt="" /></p>

<p>As you vary the ‘name’ option to access environmental variable, pay
particular attention to the geolocalisation options. For instance, at
the 2.5 resolution (minutes of a degree), there is no need for location
specification but at the 0.5 resolution, need to provide ‘lon’ and ‘lat’
arguments…</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Precipitation from worldclim at the 2.5, 5 or 10 resolution (minutes of a degree)... no need for location specification?!?!</span><span class="w">
</span><span class="c1">#OLD ETH_prec_10 &lt;- raster::getData(name = "worldclim",</span><span class="w">
 </span><span class="c1">#                           var = "prec",</span><span class="w">
  </span><span class="c1">#                          res = 10)</span><span class="w">

</span><span class="c1">#NEW </span><span class="w">
</span><span class="n">ETH_prec_10</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">worldclim_global</span><span class="p">(</span><span class="n">var</span><span class="o">=</span><span class="s2">"prec"</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">(),</span><span class="w"> </span><span class="n">version</span><span class="o">=</span><span class="s2">"2.1"</span><span class="p">),</span><span class="w"> </span><span class="s2">"Raster"</span><span class="p">)</span><span class="w">
</span><span class="n">ETH_prec_10</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterStack 
## dimensions : 1080, 2160, 2332800, 12  (nrow, ncol, ncell, nlayers)
## resolution : 0.1666667, 0.1666667  (x, y)
## extent     : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## names      : wc2.1_10m_prec_01, wc2.1_10m_prec_02, wc2.1_10m_prec_03, wc2.1_10m_prec_04, wc2.1_10m_prec_05, wc2.1_10m_prec_06, wc2.1_10m_prec_07, wc2.1_10m_prec_08, wc2.1_10m_prec_09, wc2.1_10m_prec_10, wc2.1_10m_prec_11, wc2.1_10m_prec_12 
## min values :                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0 
## max values :               908,               793,               720,              1004,              2068,              2210,              2381,              1674,              1955,              2328,               718,               806
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Precipitation from worldclim at the 0.5 resolution (minutes of a degree)... need to specifiy 'lon' and 'lat' of the tile looked for</span><span class="w">
</span><span class="c1">#OLD ETH_prec_0.5 &lt;- raster::getData(name = "worldclim",</span><span class="w">
                     </span><span class="c1">#       var = "prec",</span><span class="w">
                     </span><span class="c1">#       res = 0.5,</span><span class="w">
                     </span><span class="c1">#       lon = 40,</span><span class="w">
                      </span><span class="c1">#      lat = 10)</span><span class="w">
</span><span class="c1">#NEW</span><span class="w">

</span><span class="n">ETH_prec_0.5</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">worldclim_tile</span><span class="p">(</span><span class="n">var</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"prec"</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="n">lon</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">40.4897</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">9.1450</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Raster"</span><span class="p">)</span><span class="w">
</span><span class="n">ETH_prec_0.5</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterBrick 
## dimensions : 3600, 3600, 12960000, 12  (nrow, ncol, ncell, nlayers)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 30, 60, 0, 30  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : tile_32_wc2.1_30s_prec.tif 
## names      : tile_32_wc2.1_30s_prec_1, tile_32_wc2.1_30s_prec_2, tile_32_wc2.1_30s_prec_3, tile_32_wc2.1_30s_prec_4, tile_32_wc2.1_30s_prec_5, tile_32_wc2.1_30s_prec_6, tile_32_wc2.1_30s_prec_7, tile_32_wc2.1_30s_prec_8, tile_32_wc2.1_30s_prec_9, tile_32_wc2.1_30s_prec_10, tile_32_wc2.1_30s_prec_11, tile_32_wc2.1_30s_prec_12 
## min values :                        0,                        0,                        0,                        0,                        0,                        0,                        0,                        0,                        0,                         0,                         0,                         0 
## max values :                      122,                      131,                      239,                      707,                      303,                      344,                      471,                      441,                      315,                       471,                       577,                       185
</code></pre></div></div>

<p><em>Pop quiz: why do you think that is?</em></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Explore objects</span><span class="w">
</span><span class="n">ETH_prec_10</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterStack 
## dimensions : 1080, 2160, 2332800, 12  (nrow, ncol, ncell, nlayers)
## resolution : 0.1666667, 0.1666667  (x, y)
## extent     : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## names      : wc2.1_10m_prec_01, wc2.1_10m_prec_02, wc2.1_10m_prec_03, wc2.1_10m_prec_04, wc2.1_10m_prec_05, wc2.1_10m_prec_06, wc2.1_10m_prec_07, wc2.1_10m_prec_08, wc2.1_10m_prec_09, wc2.1_10m_prec_10, wc2.1_10m_prec_11, wc2.1_10m_prec_12 
## min values :                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0 
## max values :               908,               793,               720,              1004,              2068,              2210,              2381,              1674,              1955,              2328,               718,               806
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_prec_0.5</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterBrick 
## dimensions : 3600, 3600, 12960000, 12  (nrow, ncol, ncell, nlayers)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 30, 60, 0, 30  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : tile_32_wc2.1_30s_prec.tif 
## names      : tile_32_wc2.1_30s_prec_1, tile_32_wc2.1_30s_prec_2, tile_32_wc2.1_30s_prec_3, tile_32_wc2.1_30s_prec_4, tile_32_wc2.1_30s_prec_5, tile_32_wc2.1_30s_prec_6, tile_32_wc2.1_30s_prec_7, tile_32_wc2.1_30s_prec_8, tile_32_wc2.1_30s_prec_9, tile_32_wc2.1_30s_prec_10, tile_32_wc2.1_30s_prec_11, tile_32_wc2.1_30s_prec_12 
## min values :                        0,                        0,                        0,                        0,                        0,                        0,                        0,                        0,                        0,                         0,                         0,                         0 
## max values :                      122,                      131,                      239,                      707,                      303,                      344,                      471,                      441,                      315,                       471,                       577,                       185
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Restrict to October and plot</span><span class="w">
</span><span class="n">ETH_prec_10_Oct</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">crop</span><span class="p">(</span><span class="n">ETH_prec_10</span><span class="p">[[</span><span class="m">10</span><span class="p">]],</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">60</span><span class="p">,</span><span class="m">-10</span><span class="p">,</span><span class="m">20</span><span class="p">))</span><span class="w"> </span><span class="c1"># xmin, xmax, ymin, ymax</span><span class="w">
</span><span class="n">ETH_prec_0.5_Oct</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ETH_prec_0.5</span><span class="p">[[</span><span class="m">10</span><span class="p">]]</span><span class="w">


</span><span class="n">raster_colorPal_prec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">topo.colors</span><span class="p">(</span><span class="m">64</span><span class="p">),</span><span class="w">
                                     </span><span class="n">domain</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">ETH_prec_10_Oct</span><span class="p">),</span><span class="w">
                                     </span><span class="n">na.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w"> </span><span class="c1"># Define palette</span><span class="w">

</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Plot</span><span class="w">
  </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"CartoDB.Positron"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_prec_10_Oct</span><span class="p">,</span><span class="w">
                 </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec</span><span class="p">,</span><span class="w">
                 </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"October precipitation (mm)"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"October precipitation (mm)&lt;br&gt;(10' res)"</span><span class="p">,</span><span class="w">
            </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">ETH_prec_10_Oct</span><span class="p">),</span><span class="w">
            </span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec</span><span class="p">)</span><span class="w">  </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLayersControl</span><span class="p">(</span><span class="n">overlayGroups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"October precipitation (mm)"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-8-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Plot</span><span class="w">
  </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"CartoDB.Positron"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addPolygons</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="p">,</span><span class="w">
              </span><span class="n">popup</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="o">$</span><span class="n">NAME_0</span><span class="p">,</span><span class="w">
              </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="o">$</span><span class="n">NAME_0</span><span class="p">,</span><span class="w">
              </span><span class="n">fillOpacity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">
              </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"red"</span><span class="p">,</span><span class="w">
              </span><span class="n">weight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w">
              </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"South Sudan"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addPolygons</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="p">,</span><span class="w">
              </span><span class="n">popup</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">NAME_1</span><span class="p">,</span><span class="w">
              </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">NAME_1</span><span class="p">,</span><span class="w">
              </span><span class="n">fillOpacity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">
              </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w">
              </span><span class="n">weight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w">
              </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Ethiopia"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_prec_0.5_Oct</span><span class="p">,</span><span class="w">
                 </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec</span><span class="p">,</span><span class="w">
                 </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"October precipitation (mm)"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"October precipitation (mm)&lt;br&gt;(0.5' res)"</span><span class="p">,</span><span class="w">
            </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">ETH_prec_0.5_Oct</span><span class="p">),</span><span class="w">
            </span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLayersControl</span><span class="p">(</span><span class="n">overlayGroups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"October precipitation (mm)"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Ethiopia"</span><span class="p">,</span><span class="w"> </span><span class="s2">"South Sudan"</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">hideGroup</span><span class="p">(</span><span class="s2">"South Sudan"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-8-2.png" alt="" /></p>

<p><em>Pop quiz: how would you get the 0.5 resolution October precipitation
for South Sudan?</em></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Precipitation from worldclim at the 0.5 resolution (minutes of a degree)... Left half of South Sudan</span><span class="w">
</span><span class="c1"># SSD_prec_0.5_left &lt;- raster::getData(name = "worldclim",</span><span class="w">
</span><span class="c1">#                                      var = "prec",</span><span class="w">
</span><span class="c1">#                                      res = 0.5,</span><span class="w">
</span><span class="c1">#                                      lon = 20,</span><span class="w">
</span><span class="c1">#                                      lat = 10)</span><span class="w">



</span><span class="n">SSD_prec_0.5_left</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as</span><span class="p">(</span><span class="n">worldclim_tile</span><span class="p">(</span><span class="n">var</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"prec"</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="n">lon</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">20</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="o">=</span><span class="n">tempdir</span><span class="p">()),</span><span class="w"> </span><span class="s2">"Raster"</span><span class="p">)</span><span class="w">


</span><span class="c1"># Restrict to October</span><span class="w">
</span><span class="n">SSD_prec_0.5_Oct_left</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">SSD_prec_0.5_left</span><span class="p">[[</span><span class="m">10</span><span class="p">]]</span><span class="w">

</span><span class="c1"># Merge left and right halves together</span><span class="w">
</span><span class="n">SSD_prec_0.5_Oct</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">merge</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_prec_0.5_Oct_left</span><span class="p">,</span><span class="w">
                                  </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_prec_0.5_Oct</span><span class="p">)</span><span class="w">

</span><span class="c1"># Crop to South Sudan extent </span><span class="w">
</span><span class="n">SSD_prec_0.5_Oct_Crop_Unmasked</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">crop</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_prec_0.5_Oct</span><span class="p">,</span><span class="w">
                                               </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="p">)</span><span class="w">

</span><span class="c1"># Mask to South Sudan and plot</span><span class="w">
</span><span class="n">SSD_prec_0.5_Oct_Crop</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">mask</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_prec_0.5_Oct_Crop_Unmasked</span><span class="p">,</span><span class="w">
                                      </span><span class="n">mask</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="p">)</span><span class="w">

</span><span class="n">raster_colorPal_prec_SSD</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">topo.colors</span><span class="p">(</span><span class="m">64</span><span class="p">),</span><span class="w">
                                         </span><span class="n">domain</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">SSD_prec_0.5_Oct_Crop</span><span class="p">),</span><span class="w">
                                         </span><span class="n">na.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w"> </span><span class="c1"># Define palette</span><span class="w">

</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Plot</span><span class="w">
  </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"CartoDB.Positron"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_prec_0.5_Oct_Crop</span><span class="p">,</span><span class="w">
                 </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec_SSD</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addPolygons</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="p">,</span><span class="w">
              </span><span class="n">popup</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="o">$</span><span class="n">NAME_0</span><span class="p">,</span><span class="w">
              </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SSD_Adm_0</span><span class="o">$</span><span class="n">NAME_0</span><span class="p">,</span><span class="w">
              </span><span class="n">fillOpacity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">
              </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"red"</span><span class="p">,</span><span class="w">
              </span><span class="n">weight</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"October precipitation (mm)&lt;br&gt;(0.5' res)"</span><span class="p">,</span><span class="w">
            </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">SSD_prec_0.5_Oct_Crop</span><span class="p">),</span><span class="w">
            </span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec_SSD</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-9-1.png" alt="" /></p>

<p><em>In class assignement: map the 1 (minute of a degree) resolution January
precipitation for Kenya in inches?</em></p>

<h3 id="other-r-packages">Other R packages</h3>

<p>Here are a few R packages with spatial data available:</p>

<ul>
  <li>raster</li>
  <li><a href="https://github.com/16EAGLE/getSpatialData">getSpatialData</a></li>
  <li>rgistools</li>
  <li>rstoolbox</li>
  <li>sentinel2</li>
  <li>MODIS</li>
</ul>

<h3 id="on-the-web">On the web</h3>

<p>Often times those R packages simply get you an easier access to data
hosted online by various research groups and can have useful additional
functions to process the data. Sometimes though, no one has put the
effort to package the data you are looking for or you might not know
that it is already available in R. In those cases, you end up needing to
download the data online (which can come in many different formats) and
import in R yourself.</p>

<p>Download the precipitation WorldClim variable at 10m resolution
available <a href="https://www.worldclim.org/data/worldclim21.html">here</a>. What
you get is a folder with 12 <em>.tif</em> files, presumably representing
monthly precipitation (in mm and averaged over the 1970-2000 period),
presumably over the entire globe. As you encounter new file formats that
you don’t know how to import in R, it’s good practice to scout forums.
Let’s google <a href="https://www.google.com/search?client=safari&amp;rls=en&amp;q=How+to+import+.tif+files+in+R">How to import .tif files in
R?</a>
and find our answer on that
<a href="https://stackoverflow.com/questions/16803503/reading-a-tif-file-in-r">post</a>.
Fortunately, it looks like the raster function of the ‘raster’ package
reads in <em>.tif</em> files.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Path to wc2 folder you just downloaded</span><span class="w">
</span><span class="n">path_to_wc2_folder</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"~/Documents/GitHub/phw272c.github.io/_source/wc2.1_10m_prec/"</span><span class="w">

</span><span class="c1"># List files in folder downloaded</span><span class="w">
</span><span class="n">list.files</span><span class="p">(</span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path_to_wc2_folder</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##  [1] "readme.txt"            "wc2.1_10m_prec_01.tif" "wc2.1_10m_prec_02.tif"
##  [4] "wc2.1_10m_prec_03.tif" "wc2.1_10m_prec_04.tif" "wc2.1_10m_prec_05.tif"
##  [7] "wc2.1_10m_prec_06.tif" "wc2.1_10m_prec_07.tif" "wc2.1_10m_prec_08.tif"
## [10] "wc2.1_10m_prec_09.tif" "wc2.1_10m_prec_10.tif" "wc2.1_10m_prec_11.tif"
## [13] "wc2.1_10m_prec_12.tif"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list.files</span><span class="p">(</span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path_to_wc2_folder</span><span class="p">,</span><span class="w"> </span><span class="n">pattern</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">".tif"</span><span class="p">)</span><span class="w"> </span><span class="c1"># Restrict to .tif files</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##  [1] "wc2.1_10m_prec_01.tif" "wc2.1_10m_prec_02.tif" "wc2.1_10m_prec_03.tif"
##  [4] "wc2.1_10m_prec_04.tif" "wc2.1_10m_prec_05.tif" "wc2.1_10m_prec_06.tif"
##  [7] "wc2.1_10m_prec_07.tif" "wc2.1_10m_prec_08.tif" "wc2.1_10m_prec_09.tif"
## [10] "wc2.1_10m_prec_10.tif" "wc2.1_10m_prec_11.tif" "wc2.1_10m_prec_12.tif"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Read in October precipitation</span><span class="w">
</span><span class="n">wc2_prec_10_Oct</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="n">path_to_wc2_folder</span><span class="p">,</span><span class="w"> </span><span class="s2">"wc2.1_10m_prec_10.tif"</span><span class="p">))</span><span class="w">

</span><span class="c1"># Compare to data downloaded via raster::getData()</span><span class="w">
</span><span class="n">wc2_prec_10_Oct</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 1080, 2160, 2332800  (nrow, ncol, ncell)
## resolution : 0.1666667, 0.1666667  (x, y)
## extent     : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : wc2.1_10m_prec_10.tif 
## names      : wc2.1_10m_prec_10 
## values     : 0, 2328  (min, max)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_prec_10_Oct</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 180, 360, 64800  (nrow, ncol, ncell)
## resolution : 0.1666667, 0.1666667  (x, y)
## extent     : 0, 60, -10, 20  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : memory
## names      : wc2.1_10m_prec_10 
## values     : 0, 596  (min, max)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Plot</span><span class="w">
  </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"CartoDB.Positron"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_prec_10_Oct</span><span class="p">,</span><span class="w">
                 </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec</span><span class="p">,</span><span class="w">
                 </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"raster::getData"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wc2_prec_10_Oct</span><span class="p">,</span><span class="w">
                 </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec</span><span class="p">,</span><span class="w">
                 </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"WorldClim.com download"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"October precipitation (mm)&lt;br&gt;(10' res)"</span><span class="p">,</span><span class="w">
            </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">ETH_prec_10_Oct</span><span class="p">),</span><span class="w">
            </span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">raster_colorPal_prec</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLayersControl</span><span class="p">(</span><span class="n">overlayGroups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"raster::getData"</span><span class="p">,</span><span class="w"> </span><span class="s2">"WorldClim.com download"</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">hideGroup</span><span class="p">(</span><span class="s2">"WorldClim.com download"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-11-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Another more elegant way to read in the data downloaded online</span><span class="w">
</span><span class="n">wc2_prec_10</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">stack</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="n">path_to_wc2_folder</span><span class="p">,</span><span class="w"> 
                                        </span><span class="n">list.files</span><span class="p">(</span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path_to_wc2_folder</span><span class="p">,</span><span class="w">
                                                   </span><span class="n">pattern</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">".tif"</span><span class="p">)))</span><span class="w">
</span><span class="n">wc2_prec_10</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterStack 
## dimensions : 1080, 2160, 2332800, 12  (nrow, ncol, ncell, nlayers)
## resolution : 0.1666667, 0.1666667  (x, y)
## extent     : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## names      : wc2.1_10m_prec_01, wc2.1_10m_prec_02, wc2.1_10m_prec_03, wc2.1_10m_prec_04, wc2.1_10m_prec_05, wc2.1_10m_prec_06, wc2.1_10m_prec_07, wc2.1_10m_prec_08, wc2.1_10m_prec_09, wc2.1_10m_prec_10, wc2.1_10m_prec_11, wc2.1_10m_prec_12 
## min values :                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0,                 0 
## max values :               908,               793,               720,              1004,              2068,              2210,              2381,              1674,              1955,              2328,               718,               806
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wc2_prec_10</span><span class="p">[[</span><span class="m">10</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 1080, 2160, 2332800  (nrow, ncol, ncell)
## resolution : 0.1666667, 0.1666667  (x, y)
## extent     : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : wc2.1_10m_prec_10.tif 
## names      : wc2.1_10m_prec_10 
## values     : 0, 2328  (min, max)
</code></pre></div></div>

<h3 id="other-online-resources">Other online resources</h3>

<p>Here are a few good websites with free downloadable spatial data</p>

<ul>
  <li><a href="http://worldclim.org/version2">Worldclim</a></li>
  <li><a href="https://www.chc.ucsb.edu/data/chirps">CHIRPS</a></li>
  <li><a href="https://earthengine.google.com">Google Earth Engine</a></li>
  <li><a href="https://climateengine.org">Climate Engine</a></li>
  <li><a href="https://land.copernicus.eu">Copernicus Land data</a></li>
  <li><a href="https://map.ox.ac.uk">Malaria Atlas Project</a></li>
  <li><a href="https://modis.gsfc.nasa.gov">MODIS</a></li>
</ul>

<h2 id="spatial-data-where-do-they-come-from">Spatial data: where do they come from?</h2>

<p>We often interact with climatic and environmental raster data, like the
land use dataset shown below. But how are these datasets produced? The
answer is via remotely sensed imagery, such as images taken by
satellites, planes or drones. These data can sometimes be combined with
ground data, such as data from weather stations.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Land use (# For information on land use classifications see http://due.esrin.esa.int/files/GLOBCOVER2009_Validation_Report_2.2.pdf)</span><span class="w">
</span><span class="n">ETH_land_use</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">raster</span><span class="p">(</span><span class="s2">"https://github.com/phw272c/phw272c.github.io/blob/master/data/ETH_land_use.tif?raw=true"</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_land_use</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-12-1.png" alt="" /></p>

<p><img src="../images/week-5/GlobalCover.png" alt="" /></p>

<h3 id="remote-sensing-data">Remote sensing data</h3>

<p><img src="../images/week-5//NASA.png" alt="" /></p>

<p>Satellites orbiting around the globe carry instruments to take
measurements. Just likes our eyes or cameras, the sensors onboard
satellites receive a radiation that was emitted by a source of light
(sun, flash, light bulb, etc…) and reflected by an object. The
differences between the pre and post reflection radiations characterize
properties of the reflecting object such as color for which our eyes
have been optimized to perceive. You can picture the radiation as a wave
signal. Speed radars and the SRTM mission act in the same way (except
they also send the incident radiation) and from the difference in the 2
wave signals calculate speed and elevation respectively.</p>

<p>Speed, elevation, color are calculated based on the wavelengths property
of the wave. Sensors onboard remote sensing satelitte mission can
receive multiple waves across the spectrum.</p>

<p><img src="../images/week-5/Spectrum.png" alt="" /></p>

<p>For instance the satellite Landsat-8 has 11 bands (i.e wavelengths
ranges) at which it measures the reflectance (fraction of incident
electromagnetic power that is reflected) which we can simply see as a
measure of ‘light’ intensity reflected by the earth surface.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load some Etiophia Landsat data for the year 2017 (only 7 first bands available)</span><span class="w">
</span><span class="n">Landsat_Band_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">raster</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://github.com/phw272c/phw272c.github.io/blob/master/data/Landsat/Landsat_2017_Band1.tif?raw=true"</span><span class="p">)</span><span class="w">
</span><span class="n">Landsat_Band_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">raster</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://github.com/phw272c/phw272c.github.io/blob/master/data/Landsat/Landsat_2017_Band2.tif?raw=true"</span><span class="p">)</span><span class="w">
</span><span class="n">Landsat_Band_3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">raster</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://github.com/phw272c/phw272c.github.io/blob/master/data/Landsat/Landsat_2017_Band3.tif?raw=true"</span><span class="p">)</span><span class="w">
</span><span class="n">Landsat_Band_4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">raster</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://github.com/phw272c/phw272c.github.io/blob/master/data/Landsat/Landsat_2017_Band4.tif?raw=true"</span><span class="p">)</span><span class="w">
</span><span class="n">Landsat_Band_5</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">raster</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://github.com/phw272c/phw272c.github.io/blob/master/data/Landsat/Landsat_2017_Band5.tif?raw=true"</span><span class="p">)</span><span class="w">
</span><span class="n">Landsat_Band_6</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">raster</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://github.com/phw272c/phw272c.github.io/blob/master/data/Landsat/Landsat_2017_Band6.tif?raw=true"</span><span class="p">)</span><span class="w">
</span><span class="n">Landsat_Band_7</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">raster</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://github.com/phw272c/phw272c.github.io/blob/master/data/Landsat/Landsat_2017_Band7.tif?raw=true"</span><span class="p">)</span><span class="w">

</span><span class="c1"># Stack together layers</span><span class="w">
</span><span class="n">Landsat_Band</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">stack</span><span class="p">(</span><span class="n">Landsat_Band_1</span><span class="p">,</span><span class="w">
                              </span><span class="n">Landsat_Band_2</span><span class="p">,</span><span class="w">
                              </span><span class="n">Landsat_Band_3</span><span class="p">,</span><span class="w">
                              </span><span class="n">Landsat_Band_4</span><span class="p">,</span><span class="w">
                              </span><span class="n">Landsat_Band_5</span><span class="p">,</span><span class="w">
                              </span><span class="n">Landsat_Band_6</span><span class="p">,</span><span class="w">
                              </span><span class="n">Landsat_Band_7</span><span class="p">)</span><span class="w">

</span><span class="c1"># Explore the reflectance values. Assume you should normalize by 10000 to get reflectance</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">Landsat_Band</span><span class="p">[[</span><span class="m">1</span><span class="p">]])</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##             B1
## Min.      73.0
## 1st Qu.  338.0
## Median   403.0
## 3rd Qu.  493.5
## Max.    4032.0
## NA's       0.0
</code></pre></div></div>

<h3 id="how-do-you-get-from-reflectance-to-land-use-surfaces">How do you get from reflectance to land use surfaces?</h3>

<p>First you can read some
<a href="https://www.usgs.gov/faqs/what-are-best-landsat-spectral-bands-use-my-research">documentation</a>
about the wavelength ranges covered by band for your satellite.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Label bands accordingly</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">Landsat_Band</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'Ultra.blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Green'</span><span class="p">,</span><span class="w"> </span><span class="s1">'Red'</span><span class="p">,</span><span class="w"> </span><span class="s1">'NIR'</span><span class="p">,</span><span class="w"> </span><span class="s1">'SWIR1'</span><span class="p">,</span><span class="w"> </span><span class="s1">'SWIR2'</span><span class="p">)</span><span class="w">

</span><span class="c1"># Plot individual layers</span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Landsat_Band_2</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Blue"</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gray</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">100</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">100</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Landsat_Band_3</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Green"</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gray</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">100</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">100</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Landsat_Band_4</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Red"</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gray</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">100</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">100</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">Landsat_Band_5</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"NIR"</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gray</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">100</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">100</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-14-1.png" alt="" /></p>

<p><em>Pop quiz: what do you think is in the top right corner of our spatial
extent?</em></p>

<p>Notice the difference in shading and range of legends between the
different bands. This is because different surface features reflect the
incident solar radiation differently. Each layer represent how much
incident solar radiation is reflected for a particular wavelength range.
For example, vegetation reflects more energy in NIR than other
wavelengths and thus appears brighter. In contrast, water absorbs most
of the energy in the NIR wavelength and it appears dark.</p>

<p>We do not gain that much information from these grey-scale plots; they
are often combined into a “composite” to create more interesting plots.
To make a “true (or natural) color” image, that is, something that looks
like a normal photograph (vegetation in green, water blue etc), we need
bands in the red, green and blue regions. For this Landsat image, band 4
(red), 3 (green), and 2 (blue) can be used. The plotRGB method can be
used to combine them into a single composite. You can also supply
additional arguments to plotRGB to improve the visualization (e.g. a
linear stretch of the values, using strecth = “lin”).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raster</span><span class="o">::</span><span class="n">plotRGB</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Landsat_Band</span><span class="p">,</span><span class="w">
                </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w">
                </span><span class="n">g</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w">
                </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w">
                </span><span class="n">stretch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"lin"</span><span class="p">,</span><span class="w">
                </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Landsat True Color Composite"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-15-1.png" alt="" /></p>

<p>The true-color composite reveals much more about the landscape than the
earlier gray images. Another popular image visualization method in
remote sensing is known “false color” image in which NIR, red, and green
bands are combined. This representation is popular as it makes it easy
to see the vegetation (in red).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raster</span><span class="o">::</span><span class="n">plotRGB</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Landsat_Band</span><span class="p">,</span><span class="w">
                </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w">
                </span><span class="n">g</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w">
                </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w">
                </span><span class="n">stretch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"lin"</span><span class="p">,</span><span class="w">
                </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Landsat False Color Composite"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-16-1.png" alt="" /></p>

<h3 id="relation-between-bands">Relation between bands</h3>

<p>A scatterplot matrix can be helpful in exploring relationships between
raster layers. This can be done with the pairs() function of the
“raster” package.</p>

<p>Plot of reflection in the ultra-blue wavelength against reflection in
the blue wavelength.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raster</span><span class="o">::</span><span class="n">pairs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Landsat_Band</span><span class="p">[[</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">]],</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Ultra-blue versus Blue"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in graphics::par(usr): argument 1 does not name a graphical parameter

## Warning in graphics::par(usr): argument 1 does not name a graphical parameter

## Warning in graphics::par(usr): argument 1 does not name a graphical parameter
</code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-17-1.png" alt="" /></p>

<p>Plot of reflection in the red wavelength against reflection in the NIR
wavelength.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raster</span><span class="o">::</span><span class="n">pairs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Landsat_Band</span><span class="p">[[</span><span class="m">4</span><span class="o">:</span><span class="m">5</span><span class="p">]],</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Red versus NIR"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in graphics::par(usr): argument 1 does not name a graphical parameter

## Warning in graphics::par(usr): argument 1 does not name a graphical parameter

## Warning in graphics::par(usr): argument 1 does not name a graphical parameter
</code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-18-1.png" alt="" /></p>

<p>The first plot reveals high correlations between the blue wavelength
regions. Because of the high correlation, we can just use one of the
blue bands without losing much information. The distribution of points
in second plot (between NIR and red) is unique due to its triangular
shape. Vegetation reflects more in the NIR range than in the red and
creates the upper corner close to NIR (y) axis. Water absorbs energy
from all the bands and occupies the location close to origin. The
furthest corner is created due to highly reflecting surface features
like bright soil or concrete.</p>

<h3 id="spectral-profiles">Spectral profiles</h3>

<p>A plot of the spectrum (all bands) for pixels representing a certain
earth surface features (e.g. water) is known as a spectral profile. Such
profiles demonstrate the differences in spectral properties of various
earth surface features and constitute the basis for image analysis.</p>

<p>Let’s start by loading some training data from the region which compiles
GPS coordinates of points for which we know the Land use and Land cover
(LULC) class.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load the training dataset, which compiles GPS coordinates of points for which we know the Land use and Land cover (LULC) class</span><span class="w">
</span><span class="n">Training_Data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/LULC_Training_Tana.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">T</span><span class="p">)</span><span class="w">

</span><span class="c1"># Explore the data</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">Training_Data</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##   Latitude Longitude LULC
## 1 11.75859  37.26399   12
## 2 11.70965  37.14431   12
## 3 11.79550  37.38545   17
## 4 11.78845  37.15329   10
## 5 11.50553  37.15888   10
## 6 11.79360  37.29655   10
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Label LULC classes</span><span class="w">
</span><span class="n">Training_Data</span><span class="o">$</span><span class="n">LULC</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">Training_Data</span><span class="o">$</span><span class="n">LULC</span><span class="p">,</span><span class="w">
                             </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="m">11</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">13</span><span class="p">,</span><span class="w"> </span><span class="m">17</span><span class="p">),</span><span class="w">
                             </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Savanna"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Grassland"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Wetland"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Cropland"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Urban"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Water"</span><span class="p">))</span><span class="w">

</span><span class="c1"># Frequency table of classes</span><span class="w">
</span><span class="n">table</span><span class="p">(</span><span class="n">Training_Data</span><span class="o">$</span><span class="n">LULC</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
##   Savanna Grassland   Wetland  Cropland     Urban     Water 
##         4       481        27       328         4       156
</code></pre></div></div>

<p>You can now convert the data frame to a spatial object to extract
reflectance values at training points. Spectral values can be extracted
from any multispectral data set using extract() function of the “raster”
package.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Convert data frame to a SpatialPointsDataFrame by specifying coordinates</span><span class="w">
</span><span class="n">Training_Data_DF</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Training_Data</span><span class="w"> </span><span class="c1"># Save a data frame version</span><span class="w">
</span><span class="n">sp</span><span class="o">::</span><span class="n">coordinates</span><span class="p">(</span><span class="n">Training_Data</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Latitude"</span><span class="p">)</span><span class="w">

</span><span class="c1"># Extract values from the reflectance images at the point locations and merge to training dataset</span><span class="w">
</span><span class="n">Training_Data_Reflectance</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">data.frame</span><span class="p">(</span><span class="n">LULC</span><span class="w"> </span><span class="o">=</span><span class="n">Training_Data_DF</span><span class="o">$</span><span class="n">LULC</span><span class="p">),</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">raster</span><span class="o">::</span><span class="n">extract</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Landsat_Band</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Training_Data</span><span class="p">)))</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">Training_Data_Reflectance</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##        LULC Ultra.blue Blue Green  Red  NIR SWIR1 SWIR2
## 1  Cropland        372  512   823  991 2494  2548  1620
## 2  Cropland        375  483   795 1183 2038  1886  1613
## 3     Water        603  780  1378 1111  259   171   141
## 4 Grassland        364  485   806  917 1767  1524   997
## 5 Grassland        355  437   693  765 1972  1990  1427
## 6 Grassland        407  499   759  868 2254  2161  1433
</code></pre></div></div>

<p>We can now compute the mean reflectance values for each class and each
band and plot to obtain the spectral profiles.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Average reflectance values over LULC classes</span><span class="w">
</span><span class="n">LULC_Mean_Reflectance</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">stats</span><span class="o">::</span><span class="n">aggregate</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">.</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">LULC</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Training_Data_Reflectance</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">){</span><span class="nf">round</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="w"> </span><span class="n">digits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)})</span><span class="w">
</span><span class="n">LULC_Mean_Reflectance</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##        LULC Ultra.blue   Blue   Green     Red     NIR   SWIR1   SWIR2
## 1   Savanna     404.00 455.25  702.12  747.62 2303.88 1639.50 1085.62
## 2 Grassland     367.07 450.39  731.63  883.92 2137.84 2044.79 1478.32
## 3   Wetland     360.65 440.81  760.96  664.87 1929.70 1099.56  586.33
## 4  Cropland     408.25 503.26  794.93 1030.95 2308.46 2169.48 1615.76
## 5     Urban     476.38 580.12  848.00  957.88 2128.75 1884.00 1393.12
## 6     Water     571.12 731.72 1313.05 1131.43  302.03  170.37  136.47
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Reshape to long format</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidyr</span><span class="p">)</span><span class="w">
</span><span class="n">LULC_Mean_Reflectance_Long</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tidyr</span><span class="o">::</span><span class="n">gather</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LULC_Mean_Reflectance</span><span class="p">,</span><span class="w">
                                            </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Band"</span><span class="p">,</span><span class="w">
                                            </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Reflectance"</span><span class="p">,</span><span class="w">
                                            </span><span class="o">-</span><span class="s2">"LULC"</span><span class="p">,</span><span class="w">
                                            </span><span class="n">factor_key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">T</span><span class="p">)</span><span class="w">

</span><span class="c1"># Plot</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">ggplot2</span><span class="o">::</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LULC_Mean_Reflectance_Long</span><span class="p">,</span><span class="w"> 
                </span><span class="n">mapping</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Band</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Reflectance</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LULC</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LULC</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">geom_line</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-21-1.png" alt="" /></p>

<p>The spectral profiles show (dis)similarity in the reflectance of
different features on the earth’s surface (or above it). ‘Water’ shows
relatively low reflection in all wavelengths, while all other classes
have relatively high reflectance in the longer wavelengts. Remember
though that our training data only has 1000 points across 6 LULC classes
only have a few observation for 3 of those classes.</p>

<h3 id="classification">Classification</h3>

<p>So now let’s try to predict LULC and produce our raster layer by fitting
a classification model using the “randomForest” package.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">randomForest</span><span class="p">)</span><span class="w">
</span><span class="n">RF_Model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">randomForest</span><span class="o">::</span><span class="n">randomForest</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Training_Data_Reflectance</span><span class="p">[,</span><span class="m">2</span><span class="o">:</span><span class="m">8</span><span class="p">],</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Training_Data_Reflectance</span><span class="p">[,</span><span class="m">1</span><span class="p">])</span><span class="w">
</span><span class="n">RF_Model</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
## Call:
##  randomForest(x = Training_Data_Reflectance[, 2:8], y = Training_Data_Reflectance[,      1]) 
##                Type of random forest: classification
##                      Number of trees: 500
## No. of variables tried at each split: 2
## 
##         OOB estimate of  error rate: 23%
## Confusion matrix:
##           Savanna Grassland Wetland Cropland Urban Water class.error
## Savanna         0         2       2        0     0     0  1.00000000
## Grassland       1       383       7       89     0     1  0.20374220
## Wetland         1        10      12        0     0     4  0.55555556
## Cropland        0       105       1      222     0     0  0.32317073
## Urban           0         2       0        2     0     0  1.00000000
## Water           0         1       2        0     0   153  0.01923077
</code></pre></div></div>

<p>By inspecting the output of the model, we realize it is not doing a
super job. Again remember we only have a few observations in our
training dataset. Classification of the ‘water’ class is pretty good,
thanks to its particular spectral profile. Now that we have a model of
the relationship between land cover and reflectance values, we can
predict land cover over our entire region.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LULC_predicted</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">predict</span><span class="p">(</span><span class="n">object</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Landsat_Band</span><span class="p">,</span><span class="w">
                                  </span><span class="n">model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RF_Model</span><span class="p">,</span><span class="w">
                                  </span><span class="n">progress</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'text'</span><span class="p">,</span><span class="w">
                                  </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'response'</span><span class="p">,</span><span class="w">
                                  </span><span class="n">overwrite</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##   |                                                                              |                                                                      |   0%  |                                                                              |==================                                                    |  25%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================================                  |  75%  |                                                                              |======================================================================| 100%
## 
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">RColorBrewer</span><span class="p">)</span><span class="w">
</span><span class="n">factpal_LULC</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorFactor</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">brewer.pal</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">levels</span><span class="p">(</span><span class="n">Training_Data_DF</span><span class="o">$</span><span class="n">LULC</span><span class="p">)),</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Set1"</span><span class="p">),</span><span class="w">
                            </span><span class="n">domain</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="nf">length</span><span class="p">(</span><span class="n">levels</span><span class="p">(</span><span class="n">Training_Data_DF</span><span class="o">$</span><span class="n">LULC</span><span class="p">))))</span><span class="w"> </span><span class="c1"># define color palette</span><span class="w">

</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="c1"># Plot</span><span class="w">
  </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"Esri.WorldImagery"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addRasterImage</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LULC_predicted</span><span class="p">,</span><span class="w">
                 </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">factpal_LULC</span><span class="p">,</span><span class="w">
                 </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Predicted LULC"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLegend</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Predicted LULC"</span><span class="p">,</span><span class="w">
            </span><span class="n">colors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">brewer.pal</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">levels</span><span class="p">(</span><span class="n">Training_Data_DF</span><span class="o">$</span><span class="n">LULC</span><span class="p">)),</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Set1"</span><span class="p">),</span><span class="w">
            </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Savanna"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Grassland"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Wetland"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Cropland"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Urban"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Water"</span><span class="p">),</span><span class="w">
            </span><span class="n">opacity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">addLayersControl</span><span class="p">(</span><span class="n">overlayGroups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Predicted LULC"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-5/unnamed-chunk-23-1.png" alt="" /></p>

<h2 id="concluding-remarks">Concluding remarks</h2>

<p>Now you have a sense of how remote sensing can be used to produce all
sort of environmental layers. The quality of those will depend on the
spatial and temporal resolutions of the sensors as well as the
techniques used to process the raw data (clouds?) and model it to
produce more useful layers.</p>

<p><img src="../images/week-5/Hagibis.jpg" alt="" /></p>

<h3 id="resources">Resources</h3>

<p>This week borrows heavily from <a href="https://rspatial.org/rs/rs.pdf">this excellent
tutorial</a>.</p>

<h3 id="readings">Readings</h3>

<p>Hay SI. An overview of remote sensing and geodesy for epidemiology and
public health application. Advances in parasitology. 2000 Jan 1;47:1-35.</p>

<p>Simoonga C, Utzinger J, Brooker S, Vounatsou P, Appleton CC, Stensgaard
AS, Olsen A, Kristensen TK. Remote sensing, geographical information
system and spatial analysis for schistosomiasis epidemiology and ecology
in Africa. Parasitology. 2009 Nov;136(13):1683-93.</p>

<p>Savory DJ, Andrade-Pacheco R, Gething PW, Midekisa A, Bennett A,
Sturrock HJ. Intercalibration and Gaussian process modeling of nighttime
lights imagery for measuring urbanization trends in Africa 2000–2013.
Remote Sensing. 2017 Jul;9(7):713.</p>

<p>Yang GJ, Vounatsou P, Xiao-Nong Z, Utzinger J, Tanner M. A review of
geographic information system and remote sensing with applications to
the epidemiology and control of schistosomiasis in China. Acta tropica.
2005 Nov 1;96(2-3):117-29.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Lab 5 - Spatial Regression</title><link href="http://localhost:4000/lab-5/" rel="alternate" type="text/html" title="Lab 5 - Spatial Regression" /><published>2023-03-09T00:00:00-08:00</published><updated>2023-03-09T00:00:00-08:00</updated><id>http://localhost:4000/lab-5</id><content type="html" xml:base="http://localhost:4000/lab-5/"><![CDATA[<script type="text/javascript" id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>

<p>In this session we will introduce some concepts of spatial regression.
We will focus on continuous spatial variation and see how to include it
in a regression model. We will also discuss model selection using cross
validation. The session is divided into the following sections:</p>

<ul>
  <li>Linear Regression Models</li>
  <li>Spatial Covariance</li>
  <li>Geostatistics</li>
  <li>Cross-Validation</li>
  <li>Application Example: Malaria Case</li>
</ul>

<p>Besides the code displayed here, we will use some additional code to
generate some toy datasets that will help illustrate the exposition.
Before starting we will load these code as well as the other required
libraries, including ggplot2 which will be used for creating most of the
images displayed.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Loading required package: spam

## Spam version 2.9-1 (2022-08-07) is loaded.
## Type 'help( Spam)' or 'demo( spam)' for a short introduction 
## and overview of this package.
## Help for individual functions is also obtained by adding the
## suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

## 
## Attaching package: 'spam'

## The following objects are masked from 'package:base':
## 
##     backsolve, forwardsolve

## Loading required package: viridis

## Loading required package: viridisLite

## 
## Try help(fields) to get started.
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">raster</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Loading required package: sp
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">spaMM</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Registered S3 methods overwritten by 'registry':
##   method               from 
##   print.registry_field proxy
##   print.registry_entry proxy

## spaMM (Rousset &amp; Ferdy, 2014, version 4.2.1) is loaded.
## Type 'help(spaMM)' for a short introduction,
## 'news(package='spaMM')' for news,
## and 'citation('spaMM')' for proper citation.
## Further infos, slides, etc. at https://gitlab.mbb.univ-montp2.fr/francois/spamm-ref.

## 
## Attaching package: 'spaMM'

## The following object is masked from 'package:fields':
## 
##     Matern
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week6/Lab_files/R%20Files/background_functions.R"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h2 id="linear-regression-models">Linear Regression Models</h2>

<h3 id="univariate-linear-model">Univariate Linear Model</h3>

<p>As a first step we will do a recap on a <em>linear regression model</em>. In
this problem we have a set of measurements of two variables, say \(X\)
and \(Y\), and we try to explain the values of \(Y\) based on the values
on \(X\). To do this we find the line that is the closest to all the
points \((x, y)\).</p>

<p>The command below generates a toy dataset that we will use as an
example.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Generate example data</span><span class="w">
</span><span class="n">dset1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">univariate_lm</span><span class="p">()</span><span class="w">

</span><span class="c1"># Show data</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">dset1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##             x         y
## 1 -0.38813740 -8.005137
## 2  0.01616137 -7.917746
## 3  0.40175907 -7.892104
## 4  0.54888497 -8.061714
## 5  0.97495187 -7.694279
## 6  1.05565842 -7.741698
</code></pre></div></div>

<p>In <em>R</em> we can fit a linear model and make predictions with the comands
shown next.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Fit linear model on dataset 1</span><span class="w">
</span><span class="n">m1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dset1</span><span class="p">)</span><span class="w">
</span><span class="n">m1_pred</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">predict</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span><span class="w"> </span><span class="n">newdata</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dset1</span><span class="p">,</span><span class="w"> </span><span class="n">interval</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"confidence"</span><span class="p">)</span><span class="w">
</span><span class="n">dset1</span><span class="o">$</span><span class="n">y_hat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">m1_pred</span><span class="p">[,</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">dset1</span><span class="o">$</span><span class="n">y_lwr</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">m1_pred</span><span class="p">[,</span><span class="m">2</span><span class="p">]</span><span class="w">
</span><span class="n">dset1</span><span class="o">$</span><span class="n">y_upr</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">m1_pred</span><span class="p">[,</span><span class="m">3</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/plt_lm-1.png" alt="" /></p>

<h3 id="univariate-glm">Univariate GLM</h3>

<p>While very useful, it is common that the model above turns out to be a
not good assumption. Think of the case where \(Y\) is constrained to be
positive. A straight line, unless it is horizontal, will cross the
\(y\)-axis at some point. If the values of \(X\) where \(Y\) becomes
negative are rare or they are a set of values we are not interested in,
we may simply ignore them, however there are scenarios where we cannot
afford having impossible values for \(Y\).</p>

<p>As an example, we will load a second toy dataset and fit a liner
regression model. Look at the bottom left corner of figure below. The
predictions of \(Y\) are starting to cross the zero value and become
negative, but the observed data remain positive.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Fit linear model on dataset 2</span><span class="w">
</span><span class="n">dset2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">univariate_glm</span><span class="p">()</span><span class="w">
</span><span class="n">m2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dset2</span><span class="p">)</span><span class="w">
</span><span class="n">m2_pred</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">predict</span><span class="p">(</span><span class="n">m2</span><span class="p">,</span><span class="w"> </span><span class="n">newdata</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dset1</span><span class="p">,</span><span class="w"> </span><span class="n">interval</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"confidence"</span><span class="p">)</span><span class="w">
</span><span class="n">dset2</span><span class="o">$</span><span class="n">y_hat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">m2_pred</span><span class="p">[,</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">dset2</span><span class="o">$</span><span class="n">y_lwr</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">m2_pred</span><span class="p">[,</span><span class="m">2</span><span class="p">]</span><span class="w">
</span><span class="n">dset2</span><span class="o">$</span><span class="n">y_upr</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">m2_pred</span><span class="p">[,</span><span class="m">3</span><span class="p">]</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">subset</span><span class="p">(</span><span class="n">dset2</span><span class="p">),</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="s2">"steelblue"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y_hat</span><span class="p">),</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_ribbon</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">ymin</span><span class="o">=</span><span class="n">y_lwr</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="o">=</span><span class="n">y_upr</span><span class="p">),</span><span class="w"> </span><span class="n">fill</span><span class="o">=</span><span class="s2">"magenta"</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="o">=</span><span class="m">.25</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> 
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> </span><span class="n">axis.line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/glm-1.png" alt="" /></p>

<p>A solution to this problem is to use <em>generalized linear models</em> (GLM).
A GLM uses a transformation on \(Y\) where the assumptions of the
standard linear regression are valid (figure below), then it goes back
to the original scale of \(Y\) and makes predictions.
<img src="../images/week-6/plt_logit-1.png" alt="" /></p>

<p>When fitting a GLM to the dataset shown in the second example above, the
resulting predictions draw a curve that never reaches zero.
<img src="../images/week-6/glm_quasibinomial-1.png" alt="" /></p>

<h3 id="glm-with-spatially-structured-data">GLM with Spatially Structured Data</h3>

<p>We will now move to a example of regression on spatial data. Say that we
have a parcel of land where we are interested in quantifying the amount
of organic matter. We take measurments at different locations randomly
chosen, so that the locations can be any set of points in the parcel. We
will also assume that there is a covariate \(X\), say humidity, measured
at the same locations.</p>

<p>The code below generates the data for this example and the figure shows
such data. We are assuming that the organic matter is measuered in a
fictitious scale where the unit is OM.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load toy dataset for example</span><span class="w">
</span><span class="n">spatial_reg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">soil_data</span><span class="p">(</span><span class="n">n_peaks</span><span class="o">=</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="n">n_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">300</span><span class="p">,</span><span class="w"> </span><span class="n">seed</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">spatial_reg</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##         lng       lat   humidity        OM
## 1 357.78218 370.77231  1.6951691 205.56831
## 2 105.93796 268.81118  1.8340258 221.05495
## 3 148.47744  37.84828  0.9823934 167.15905
## 4 228.56849 196.54585  0.8873421 101.62076
## 5 362.37491 184.15918 -0.8146412  73.02679
## 6  80.47109 149.71140 -0.3820763  65.79837
</code></pre></div></div>

<p><img src="../images/week-6/plt_soil_data-1.png" alt="" /></p>

<p>The plot below shows the organic matter vs humidity. Notice that the
values of organic matter are positive and that they become more spread
the larger the values of humidity.
<img src="../images/week-6/plt_soil_cov-1.png" alt="" /></p>

<p>If we transform the organic matter values with the logarithm, we get a
clear linear relation with the values of humidity (see figure below).
This resembles a perfect straight line, because this is a toy example
designed this way. Things are less clear in reality, but the principles
shown here can still be applied to it.
<img src="../images/week-6/plt_logsoil_cova-1.png" alt="" /></p>

<p>In this case we will fit a GLM using the logarithm as link function. The
model is described as</p>

<p>\(log(y_i) = \eta_i = \beta_0 + \beta_1 x_i\),</p>

<p>where \(y_i\) is the amount of organic matter, \(x_i\) is the humidity
level, and \(\beta_0\) and \(\beta_1\) are parameters. To fit this model
we can use the following command.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Fit GLM to toy dataset</span><span class="w">
</span><span class="n">m3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">glm</span><span class="p">(</span><span class="n">OM</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">humidity</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">=</span><span class="n">spatial_reg</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="o">=</span><span class="n">gaussian</span><span class="p">(</span><span class="n">link</span><span class="o">=</span><span class="s2">"log"</span><span class="p">))</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">m3</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
## Call:
## glm(formula = OM ~ humidity, family = gaussian(link = "log"), 
##     data = spatial_reg)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -69.974  -14.630   -4.598   10.982  101.743  
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&gt;|t|)    
## (Intercept)  4.43623    0.02176  203.83   &lt;2e-16 ***
## humidity     0.50586    0.01662   30.44   &lt;2e-16 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for gaussian family taken to be 674.2259)
## 
##     Null deviance: 918485  on 299  degrees of freedom
## Residual deviance: 200919  on 298  degrees of freedom
## AIC: 2809.4
## 
## Number of Fisher Scoring iterations: 4
</code></pre></div></div>

<p>Once we have our GLM fitted, we can analyze the residuals to check if
the assumption of them being independent and identically distributed is
valid. In the figure below it seems that the values of the residuals are
spatially related. <img src="../images/week-6/plt_soil_cova-1.png" alt="" /></p>

<p>We will make a more objective assesment of the residual’s independence
with Moran’s coefficient. The figure displayed below is a spatial
autocorrelogram shows that there is spatial autocorrelation and
therefore that the residuals are not independent.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute correlogram of the residuals</span><span class="w">
</span><span class="n">nbc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="n">cor_r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pgirmess</span><span class="o">::</span><span class="n">correlog</span><span class="p">(</span><span class="n">coords</span><span class="o">=</span><span class="n">spatial_reg</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"lng"</span><span class="p">,</span><span class="w"> </span><span class="s2">"lat"</span><span class="p">)],</span><span class="w">
                            </span><span class="n">z</span><span class="o">=</span><span class="n">spatial_reg</span><span class="o">$</span><span class="n">residuals</span><span class="p">,</span><span class="w">
                            </span><span class="n">method</span><span class="o">=</span><span class="s2">"Moran"</span><span class="p">,</span><span class="w"> </span><span class="n">nbclass</span><span class="o">=</span><span class="n">nbc</span><span class="p">)</span><span class="w">

</span><span class="n">correlograms</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">cor_r</span><span class="p">)</span><span class="w">
</span><span class="n">correlograms</span><span class="o">$</span><span class="n">variable</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"residuals_glm"</span><span class="w"> 

</span><span class="c1"># Plot correlogram</span><span class="w">
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">subset</span><span class="p">(</span><span class="n">correlograms</span><span class="p">,</span><span class="w"> </span><span class="n">variable</span><span class="o">==</span><span class="s2">"residuals_glm"</span><span class="p">),</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">dist.class</span><span class="p">,</span><span class="w"> </span><span class="n">coef</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_hline</span><span class="p">(</span><span class="n">yintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"grey"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="s2">"steelblue"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="s2">"steelblue"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"distance"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Moran's coefficient"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> 
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> </span><span class="n">axis.line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/correlogram_1-1.png" alt="" /></p>

<p>An approach to account for the spatial structure could be to include the
GPS coordinates as covariates in the model. For example</p>

<p>\(\eta_i = \beta_0 + \beta_1 x_i + \beta_2 s_{[i,1]} + \beta_3 s_{[i,2]}\),</p>

<p>where \((s_{[i,1]}, s_{[i,2]})\) are the longitude and latitude
coordinates where each measurment was taken.</p>

<p>Having a trend across the surface may seem like a good idea, but it is
not the best approach; and sometimes it is not even a good approach.
First of all, the assumption of a surface trend may be to rigid. A
polynomial fit, while more flexible, may still be too rigid or overfit
the data. In any case we would need to decide which polynomial to use
among all possibilities. For example</p>

<p>\(\eta_i = \beta_0 + \beta_1 x_i + \beta_2 s_{[i,1]} + \beta_3 s_{[i,2]} + \beta_4 s_{[i,1]} s_{[i,2]}\),</p>

<p>\(\eta_i = \beta_0 + \beta_1 x_i + \beta_2 s_{[i,1]} + \beta_3 s_{[i,2]} + \beta_4 s_{[i,1]} s_{[i,2]} + \beta_5 s_{[i,1]}^2 + \beta_6 s_{[i,2]}^2\),</p>

<p>etc…</p>

<h2 id="spatial-covariance">Spatial Covariance</h2>

<p>The core idea behind Spatial Statistics is to understand an characterize
this spatial dependence that is observed in different processes, for
example: amount of rainfall, global temperature, air pollution, etc.
Spatial Statistics deal with problems were nearby things are expected to
be more alike.</p>

<p>When want to measure how much two variables change together, we use the
covariance function. Under the right assumptions, we can also use the
covariance function to describe the similarity of the observed values
based on their location.</p>

<p>A covariance function
\(K : \mathbb{S} \ \times\ \mathbb{S}\ \rightarrow \ \mathbb{R}\) maps a
pair of points \(z_1=(s_{[1,1]},s_{[1,2]})\) and
\(z_2 = (s_{[2,1]},s_{[2,2]})\) to the real line. We can define such a
function in terms of the distance between a pair of points. Let the
distance between the points be given by \(r = ||z_1 -z_2||\), the
following are examples of covariance functions:</p>

<p>Exponentiated Quadratic:
\(K(z_1, z_2) = \sigma^2\text{exp}(r^2/\rho^2)\)</p>

<p>Rational Quadratic:
\(K(z_1, z_2) = \sigma^2(1+r^2/2\alpha\rho^2))^{-\alpha}\)</p>

<p>Matern Covariance:
\(K(z_1, z_2) = \sigma^22^{1-\nu}/\Gamma(\nu)((2\nu)^{0.5}r/\rho)^{\nu}\mathcal{K}_{\nu}((2\nu)^{0.5}r/\rho)\)</p>

<p>The quantities \(\rho, \alpha, \nu\) are parameters of the functions
mentioned and \(\mathcal{K}_{\nu}\) is the modified Bessel function of
second kind. In the three cases, while less clear in the Matern case,
the covariance decreases asymptotically towards zero the larger the
value of \(r\). This is the more distance between a pair of points, the
weaker the covariance between them.</p>

<p>The election of which covariance function to use depends on our
assumptions about the change in the association between the points
across space (eg., the speed of decay).</p>

<h2 id="geostatistics">Geostatistics</h2>

<p>Now that we have discussed how the covariance function can help model
spatial dependence, we can discuss how to incorporate this ideas into
our model. In our GLM example above we fitted a model of the form</p>

<p>\(\eta_i = \beta_0 + \beta_1 x_i\),</p>

<p>Now we will incorporate an spatial component as</p>

<p>\(\eta_i = \beta_0 + \beta_1 x_i + f(z_i)\), where
(\(f(z_1), \ldots , f(z_2)\)) is a multivariate Gaussian with spatial
covariance \(K\).</p>

<p>We can implement this model, assuming a Matern covariance, as shown
below.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Fit GAM with spatial smooth</span><span class="w">
</span><span class="n">m4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">spaMM</span><span class="o">::</span><span class="n">fitme</span><span class="p">(</span><span class="n">OM</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">humidity</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Matern</span><span class="p">(</span><span class="m">1</span><span class="o">|</span><span class="n">lng</span><span class="o">+</span><span class="n">lat</span><span class="p">),</span><span class="w"> </span><span class="n">data</span><span class="o">=</span><span class="n">spatial_reg</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="o">=</span><span class="n">gaussian</span><span class="p">(</span><span class="n">link</span><span class="o">=</span><span class="s2">"log"</span><span class="p">),</span><span class="w"> </span><span class="n">init</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="n">lambda</span><span class="o">=</span><span class="m">.5</span><span class="p">,</span><span class="w"> </span><span class="n">phi</span><span class="o">=</span><span class="m">.5</span><span class="p">))</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">m4</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## formula: OM ~ humidity + Matern(1 | lng + lat)
## Estimation of corrPars, lambda and phi by ML (P_v approximation of logL).
## Estimation of fixed effects by ML (P_v approximation of logL).
## Estimation of lambda and phi by 'outer' ML, maximizing logL.
## family: gaussian( link = log ) 
##  ------------ Fixed effects (beta) ------------
##             Estimate Cond. SE t-value
## (Intercept)   4.3186 0.092633   46.62
## humidity      0.5049 0.008014   63.00
##  --------------- Random effects ---------------
## Family: gaussian( link = identity ) 
##                    --- Correlation parameters:
##        1.nu       1.rho 
## 0.232195064 0.004375886 
##            --- Variance parameters ('lambda'):
## lambda = var(u) for u ~ Gaussian; 
##    lng + lat  :  0.0419  
## # of obs: 300; # of groups: lng + lat, 300 
##  -------------- Residual variance  ------------
## phi estimate was 5.30346e-06 
##  ------------- Likelihood values  -------------
##                        logLik
## logL      (P_v(h)): -1195.921
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">nu</code> (\(\nu\)) represents the ‘smoothness’ parameter and <code class="language-plaintext highlighter-rouge">rho</code>
(\(\rho\)) the scale parameter. <code class="language-plaintext highlighter-rouge">lambda</code> is the estimated variance in
the random effect and <code class="language-plaintext highlighter-rouge">phi</code> the estimated variance in the residual
error.</p>

<p>In the next figure, we will show the spatial effect by predicting the
values of organic matter across space with a fixed level of humidity.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Make predictions on a spatial grid</span><span class="w">
</span><span class="n">surf_grid</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">make_grid</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">20</span><span class="p">))</span><span class="w">
</span><span class="n">surf_grid</span><span class="o">$</span><span class="n">humidity</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">spatial_reg</span><span class="o">$</span><span class="n">humidity</span><span class="p">)</span><span class="w"> </span><span class="c1"># Assume covariate is constant across all space (for visualization only)</span><span class="w">
</span><span class="n">surf_grid</span><span class="o">$</span><span class="n">spatial_effect</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">predict</span><span class="p">(</span><span class="n">m4</span><span class="p">,</span><span class="w"> </span><span class="n">newdata</span><span class="o">=</span><span class="n">surf_grid</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="o">=</span><span class="s2">"response"</span><span class="p">)[,</span><span class="w"> </span><span class="m">1</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/plt_smooth-1.png" alt="" /></p>

<p>Next, we will compare the autocorrelation observed in the residuals of
this geostatistic model and the autocorrelation of the residuals of the
GLM. As we saw above, the residuals of the GLM were spatially
correlated. That is not the case for the geostatistic model.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute correlogram of the residuals</span><span class="w">
</span><span class="n">cor_g</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pgirmess</span><span class="o">::</span><span class="n">correlog</span><span class="p">(</span><span class="n">coords</span><span class="o">=</span><span class="n">spatial_reg</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"lng"</span><span class="p">,</span><span class="w"> </span><span class="s2">"lat"</span><span class="p">)],</span><span class="w">
                            </span><span class="n">z</span><span class="o">=</span><span class="n">residuals</span><span class="p">(</span><span class="n">m4</span><span class="p">),</span><span class="w">
                            </span><span class="n">method</span><span class="o">=</span><span class="s2">"Moran"</span><span class="p">,</span><span class="w"> </span><span class="n">nbclass</span><span class="o">=</span><span class="n">nbc</span><span class="p">)</span><span class="w">

</span><span class="n">cor_g</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">cor_g</span><span class="p">)</span><span class="w">
</span><span class="n">cor_g</span><span class="o">$</span><span class="n">variable</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"residuals_geostatistic"</span><span class="w">
</span><span class="n">correlograms</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">correlograms</span><span class="p">,</span><span class="w"> </span><span class="n">cor_g</span><span class="p">)</span><span class="w">

</span><span class="c1"># Plot both correlograms</span><span class="w">
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">correlograms</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">dist.class</span><span class="p">,</span><span class="w"> </span><span class="n">coef</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_hline</span><span class="p">(</span><span class="n">yintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"grey"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="n">variable</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="n">variable</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"distance"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Moran's coefficient"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> 
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> </span><span class="n">axis.line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/correlogram_2-1.png" alt="" /></p>

<h2 id="cross-validation">Cross-Validation</h2>

<p>Cross-validation can be used for for model selection. Once we have
different models with their parameters calibrated, we can use
cross-valiation to select the one that has a better performance in the
data of interest.</p>

<p>The proceedure for doing \(k\)-fold cross-validation is as follows.
Instead of fitting the model to the observed data, we first split the
data into \(k\) subsets. Then we train the model \(k\) times, each one
using only 4 of the groups, and computing some performance metric on the
left out group. The performance metric could be the sum of squared
errors or any other sensible metric depending on the application. Below
we show a diagram of a 5-fold cross validation.
<img src="../images/week-6/k_fold_cv-1.png" alt="" /></p>

<h3 id="glm-surface-trend-vs-geostatistic-model">GLM Surface Trend vs Geostatistic Model</h3>

<p>Before introducing the geostatistic models we discussed fitting a GLM
using the location of the measurments as covariates. Here we will
compare the performance of a GLM with a surface trend with a
Geostatistic model using cross-validation.</p>

<p>The code below will split the data using only 3 folds.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Copy spatial_reg without residuals</span><span class="w">
</span><span class="n">all_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">spatial_reg</span><span class="p">[,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"lng"</span><span class="p">,</span><span class="w"> </span><span class="s2">"lat"</span><span class="p">,</span><span class="w"> </span><span class="s2">"humidity"</span><span class="p">,</span><span class="w"> </span><span class="s2">"OM"</span><span class="p">)]</span><span class="w">

</span><span class="c1"># Make an index with the 2 folds</span><span class="w">
</span><span class="n">ix</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">caret</span><span class="o">::</span><span class="n">createFolds</span><span class="p">(</span><span class="n">all_data</span><span class="o">$</span><span class="n">OM</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Now we will do 3-fold cross-validation using this the mean squared error
as performance metric.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mse_glm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">()</span><span class="w">
</span><span class="n">mse_geo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">()</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">test_set</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">all_data</span><span class="p">[</span><span class="n">ix</span><span class="p">[[</span><span class="n">i</span><span class="p">]],</span><span class="w"> </span><span class="p">]</span><span class="w"> 
  </span><span class="n">train_set</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">all_data</span><span class="p">[(</span><span class="m">1</span><span class="o">:</span><span class="m">300</span><span class="p">)[</span><span class="o">-</span><span class="nf">c</span><span class="p">(</span><span class="n">ix</span><span class="p">[[</span><span class="n">i</span><span class="p">]])],</span><span class="w"> </span><span class="p">]</span><span class="w">
  </span><span class="n">m_glm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">glm</span><span class="p">(</span><span class="n">OM</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">humidity</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">lng</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">lng</span><span class="o">*</span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">=</span><span class="n">train_set</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="o">=</span><span class="n">gaussian</span><span class="p">(</span><span class="n">link</span><span class="o">=</span><span class="s2">"log"</span><span class="p">))</span><span class="w">
  </span><span class="n">m_geo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">spaMM</span><span class="o">::</span><span class="n">fitme</span><span class="p">(</span><span class="n">OM</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">humidity</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Matern</span><span class="p">(</span><span class="m">1</span><span class="o">|</span><span class="n">lng</span><span class="o">+</span><span class="n">lat</span><span class="p">),</span><span class="w"> </span><span class="n">data</span><span class="o">=</span><span class="n">train_set</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="o">=</span><span class="n">gaussian</span><span class="p">(</span><span class="n">link</span><span class="o">=</span><span class="s2">"log"</span><span class="p">),</span><span class="w"> </span><span class="n">init</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="n">lambda</span><span class="o">=</span><span class="m">.5</span><span class="p">,</span><span class="w"> </span><span class="n">phi</span><span class="o">=</span><span class="m">.5</span><span class="p">))</span><span class="w">

  </span><span class="n">mse_glm</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">((</span><span class="n">predict</span><span class="p">(</span><span class="n">m_glm</span><span class="p">,</span><span class="w"> </span><span class="n">newdata</span><span class="o">=</span><span class="n">test_set</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="o">=</span><span class="s2">"response"</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">test_set</span><span class="o">$</span><span class="n">OM</span><span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
  </span><span class="n">mse_geo</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">((</span><span class="n">predict</span><span class="p">(</span><span class="n">m_geo</span><span class="p">,</span><span class="w"> </span><span class="n">newdata</span><span class="o">=</span><span class="n">test_set</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="o">=</span><span class="s2">"response"</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">test_set</span><span class="o">$</span><span class="n">OM</span><span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">mse_glm</span><span class="p">)</span><span class="w"> </span><span class="c1"># MSE for GLM in each round</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 690.3978 684.8136 689.3160
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print</span><span class="p">(</span><span class="n">mse_geo</span><span class="p">)</span><span class="w"> </span><span class="c1"># MSE for geostatistic model in each round</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 228.3738 208.5948 229.3693
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">mse_glm</span><span class="p">))</span><span class="w"> </span><span class="c1"># Average MSE with GLM</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 688.1758
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">mse_geo</span><span class="p">))</span><span class="w"> </span><span class="c1"># Average MSE with geostatistic model</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 222.1127
</code></pre></div></div>

<p>Clearly the geostatisc model showed a better performance than a 1st
order surface trend.</p>

<h2 id="application-example-malaria-case">Application Example: Malaria Case</h2>

<p>Now we will estimate the prevalence of malaria in Oromoia State,
Ethiopia, using data from 2009. We have used this dataset in previous
sessions. This survey data contains information about number of positive
cases and number of examined people in different schools. Spatial
information is encoded in the fields <em>longitude</em> and <em>latitude</em>. To
represent this data we can use a Binomial likelihood, that models number
of successes out of a number of trials.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load data</span><span class="w">
</span><span class="n">ETH_malaria_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/mal_data_eth_2009_no_dups.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w"> </span><span class="c1"># Case data</span><span class="w">
</span><span class="n">ETH_Adm_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">getData</span><span class="p">(</span><span class="s2">"GADM"</span><span class="p">,</span><span class="w"> </span><span class="n">country</span><span class="o">=</span><span class="s2">"ETH"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="c1"># Admin boundaries</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in raster::getData("GADM", country = "ETH", level = 1): getData will be removed in a future version of raster
## . Please use the geodata package instead
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Oromia</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">subset</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">,</span><span class="w"> </span><span class="n">NAME_1</span><span class="o">==</span><span class="s2">"Oromia"</span><span class="p">)</span><span class="w">
</span><span class="c1"># Plot both country and data points</span><span class="w">
</span><span class="n">raster</span><span class="o">::</span><span class="n">plot</span><span class="p">(</span><span class="n">Oromia</span><span class="p">)</span><span class="w">
</span><span class="n">points</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">latitude</span><span class="p">,</span><span class="w">
       </span><span class="n">pch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Latitude"</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"Longitude"</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">,</span><span class="w"> </span><span class="n">cex</span><span class="o">=</span><span class="m">.5</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/ETH_malaria_data_data-1.png" alt="" /></p>

<p>To model and predict malaria prevalence across Oromia State, we need to
first obtain predictors as rasters at a common resolution/extent. In
this example, we are going to use two of the
<a href="https://www.worldclim.org/bioclim">Bioclim</a> layers, accessible using
the <code class="language-plaintext highlighter-rouge">getData</code> function in the raster package.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bioclim_layers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">getData</span><span class="p">(</span><span class="s1">'worldclim'</span><span class="p">,</span><span class="w"> </span><span class="n">var</span><span class="o">=</span><span class="s1">'bio'</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="n">lon</span><span class="o">=</span><span class="m">38.7578</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="o">=</span><span class="m">8.9806</span><span class="p">)</span><span class="w"> </span><span class="c1"># lng/lat for Addis Ababa</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in getData("worldclim", var = "bio", res = 0.5, lon = 38.7578, lat = 8.9806): getData will be removed in a future version of raster
## . Please use the geodata package instead
</code></pre></div></div>

<p>We can crop these layers to make them a little easier to handle</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bioclim_layers_oromia</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">crop</span><span class="p">(</span><span class="n">bioclim_layers</span><span class="p">,</span><span class="w"> </span><span class="n">Oromia</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">bioclim_layers_oromia</span><span class="p">[[</span><span class="m">1</span><span class="p">]])</span><span class="w"> </span><span class="c1"># Bio1 - Annual mean temperature</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">Oromia</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/unnamed-chunk-2-1.png" alt="" /></p>

<p>Now let’s extract Bio1 (Annual mean temperature) and Bio12 (Annual
precipitation) at the observation points</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">bioclim1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">extract</span><span class="p">(</span><span class="n">bioclim_layers_oromia</span><span class="p">[[</span><span class="m">1</span><span class="p">]],</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">)])</span><span class="w">
</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">bioclim12</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">extract</span><span class="p">(</span><span class="n">bioclim_layers_oromia</span><span class="p">[[</span><span class="m">12</span><span class="p">]],</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">)])</span><span class="w">
</span></code></pre></div></div>

<p>Now we fit the model without a spatial effect</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prev_eth_non_spatial</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">spaMM</span><span class="o">::</span><span class="n">fitme</span><span class="p">(</span><span class="n">cbind</span><span class="p">(</span><span class="n">pf_pos</span><span class="p">,</span><span class="w"> </span><span class="n">examined</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">pf_pos</span><span class="p">)</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">bioclim1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">bioclim12</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">=</span><span class="n">ETH_malaria_data</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="o">=</span><span class="n">binomial</span><span class="p">())</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">prev_eth_non_spatial</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## formula: cbind(pf_pos, examined - pf_pos) ~ bioclim1 + bioclim12
## Estimation of fixed effects by ML.
## family: binomial( link = logit ) 
##  ------------ Fixed effects (beta) ------------
##               Estimate  Cond. SE t-value
## (Intercept) -8.3846190 1.6273198  -5.152
## bioclim1     0.0113079 0.0071619   1.579
## bioclim12    0.0003218 0.0002892   1.113
##  ------------- Likelihood values  -------------
##                        logLik
## logL               : -225.369
</code></pre></div></div>

<p>And take a look at spatial autocorrelation in the residuals</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute correlogram of the residuals</span><span class="w">
</span><span class="n">nbc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="n">cor_r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pgirmess</span><span class="o">::</span><span class="n">correlog</span><span class="p">(</span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">)],</span><span class="w">
                            </span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">residuals</span><span class="p">(</span><span class="n">prev_eth_non_spatial</span><span class="p">),</span><span class="w">
                            </span><span class="n">method</span><span class="o">=</span><span class="s2">"Moran"</span><span class="p">,</span><span class="w"> </span><span class="n">nbclass</span><span class="o">=</span><span class="n">nbc</span><span class="p">)</span><span class="w">
</span><span class="c1"># Take a look</span><span class="w">
</span><span class="n">cor_r</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Moran I statistic 
##       dist.class         coef      p.value    n
##  [1,]  0.3979675  0.212998345 5.839497e-18 3904
##  [2,]  1.1937029  0.028869826 3.706873e-02 5192
##  [3,]  1.9894379 -0.080946573 9.999812e-01 5680
##  [4,]  2.7851728  0.005202035 3.088693e-01 4976
##  [5,]  3.5809077 -0.082287239 9.999446e-01 5078
##  [6,]  4.3766427 -0.073913147 9.999694e-01 5896
##  [7,]  5.1723776 -0.028848437 8.762919e-01 4890
##  [8,]  5.9681126  0.010132650 2.753585e-01 3694
##  [9,]  6.7638475 -0.004350064 4.290928e-01 1412
## [10,]  7.5595825 -0.015829056 4.321541e-01  284
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot correlogram</span><span class="w">
</span><span class="n">correlograms</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">cor_r</span><span class="p">)</span><span class="w">
</span><span class="n">correlograms</span><span class="o">$</span><span class="n">variable</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"residuals_glm"</span><span class="w"> 

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">subset</span><span class="p">(</span><span class="n">correlograms</span><span class="p">,</span><span class="w"> </span><span class="n">variable</span><span class="o">==</span><span class="s2">"residuals_glm"</span><span class="p">),</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">dist.class</span><span class="p">,</span><span class="w"> </span><span class="n">coef</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_hline</span><span class="p">(</span><span class="n">yintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"grey"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="s2">"steelblue"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">col</span><span class="o">=</span><span class="s2">"steelblue"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"distance"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Moran's coefficient"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> 
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> </span><span class="n">axis.line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/unnamed-chunk-5-1.png" alt="" /></p>

<p>There does appear to be residual spatial autocorrelation, so let’s fit a
spatial model.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prev_eth</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">spaMM</span><span class="o">::</span><span class="n">fitme</span><span class="p">(</span><span class="n">cbind</span><span class="p">(</span><span class="n">pf_pos</span><span class="p">,</span><span class="w"> </span><span class="n">examined</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">pf_pos</span><span class="p">)</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">bioclim1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">bioclim12</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Matern</span><span class="p">(</span><span class="m">1</span><span class="o">|</span><span class="n">latitude</span><span class="o">+</span><span class="n">longitude</span><span class="p">),</span><span class="w"> </span><span class="n">data</span><span class="o">=</span><span class="n">ETH_malaria_data</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="o">=</span><span class="n">binomial</span><span class="p">())</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">prev_eth</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## formula: cbind(pf_pos, examined - pf_pos) ~ bioclim1 + bioclim12 + Matern(1 | 
##     latitude + longitude)
## Estimation of corrPars and lambda by ML (p_v approximation of logL).
## Estimation of fixed effects by ML (p_v approximation of logL).
## Estimation of lambda by 'outer' ML, maximizing logL.
## family: binomial( link = logit ) 
##  ------------ Fixed effects (beta) ------------
##               Estimate Cond. SE t-value
## (Intercept) -14.045555 6.035854 -2.3270
## bioclim1      0.029817 0.024988  1.1932
## bioclim12    -0.000203 0.001364 -0.1489
##  --------------- Random effects ---------------
## Family: gaussian( link = identity ) 
##                    --- Correlation parameters:
##     1.nu    1.rho 
## 0.439513 1.659388 
##            --- Variance parameters ('lambda'):
## lambda = var(u) for u ~ Gaussian; 
##    latitude .  :  4.695  
## # of obs: 203; # of groups: latitude ., 203 
##  ------------- Likelihood values  -------------
##                         logLik
## logL       (p_v(h)): -106.4314
</code></pre></div></div>

<p>We can generate a quick scatter plot of observed vs fitted values</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr</span><span class="p">,</span><span class="w"> </span><span class="n">predict</span><span class="p">(</span><span class="n">prev_eth</span><span class="p">))</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/unnamed-chunk-6-1.png" alt="" /></p>

<p>We have two bioclimatic variables. Are we sure we need these in the
model? If not, how to decide which one(s) we should remove?</p>

<p>In this case, we are particularly interested in prediction,
i.e. predicting prevalence values at un-surveyed locations. So, we will
do 5-fold cross-validation using the mean squared error as performance
metric. The function below will compute the mean square error across all
folds. This function takes as input a dataset, an R formula object (that
tells which covariates are used in the model) and a list of indices that
describes the data splitting k folds.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Function to compute a cross-validated MSE score</span><span class="w">
</span><span class="n">cv_eth</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">spamm_formula</span><span class="p">,</span><span class="w"> </span><span class="n">ix_test_list</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">mse</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">()</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="nf">length</span><span class="p">(</span><span class="n">ix_test_list</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">test_set</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data</span><span class="p">[</span><span class="n">ix_test_list</span><span class="p">[[</span><span class="n">i</span><span class="p">]],</span><span class="w"> </span><span class="p">]</span><span class="w"> 
    </span><span class="n">train_set</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data</span><span class="p">[(</span><span class="m">1</span><span class="o">:</span><span class="m">300</span><span class="p">)[</span><span class="o">-</span><span class="nf">c</span><span class="p">(</span><span class="n">ix_test_list</span><span class="p">[[</span><span class="n">i</span><span class="p">]])],</span><span class="w"> </span><span class="p">]</span><span class="w">
    </span><span class="n">model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">spaMM</span><span class="o">::</span><span class="n">fitme</span><span class="p">(</span><span class="n">spamm_formula</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">=</span><span class="n">train_set</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="o">=</span><span class="n">binomial</span><span class="p">())</span><span class="w">
    </span><span class="n">model_prediction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">predict</span><span class="p">(</span><span class="n">model</span><span class="p">,</span><span class="w"> </span><span class="n">newdata</span><span class="o">=</span><span class="n">test_set</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="o">=</span><span class="s2">"response"</span><span class="p">)[,</span><span class="m">1</span><span class="p">]</span><span class="w">
    </span><span class="n">mse</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">((</span><span class="n">model_prediction</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">test_set</span><span class="o">$</span><span class="n">examined</span><span class="w">  </span><span class="o">-</span><span class="w"> </span><span class="n">test_set</span><span class="o">$</span><span class="n">pf_pos</span><span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">mse</span><span class="p">))</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>As we saw above, to split the data into folds we call the command</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define 5 folds</span><span class="w">
</span><span class="n">ix</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">caret</span><span class="o">::</span><span class="n">createFolds</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pos</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The procedure we will follow to choose the variables to include in the
model is know as Backward Selection. We start with a model that contains
all variables and compute the CV-MSE. We then remove one variable at a
time, refit the model and compute the CV-MSE. If the best of these new
models (with one less variable) outperforms the model with all
variables, then select this new model as the optimal. Hence we will have
decided which variable to remove. Afterwards we repeat the same
proceedure removing a new variable from the ones that are still included
in the new model. The code to carry on the Backward Selection method is
below.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">layer_names</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"bioclim1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bioclim12"</span><span class="p">)</span><span class="w">
</span><span class="n">formula_kern</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"cbind(pf_pos, examined - pf_pos) ~ Matern(1|latitude+longitude)"</span><span class="w">
</span><span class="n">formula_model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">formula_kern</span><span class="p">,</span><span class="w"> </span><span class="n">layer_names</span><span class="p">),</span><span class="w"> </span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">" + "</span><span class="p">)</span><span class="w">
</span><span class="n">scores</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">cv_eth</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="p">,</span><span class="w"> </span><span class="n">as.formula</span><span class="p">(</span><span class="n">formula_model</span><span class="p">),</span><span class="w"> </span><span class="n">ix</span><span class="p">))</span><span class="w">
</span><span class="c1"># Simpler model</span><span class="w">
</span><span class="n">num_covariates</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">layer_names</span><span class="p">)</span><span class="w">
</span><span class="n">max_covariates</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">num_covariates</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="n">indices</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">num_covariates</span><span class="w">

</span><span class="n">board</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">MSE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tail</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="o">=</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">Covariates</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="n">indices</span><span class="p">,</span><span class="w"> </span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">","</span><span class="p">))</span><span class="w">
</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">num_covariates</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">max_covariates</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">scores_iter</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">()</span><span class="w">
  </span><span class="n">ix_subsets</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gtools</span><span class="o">::</span><span class="n">combinations</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">num_covariates</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="o">=</span><span class="n">num_covariates</span><span class="m">-1</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="o">=</span><span class="n">indices</span><span class="p">)</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">nrow</span><span class="p">(</span><span class="n">ix_subsets</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">cov_subset</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">layer_names</span><span class="p">[</span><span class="n">ix_subsets</span><span class="p">[</span><span class="n">i</span><span class="p">,]]</span><span class="w">
    </span><span class="n">formula_model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">formula_kern</span><span class="p">,</span><span class="w"> </span><span class="n">cov_subset</span><span class="p">),</span><span class="w"> </span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">" + "</span><span class="p">)</span><span class="w">
    </span><span class="n">scores_iter</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">scores_iter</span><span class="p">,</span><span class="w"> </span><span class="n">cv_eth</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="p">,</span><span class="w"> </span><span class="n">as.formula</span><span class="p">(</span><span class="n">formula_model</span><span class="p">),</span><span class="w"> </span><span class="n">ix</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">best</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">which.min</span><span class="p">(</span><span class="n">scores_iter</span><span class="p">)</span><span class="w">
  </span><span class="n">indices</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ix_subsets</span><span class="p">[</span><span class="n">best</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
  </span><span class="n">scores</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span><span class="w"> </span><span class="n">scores_iter</span><span class="p">[</span><span class="n">best</span><span class="p">])</span><span class="w">
  </span><span class="n">num_covariates</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">diff</span><span class="p">(</span><span class="n">tail</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="o">=</span><span class="m">2</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">max_covariates</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">max_covariates</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">max_covariates</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">board</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="w">
                 </span><span class="n">data.frame</span><span class="p">(</span><span class="n">MSE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tail</span><span class="p">(</span><span class="n">scores</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="o">=</span><span class="m">1</span><span class="p">),</span><span class="w">
                            </span><span class="n">Covariates</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="n">indices</span><span class="p">,</span><span class="w"> </span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">","</span><span class="p">)))</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Here is a summary of the results. The covariates are indexed as: 1 -
bioclim1, 2 - bioclim12.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print</span><span class="p">(</span><span class="n">board</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##        MSE Covariates
## 1 1.462020        1,2
## 2 1.467664          1
</code></pre></div></div>

<p>According to this results the best model according to the lowest MSE is
achieved when using both bioclim1 and bioclim12.</p>

<h3 id="prediction">Prediction</h3>

<p>Now we have a model that relates our climatic layers to prevalence, we
can predict the probability/prevalence of infection at any location
within the region our data are representative where we have values of
these climatic layers. It is possible to predict from a model directly
onto a raster stack of covariates which makes life easy. However, in
this case, we are using a geostatistical model, which includes latitude
and longitude, and therefore we need to generate rasters of these to add
to the stack of bioclim1 and bioclim12.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create an empty raster with the same extent and resolution as the bioclimatic layers</span><span class="w">
</span><span class="n">latitude_raster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">longitude_raster</span><span class="w"> </span><span class="o">&lt;-</span><span class="n">raster</span><span class="p">(</span><span class="n">nrows</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">bioclim_layers_oromia</span><span class="p">[[</span><span class="m">1</span><span class="p">]]),</span><span class="w">
                                       </span><span class="n">ncols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ncol</span><span class="p">(</span><span class="n">bioclim_layers_oromia</span><span class="p">[[</span><span class="m">1</span><span class="p">]]),</span><span class="w">
                                                    </span><span class="n">ext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">extent</span><span class="p">(</span><span class="n">bioclim_layers_oromia</span><span class="p">[[</span><span class="m">1</span><span class="p">]]))</span><span class="w">

</span><span class="c1"># Change the values to be latitude and longitude respectively</span><span class="w">
</span><span class="n">longitude_raster</span><span class="p">[]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">coordinates</span><span class="p">(</span><span class="n">longitude_raster</span><span class="p">)[,</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">latitude_raster</span><span class="p">[]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">coordinates</span><span class="p">(</span><span class="n">latitude_raster</span><span class="p">)[,</span><span class="m">2</span><span class="p">]</span><span class="w">

</span><span class="c1"># Now create a final prediction stack of the 4 variables we need</span><span class="w">
</span><span class="n">pred_stack</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">stack</span><span class="p">(</span><span class="n">bioclim_layers_oromia</span><span class="p">[[</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">12</span><span class="p">)]],</span><span class="w">
                    </span><span class="n">longitude_raster</span><span class="p">,</span><span class="w">
                    </span><span class="n">latitude_raster</span><span class="p">)</span><span class="w">

</span><span class="c1"># Rename to ensure the names of the raster layers in the stack match those used in the model</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">pred_stack</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"bioclim1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bioclim12"</span><span class="p">,</span><span class="w"> </span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">pred_stack</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/unnamed-chunk-7-1.png" alt="" /></p>

<p>Now we have a stack of rasters of the 4 variables used in the model at
the same resolution and extent, we can run the <code class="language-plaintext highlighter-rouge">predict</code> function on the
stack to produce a raster of preditions.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predicted_prevalence_raster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">predict</span><span class="p">(</span><span class="n">pred_stack</span><span class="p">,</span><span class="w"> </span><span class="n">prev_eth</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">predicted_prevalence_raster</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">Oromia</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/unnamed-chunk-8-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># If you want to clip the predictions to Oromia</span><span class="w">
</span><span class="n">predicted_prevalence_raster_oromia</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mask</span><span class="p">(</span><span class="n">predicted_prevalence_raster</span><span class="p">,</span><span class="w"> </span><span class="n">Oromia</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">predicted_prevalence_raster_oromia</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-6/unnamed-chunk-8-2.png" alt="" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>In this session we learned the basic concepts of spatial regression. We
saw how the spatial covariance is an essential component of a spatial
model. By encoding the spatial association into a kernel function, a
geostatistic model outperforms linear models even when they include a
polynomial representation of the observations coordinates. When properly
accounting for the spatial structure of the data, the residuals of the
model are independent.</p>

<p>We also reviewed the concept of cross-validation as a means to select
model. In particular we saw how it can help determine which covariates
to include in the model.</p>

<h2 id="references">References</h2>

<h3 id="overview-of-glms">Overview of GLMs</h3>

<p>Fox (2015) Applied Regression Analysis and Generalized Linear. <a href="https://www.sagepub.com/sites/default/files/upm-binaries/21121_Chapter_15.pdf">Chapter
15</a></p>

<p><a href="https://rss.onlinelibrary.wiley.com/doi/pdf/10.1111/1467-9876.00113">Diggle PJ, Tawn JA, Moyeed RA. Model‐based geostatistics. Journal of
the Royal Statistical Society: Series C (Applied Statistics). 1998
Mar;47(3):299-350</a></p>

<p><a href="https://journals.plos.org/plosntds/article?id=10.1371/journal.pntd.0000958">Pullan RL, Gething PW, Smith JL, Mwandawiro CS, Sturrock HJ, Gitonga
CW, Hay SI, Brooker S. Spatial modelling of soil-transmitted helminth
infections in Kenya: a disease control planning tool. PLoS neglected
tropical diseases. 2011 Feb
8;5(2):e958.</a></p>

<p><a href="https://www.sciencedirect.com/science/article/pii/S0140673619302260">Mosser JF, Gagne-Maynard W, Rao PC, Osgood-Zimmerman A, Fullman N,
Graetz N, Burstein R, Updike RL, Liu PY, Ray SE, Earl L. Mapping
diphtheria-pertussis-tetanus vaccine coverage in Africa, 2000–2016: a
spatial and temporal modelling study. The Lancet. 2019 May
4;393(10183):1843-55.</a></p>

<p><a href="https://journals.plos.org/plosntds/article?id=10.1371/journal.pntd.0001194">Schur N, Hürlimann E, Garba A, Traoré MS, Ndir O, Ratard RC, Tchuenté
LA, Kristensen TK, Utzinger J, Vounatsou P. Geostatistical model-based
estimates of schistosomiasis prevalence among individuals aged≤ 20 years
in West Africa. PLoS neglected tropical diseases. 2011 Jun
14;5(6):e1194.</a></p>

<h3 id="some-more-recent-advances-in-combining-machine-learning-techniques-to-model-the-covariate-effects-with-geostatistics">Some more recent advances in combining machine learning techniques to model the covariate effects with geostatistics</h3>

<p><a href="https://royalsocietypublishing.org/doi/full/10.1098/rsif.2017.0520">Bhatt S, Cameron E, Flaxman SR, Weiss DJ, Smith DL, Gething PW.
Improved prediction accuracy for disease risk mapping using Gaussian
process stacked generalization. Journal of The Royal Society Interface.
2017 Sep
20;14(134):20170520.</a></p>

<p><a href="https://www.nature.com/articles/s41591-019-0525-0">Bhattacharjee NV, Schaeffer LE, Marczak LB, Ross JM, Swartz SJ,
Albright J, Gardner WM, Shields C, Sligar A, Schipp MF, Pickering BV.
Mapping exclusive breastfeeding in Africa between 2000 and 2017. Nature
medicine. 2019
Aug;25(8):1205-12.</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Lab 6 - Spatial regression of areal data</title><link href="http://localhost:4000/lab-6/" rel="alternate" type="text/html" title="Lab 6 - Spatial regression of areal data" /><published>2023-03-09T00:00:00-08:00</published><updated>2023-03-09T00:00:00-08:00</updated><id>http://localhost:4000/lab-6</id><content type="html" xml:base="http://localhost:4000/lab-6/"><![CDATA[<p>You now have the skills to:</p>

<ul>
  <li>
    <p>map spatial data</p>
  </li>
  <li>
    <p>obtain, generate and manipulate raster data</p>
  </li>
  <li>
    <p>conduct spatial interpolation</p>
  </li>
  <li>
    <p>identify clustering</p>
  </li>
  <li>
    <p>fit spatial regression models to point prevalence data</p>
  </li>
</ul>

<p>This week are going to introduce 2 more topics.</p>

<p>1)  Modeling count data</p>

<p>2)  Fitting spatial models to areal (i.e. polygon) data</p>

<h2 id="modeling-count-data">Modeling count data</h2>

<p>The malaria data in Oromia is an example of binomial data. You are also
likely to explore count data (e.g. numbers of disease cases). We can use
a similar process to model these data. Let’s look at an example of
counts recorded over areal units (i.e. polygons). These data contain
information on leukemia cases from New York (Turnbull et al 1990). We’ll
load in the shape files for New York census tracts and the locations of
hazardous waste sites as potential exposures.</p>

<p>First, load the libraries required for this week</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rgdal</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">spdep</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">leaflet</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">spaMM</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">viridis</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nydata</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rgdal</span><span class="o">::</span><span class="n">readOGR</span><span class="p">(</span><span class="s2">"https://github.com/phw272c/phw272c.github.io/raw/4b27bcd03f556dc666291b704e6a0f00812f51ae/data/nydata.geojson"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## OGR data source with driver: GeoJSON 
## Source: "https://github.com/phw272c/phw272c.github.io/raw/4b27bcd03f556dc666291b704e6a0f00812f51ae/data/nydata.geojson", layer: "nydata"
## with 281 features
## It has 17 fields
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's look at the data</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">nydata</span><span class="o">@</span><span class="n">data</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##          AREANAME     AREAKEY        X        Y POP8 TRACTCAS  PROPCAS
## 0 Binghamton city 36007000100 4.069397 -67.3533 3540     3.08 0.000870
## 1 Binghamton city 36007000200 4.639371 -66.8619 3560     4.08 0.001146
## 2 Binghamton city 36007000300 5.709063 -66.9775 3739     1.09 0.000292
## 3 Binghamton city 36007000400 7.613831 -65.9958 2784     1.07 0.000384
## 4 Binghamton city 36007000500 7.315968 -67.3183 2571     3.06 0.001190
## 5 Binghamton city 36007000600 8.558753 -66.9344 2729     1.06 0.000388
##   PCTOWNHOME PCTAGE65P        Z  AVGIDIST PEXPOSURE   Cases       Xm       Ym
## 0  0.3277311 0.1466102  0.14197 0.2373852  3.167099 3.08284 4069.397 -67353.3
## 1  0.4268293 0.2351124  0.35555 0.2087413  3.038511 4.08331 4639.371 -66861.9
## 2  0.3377396 0.1380048 -0.58165 0.1708548  2.838229 1.08750 5709.063 -66977.5
## 3  0.4616048 0.1188937 -0.29634 0.1406045  2.643366 1.06515 7613.831 -65995.8
## 4  0.1924370 0.1415791  0.45689 0.1577753  2.758587 3.06017 7315.968 -67318.3
## 5  0.3651786 0.1410773 -0.28123 0.1726033  2.848411 1.06386 8558.753 -66934.4
##     Xshift  Yshift
## 0 423391.0 4661502
## 1 423961.0 4661993
## 2 425030.6 4661878
## 3 426935.4 4662859
## 4 426637.5 4661537
## 5 427880.3 4661921
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's create an incidence column</span><span class="w">
</span><span class="n">nydata</span><span class="o">$</span><span class="n">inc_per_1000</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">Cases</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">nydata</span><span class="o">$</span><span class="n">POP8</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span><span class="n">cases_pal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorBin</span><span class="p">(</span><span class="n">viridis</span><span class="p">(</span><span class="m">4</span><span class="p">),</span><span class="w"> </span><span class="n">bins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0.1</span><span class="p">,</span><span class="w"> </span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">8</span><span class="p">),</span><span class="w"> </span><span class="n">nydata</span><span class="o">$</span><span class="n">inc_per_1000</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cases_pal</span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">inc_per_1000</span><span class="p">),</span><span class="w"> </span><span class="n">asp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">legend</span><span class="p">(</span><span class="s1">'bottomright'</span><span class="p">,</span><span class="w"> </span><span class="n">legend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'0 - 0.1'</span><span class="p">,</span><span class="w"> </span><span class="s1">'0.1 - 0.5'</span><span class="p">,</span><span class="w"> </span><span class="s1">'0.5 - 1'</span><span class="p">,</span><span class="w"> </span><span class="s1">'1 - 8'</span><span class="p">),</span><span class="w">
       </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cases_pal</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0.1</span><span class="p">,</span><span class="w"> </span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">8</span><span class="p">)),</span><span class="w">
       </span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Cases / 1000'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-7/nyc_data-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># For more info on the dataset type ?spData::nydata</span><span class="w">
</span></code></pre></div></div>

<p>If we are interested in the relationship between incidence of leukemia
and proximity to hazardous waste sites, we can use a regression
framework. To model incidence, we will use a Poisson regression which is
suitable for modeling count outcomes. As we are more interested in
incidence than numbers of cases (i.e. case numbers are in part driven by
population), we can include population as an ‘offset’ term which
effectively allows us to model rates/incidence. Including population as
an offset is kind of like including population as a fixed effect in the
background. An offest should be included on the log scale as Poisson
regression works in log space. Sometimes, the ‘expected’ counts are used
in place of population. These expected counts are typically just a
scaled version of population, being the counts you would expect if the
mean incidence rate was applied to every areal unit.</p>

<p>Let’s try fitting a simple model using the covariates <code class="language-plaintext highlighter-rouge">PEXPOSURE</code> which
is “exposure potential” calculated as the inverse distance between each
census tract centroid and the nearest TCE site.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First round the case numbers</span><span class="w">
</span><span class="n">nydata</span><span class="o">$</span><span class="n">CASES</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">TRACTCAS</span><span class="p">)</span><span class="w">
</span><span class="n">nyc_glm_mod</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">glm</span><span class="p">(</span><span class="n">CASES</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">PEXPOSURE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">PCTOWNHOME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">PCTAGE65P</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">POP8</span><span class="p">),</span><span class="w"> 
                     </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nydata</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'poisson'</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">nyc_glm_mod</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
## Call:
## glm(formula = CASES ~ PEXPOSURE + PCTOWNHOME + PCTAGE65P, family = "poisson", 
##     data = nydata, offset = log(POP8))
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.9119  -1.1299  -0.1773   0.6448   3.2443  
## 
## Coefficients:
##             Estimate Std. Error z value Pr(&gt;|z|)    
## (Intercept) -8.18147    0.18581 -44.033  &lt; 2e-16 ***
## PEXPOSURE    0.15259    0.03166   4.819 1.44e-06 ***
## PCTOWNHOME  -0.35923    0.19344  -1.857   0.0633 .  
## PCTAGE65P    4.04964    0.60658   6.676 2.45e-11 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for poisson family taken to be 1)
## 
##     Null deviance: 457.66  on 280  degrees of freedom
## Residual deviance: 382.63  on 277  degrees of freedom
## AIC: 957.38
## 
## Number of Fisher Scoring iterations: 5
</code></pre></div></div>

<p>We can see that ‘PEXPOSURE’ is positively related to incidence, i.e. the
further from contamination sites, the lower the risk of leukemia. We can
plot fitted versus observed values.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Scatter plot</span><span class="w">
</span><span class="n">ggplot</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">nyc_glm_mod</span><span class="o">$</span><span class="n">fitted.values</span><span class="p">,</span><span class="w"> </span><span class="n">nydata</span><span class="o">$</span><span class="n">CASES</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-7/poisson_validation-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create maps</span><span class="w">
</span><span class="n">nydata</span><span class="o">$</span><span class="n">fitted</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">nyc_glm_mod</span><span class="o">$</span><span class="n">fitted.values</span><span class="w">

</span><span class="n">col_pal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">topo.colors</span><span class="p">(</span><span class="m">64</span><span class="p">),</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">9</span><span class="p">))</span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">mar</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="nf">rep</span><span class="p">(</span><span class="m">0.8</span><span class="p">,</span><span class="m">4</span><span class="p">)))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col_pal</span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">fitted</span><span class="p">),</span><span class="w"> </span><span class="n">asp</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Fitted'</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col_pal</span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">CASES</span><span class="p">),</span><span class="w"> </span><span class="n">asp</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Observed'</span><span class="p">)</span><span class="w">
</span><span class="n">legend</span><span class="p">(</span><span class="s2">"bottomright"</span><span class="p">,</span><span class="w"> </span><span class="n">inset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.2</span><span class="p">,</span><span class="w">
       </span><span class="n">legend</span><span class="o">=</span><span class="m">0</span><span class="o">:</span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col_pal</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">9</span><span class="p">),</span><span class="w">
       </span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Counts'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-7/poisson_validation-2.png" alt="" /></p>

<p>However, just as covered in week 6, we are making the assumption that
the model residuals are independent. In reality, often neighbouring
values display some correlation. If present, residual spatial
autocorrelation violates the assumption made when applying GLMs. In
<a href="../week-4">Week 4</a> we covered how to test for spatial autocorrelation
(clustering) using a neighborhood matrix. Such an approach is suitable
for areal data where spatial relationships are often better modeled
using adjacency as opposed to distances. We can apply the same approach
using our model residuals to test for residual spatial autocorrelation
of areal data.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Contiguity neighbors - all that share a boundary point</span><span class="w">
</span><span class="n">sf</span><span class="o">::</span><span class="n">sf_use_s2</span><span class="p">(</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">          </span><span class="c1">#allows poly2nb to work https://stackoverflow.com/questions/68478179/how-to-resolve-spherical-geometry-failures-when-joining-spatial-data</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Spherical geometry (s2) switched off
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nydata_nb</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">poly2nb</span><span class="p">(</span><span class="n">nydata</span><span class="p">)</span><span class="w">  </span><span class="c1">#queen contiguity</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in st_is_longlat(pl): bounding box has potentially an invalid value
## range for longlat data

## Warning in st_is_longlat(pl): bounding box has potentially an invalid value
## range for longlat data

## Warning in st_is_longlat(x): bounding box has potentially an invalid value range
## for longlat data

## although coordinates are longitude/latitude, st_intersects assumes that they are planar
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nydata_nb</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Neighbour list object:
## Number of regions: 281 
## Number of nonzero links: 1624 
## Percentage nonzero weights: 2.056712 
## Average number of links: 5.779359
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># coordinates</span><span class="w">
</span><span class="n">coords</span><span class="o">&lt;-</span><span class="n">coordinates</span><span class="p">(</span><span class="n">nydata</span><span class="p">)</span><span class="w">

</span><span class="c1">#view the neighbors</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata</span><span class="p">,</span><span class="w"> </span><span class="n">asp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata_nb</span><span class="p">,</span><span class="n">coords</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="s2">"blue"</span><span class="p">,</span><span class="n">add</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-7/spatial_dep_test-1.png" alt="" /></p>

<p>Now we have our neighbourhood list, we can run a Conditional
Autoregessive (CAR) model, which allows us to incorporate the spatial
autocorrelation between neighbours within our GLM. To do this, we are
going to stick with the <code class="language-plaintext highlighter-rouge">spaMM</code> package. We first need to convert our
neighbourhood list to a neighbourhood (adjacency) matrix which is
required by the function. For a CAR model we have to use binary weights
(i.e. are you a neighbour 0/1)</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">adj_matrix</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">nb2mat</span><span class="p">(</span><span class="n">nydata_nb</span><span class="p">,</span><span class="w"> </span><span class="n">style</span><span class="o">=</span><span class="s2">"B"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The rows and columns of adjMatrix must have names matching those of
levels of the random effect or else be ordered as increasing values of
the levels of the geographic location index specifying the spatial
random effect. In this case, our census tract ID is <code class="language-plaintext highlighter-rouge">AREAKEY</code> which is
ordered as increasing values, so we can remove the rownames of the
adjacency matrix. Alternatively, we could set
<code class="language-plaintext highlighter-rouge">rownames(adj_matrix) &lt;- colnames(adj_matrix) &lt;- nydata$AREAKEY</code></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">row.names</span><span class="p">(</span><span class="n">adj_matrix</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NULL</span><span class="w">
</span></code></pre></div></div>

<p>Now we can fit the model. The spatial effect is called using the
<code class="language-plaintext highlighter-rouge">adjacency</code> function which requires the grouping factor (i.e. the ID of
each census tract).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nyc_car_mod</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fitme</span><span class="p">(</span><span class="n">CASES</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">PEXPOSURE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">PCTOWNHOME</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">PCTAGE65P</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">adjacency</span><span class="p">(</span><span class="m">1</span><span class="o">|</span><span class="n">AREAKEY</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
                             </span><span class="n">offset</span><span class="p">(</span><span class="nf">log</span><span class="p">(</span><span class="n">POP8</span><span class="p">)),</span><span class="w"> 
                     </span><span class="n">adjMatrix</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">adj_matrix</span><span class="p">,</span><span class="w">
                     </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nydata</span><span class="o">@</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'poisson'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## If the 'RSpectra' package were installed, an extreme eigenvalue computation could be faster.
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">(</span><span class="n">nyc_car_mod</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## formula: CASES ~ PEXPOSURE + PCTOWNHOME + PCTAGE65P + adjacency(1 | AREAKEY) + 
##     offset(log(POP8))
## Estimation of corrPars and lambda by ML (p_v approximation of logL).
## Estimation of fixed effects by ML (p_v approximation of logL).
## Estimation of lambda by 'outer' ML, maximizing logL.
## family: poisson( link = log ) 
##  ------------ Fixed effects (beta) ------------
##             Estimate Cond. SE t-value
## (Intercept)  -8.1955  0.20389 -40.195
## PEXPOSURE     0.1510  0.03444   4.386
## PCTOWNHOME   -0.4165  0.21228  -1.962
## PCTAGE65P     4.0803  0.68714   5.938
##  --------------- Random effects ---------------
## Family: gaussian( link = identity ) 
##                    --- Correlation parameters:
##      1.rho 
## -0.2533568 
##            --- Variance parameters ('lambda'):
## lambda = var(u) for u ~ Gaussian; 
##    AREAKEY  :  0.06657  
## # of obs: 281; # of groups: AREAKEY, 281 
##  ------------- Likelihood values  -------------
##                         logLik
## logL       (p_v(h)): -471.4893
</code></pre></div></div>

<p>How has the inclusion of a spatial term affected our estimates? Remember
from week 6, that if you want to generate 95% CIs of your estimates you
can use the following code</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">terms</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'PEXPOSURE'</span><span class="p">,</span><span class="w"> </span><span class="s1">'PCTOWNHOME'</span><span class="p">,</span><span class="w"> </span><span class="s1">'PCTAGE65P'</span><span class="p">)</span><span class="w">
</span><span class="n">coefs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">summary</span><span class="p">(</span><span class="n">nyc_car_mod</span><span class="p">)</span><span class="o">$</span><span class="n">beta_table</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## formula: CASES ~ PEXPOSURE + PCTOWNHOME + PCTAGE65P + adjacency(1 | AREAKEY) + 
##     offset(log(POP8))
## Estimation of corrPars and lambda by ML (p_v approximation of logL).
## Estimation of fixed effects by ML (p_v approximation of logL).
## Estimation of lambda by 'outer' ML, maximizing logL.
## family: poisson( link = log ) 
##  ------------ Fixed effects (beta) ------------
##             Estimate Cond. SE t-value
## (Intercept)  -8.1955  0.20389 -40.195
## PEXPOSURE     0.1510  0.03444   4.386
## PCTOWNHOME   -0.4165  0.21228  -1.962
## PCTAGE65P     4.0803  0.68714   5.938
##  --------------- Random effects ---------------
## Family: gaussian( link = identity ) 
##                    --- Correlation parameters:
##      1.rho 
## -0.2533568 
##            --- Variance parameters ('lambda'):
## lambda = var(u) for u ~ Gaussian; 
##    AREAKEY  :  0.06657  
## # of obs: 281; # of groups: AREAKEY, 281 
##  ------------- Likelihood values  -------------
##                         logLik
## logL       (p_v(h)): -471.4893
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">row</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">row.names</span><span class="p">(</span><span class="n">coefs</span><span class="p">)</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">terms</span><span class="w">
</span><span class="n">lower</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">coefs</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="s1">'Estimate'</span><span class="p">]</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1.96</span><span class="o">*</span><span class="n">coefs</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="s1">'Cond. SE'</span><span class="p">]</span><span class="w">
</span><span class="n">upper</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">coefs</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="s1">'Estimate'</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1.96</span><span class="o">*</span><span class="n">coefs</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="s1">'Cond. SE'</span><span class="p">]</span><span class="w">
</span><span class="n">data.frame</span><span class="p">(</span><span class="n">terms</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">terms</span><span class="p">,</span><span class="w">
           </span><span class="n">IRR</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="n">coefs</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="s1">'Estimate'</span><span class="p">]),</span><span class="w">
           </span><span class="n">lower</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="n">lower</span><span class="p">),</span><span class="w">
           </span><span class="n">upper</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="n">upper</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##        terms        IRR      lower       upper
## 1  PEXPOSURE  1.1630502  1.0871430   1.2442575
## 2 PCTOWNHOME  0.6593295  0.4349178   0.9995348
## 3  PCTAGE65P 59.1607547 15.3859457 227.4799979
</code></pre></div></div>

<p>We can see how well the model fits using scatter plots and maps</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Scatter plot</span><span class="w">
</span><span class="n">ggplot</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">fitted</span><span class="p">(</span><span class="n">nyc_car_mod</span><span class="p">),</span><span class="w"> </span><span class="n">nydata</span><span class="o">$</span><span class="n">CASES</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-7/car_validation-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create maps</span><span class="w">
</span><span class="n">nydata</span><span class="o">$</span><span class="n">fitted_car</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fitted</span><span class="p">(</span><span class="n">nyc_car_mod</span><span class="p">)</span><span class="w">

</span><span class="n">col_pal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">topo.colors</span><span class="p">(</span><span class="m">64</span><span class="p">),</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">9</span><span class="p">))</span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">mar</span><span class="o">=</span><span class="nf">rep</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col_pal</span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">fitted_car</span><span class="p">),</span><span class="w"> </span><span class="n">asp</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Fitted - CAR'</span><span class="p">)</span><span class="w">
</span><span class="n">legend</span><span class="p">(</span><span class="s2">"bottomright"</span><span class="p">,</span><span class="w"> </span><span class="n">inset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.1</span><span class="p">,</span><span class="w"> </span><span class="n">cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.8</span><span class="p">,</span><span class="w">
       </span><span class="n">legend</span><span class="o">=</span><span class="m">0</span><span class="o">:</span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col_pal</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">9</span><span class="p">),</span><span class="w">
       </span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Counts'</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">nydata</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">col_pal</span><span class="p">(</span><span class="n">nydata</span><span class="o">$</span><span class="n">CASES</span><span class="p">),</span><span class="w"> </span><span class="n">asp</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Observed'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-7/car_validation-2.png" alt="" /></p>

<h3 id="references">References</h3>

<h4 id="citation-for-the-leukemia-data">Citation for the leukemia data</h4>

<p>Turnbull, B. W. et al (1990) Monitoring for clusters of disease:
application to leukemia incidence in upstate New York American Journal
of Epidemiology, 132, 136–143</p>

<h4 id="key-reading">Key reading</h4>

<p>Bivand R, Pebesma E, Gomez-Rubio V. (2013). Applied Spatial Data
Analysis with R. Use R! Springer: New York (particularly chapter 9 on
areal data)</p>

<h4 id="other-resources">Other resources</h4>

<p>S. Banerjee, B.P. Carlin and A.E. Gelfand (2003). Hierarchical Modeling
and Analysis for Spatial Data. Chapman &amp; Hall.</p>

<p>D.J. Spiegelhalter, N.G. Best, B.P. Carlin and A. Van der Linde (2002).
Bayesian Measures of Model Complexity and Fit (with Discussion), Journal
of the Royal Statistical Society, Series B 64(4), 583-616.</p>

<p>L.A. Waller and C.A. Gotway (2004). Applied Spatial Statistics for
Public Health Data. Wiley &amp; Sons.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[You now have the skills to:]]></summary></entry><entry><title type="html">Lab 0 - Visualizing spatial data</title><link href="http://localhost:4000/lab-0/" rel="alternate" type="text/html" title="Lab 0 - Visualizing spatial data" /><published>2023-03-03T00:00:00-08:00</published><updated>2023-03-03T00:00:00-08:00</updated><id>http://localhost:4000/lab-0</id><content type="html" xml:base="http://localhost:4000/lab-0/"><![CDATA[<p>This week we will be learning about the process of moving from
visualizing spatial data through to exploration and analysis. We will
get our hands dirty with some R code and learn how to make beautiful
maps. This week’s lecture will focus on some of the concepts behind
spatial epidemiology. The code below covers loading and visualizing
spatial data in R. You will then have a chance to apply that code to new
data and questions in this week’s assignment.</p>

<p>The simplest data is a table with coordinates (i.e. point data). For
this assignment, we’ll work with malaria prevalence point data from
Ethiopia. These data were downloaded from the Malaria Atlas Project data
repository and were originally collected as part of <a href="https://link.springer.com/article/10.1186/1475-2875-10-25">a
study</a>
conducted in 2009.</p>

<p>First get the necessary libraries for this week</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">raster</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rgdal</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Please note that rgdal will be retired during 2023,
## plan transition to sf/stars/terra functions using GDAL and PROJ
## at your earliest convenience.
## See https://r-spatial.org/r/2022/04/12/evolution.html and https://github.com/r-spatial/evolution
## rgdal: version: 1.6-5, (SVN revision 1199)
## Geospatial Data Abstraction Library extensions to R successfully loaded
## Loaded GDAL runtime: GDAL 3.5.3, released 2022/10/21
## Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/rgdal/gdal
##  GDAL does not use iconv for recoding strings.
## GDAL binary built with GEOS: TRUE 
## Loaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910]
## Path to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/rgdal/proj
## PROJ CDN enabled: FALSE
## Linking to sp version:1.6-0
## To mute warnings of possible GDAL/OSR exportToProj4() degradation,
## use options("rgdal_show_exportToProj4_warnings"="none") before loading sp or rgdal.
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">leaflet</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Import the data</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/mal_data_eth_2009_no_dups.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The columns should be self-explanatory, but briefly: * examined =
numbers tested * pf_pos = of those tested, how many were positive for
Plasmodium falciparum malaria * pf_pr = Plasmodium falciparum parasite
rate which is the same as infection prevalence or proportion infected
(i.e. pf_pos / examined) * longitude = longitude of school in decimal
degrees * latitude = latitude of schoolin decimal degrees</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Look at the first few rows</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##    country country_id continent_id site_id          site_name latitude
## 1 Ethiopia        ETH       Africa    6694        Dole School   5.9014
## 2 Ethiopia        ETH       Africa    8017     Gongoma School   6.3175
## 3 Ethiopia        ETH       Africa   12873      Buriya School   7.5674
## 4 Ethiopia        ETH       Africa    6533       Arero School   4.7192
## 5 Ethiopia        ETH       Africa    4150     Gandile School   4.8930
## 6 Ethiopia        ETH       Africa    1369 Melka Amana School   6.2461
##   longitude rural_urban year_start lower_age upper_age examined pf_pos
## 1   38.9412     UNKNOWN       2009         4        15      220      0
## 2   39.8362     UNKNOWN       2009         4        15      216      0
## 3   40.7521     UNKNOWN       2009         4        15      127      0
## 4   38.7650     UNKNOWN       2009         4        15       56      0
## 5   37.3632     UNKNOWN       2009         4        15      219      0
## 6   39.7891     UNKNOWN       2009         4        15      215      1
##         pf_pr     method
## 1 0.000000000 Microscopy
## 2 0.000000000 Microscopy
## 3 0.000000000 Microscopy
## 4 0.000000000 Microscopy
## 5 0.000000000 Microscopy
## 6 0.004651163 Microscopy
##                                                                                                                                title1
## 1 School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.
## 2 School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.
## 3 School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.
## 4 School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.
## 5 School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.
## 6 School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.
##                                                                                                                                                                                                                                                                                               citation1
## 1 Ashton, RA, Kefyalew, T, Tesfaye, G, Pullan, RL, Yadeta, D, Reithinger, R, Kolaczinski, JH and Brooker, S (2011).  &lt;b&gt;School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.&lt;/b&gt; &lt;i&gt;Malaria Journal&lt;/i&gt;, &lt;b&gt;10&lt;/b&gt;(1):25
## 2 Ashton, RA, Kefyalew, T, Tesfaye, G, Pullan, RL, Yadeta, D, Reithinger, R, Kolaczinski, JH and Brooker, S (2011).  &lt;b&gt;School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.&lt;/b&gt; &lt;i&gt;Malaria Journal&lt;/i&gt;, &lt;b&gt;10&lt;/b&gt;(1):25
## 3 Ashton, RA, Kefyalew, T, Tesfaye, G, Pullan, RL, Yadeta, D, Reithinger, R, Kolaczinski, JH and Brooker, S (2011).  &lt;b&gt;School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.&lt;/b&gt; &lt;i&gt;Malaria Journal&lt;/i&gt;, &lt;b&gt;10&lt;/b&gt;(1):25
## 4 Ashton, RA, Kefyalew, T, Tesfaye, G, Pullan, RL, Yadeta, D, Reithinger, R, Kolaczinski, JH and Brooker, S (2011).  &lt;b&gt;School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.&lt;/b&gt; &lt;i&gt;Malaria Journal&lt;/i&gt;, &lt;b&gt;10&lt;/b&gt;(1):25
## 5 Ashton, RA, Kefyalew, T, Tesfaye, G, Pullan, RL, Yadeta, D, Reithinger, R, Kolaczinski, JH and Brooker, S (2011).  &lt;b&gt;School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.&lt;/b&gt; &lt;i&gt;Malaria Journal&lt;/i&gt;, &lt;b&gt;10&lt;/b&gt;(1):25
## 6 Ashton, RA, Kefyalew, T, Tesfaye, G, Pullan, RL, Yadeta, D, Reithinger, R, Kolaczinski, JH and Brooker, S (2011).  &lt;b&gt;School-based surveys of malaria in Oromia Regional State, Ethiopia: a rapid survey method for malaria in low transmission settings.&lt;/b&gt; &lt;i&gt;Malaria Journal&lt;/i&gt;, &lt;b&gt;10&lt;/b&gt;(1):25
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create a histogram of the prevalence</span><span class="w">
</span><span class="n">hist</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="o">=</span><span class="m">20</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-1/unnamed-chunk-3-1.png" alt="" /></p>

<h1 id="plotting-and-mapping-spatial-data">Plotting and mapping spatial data</h1>

<p>It is possible to use R’s base graphics to plot points, treating them
like any other data with x and y coordinates. For example, to get a plot
of the points alone</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">latitude</span><span class="p">,</span><span class="w">
     </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Latitude"</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"Longitude"</span><span class="p">)</span><span class="w"> </span><span class="c1">#boring!</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-1/unnamed-chunk-4-1.png" alt="" /></p>

<p>You might want to vary the size of the circle as a function of a
variable. For example, if we wanted to plot points with size relative to
prevalence we can use the expansion argument <code class="language-plaintext highlighter-rouge">cex</code></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use the cex function to plot circle size as a function of a variable. In this case prevalence. As the values are very small we can multiply by an arbitrary amount for visualization purposes</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">latitude</span><span class="p">,</span><span class="w">
     </span><span class="n">cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w">
     </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Latitude"</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"Longitude"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-1/unnamed-chunk-5-1.png" alt="" /></p>

<h2 id="working-with-spatial-objects">Working with ‘Spatial’ objects</h2>

<p>In R, it is sometimes useful to package spatial data up into a ‘Spatial’
class of object using the <code class="language-plaintext highlighter-rouge">sp</code> package. This often makes it easier to
work with and is often a requirement for other functions. The
<a href="https://cran.r-project.org/web/packages/sp/index.html">sp</a> package
allows you to put your data into specific spatial objects, such as
<code class="language-plaintext highlighter-rouge">SpatialPoints</code> or <code class="language-plaintext highlighter-rouge">SpatialPolygons</code>. In addition, if your data are more
than just the geometry, i.e. if you have data associated with each
spatial feature, you can create spatial DataFrames,
i.e. <code class="language-plaintext highlighter-rouge">SpatialPointsDataFrames</code> and <code class="language-plaintext highlighter-rouge">SpatialPolygonsDataFrames</code>. For
example, if we wanted to create a SpatalPointsDataFrame using the
Ethiopia data:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data_SPDF</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">SpatialPointsDataFrame</span><span class="p">(</span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">)],</span><span class="w">
                                      </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"examined"</span><span class="p">,</span><span class="w"> </span><span class="s2">"pf_pos"</span><span class="p">,</span><span class="w"> </span><span class="s2">"pf_pr"</span><span class="p">)],</span><span class="w">
                                      </span><span class="n">proj4string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CRS</span><span class="p">(</span><span class="s2">"+init=epsg:4326"</span><span class="p">))</span><span class="w"> </span><span class="c1"># sets the projection to WGS 1984 using lat/long. Optional but good to specify</span><span class="w">

</span><span class="c1"># Summary of object</span><span class="w">
</span><span class="n">ETH_malaria_data_SPDF</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class       : SpatialPointsDataFrame 
## features    : 203 
## extent      : 34.5418, 42.4915, 3.8966, 9.9551  (xmin, xmax, ymin, ymax)
## crs         : +proj=longlat +datum=WGS84 +no_defs 
## variables   : 3
## names       : examined, pf_pos,       pf_pr 
## min values  :       37,      0,           0 
## max values  :      221,     14, 0.127272727
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># SPDFs partition data elements, e.g. the coordinates are stored separately from the data</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">@</span><span class="n">coords</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##      longitude latitude
## [1,]   38.9412   5.9014
## [2,]   39.8362   6.3175
## [3,]   40.7521   7.5674
## [4,]   38.7650   4.7192
## [5,]   37.3632   4.8930
## [6,]   39.7891   6.2461
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">@</span><span class="n">data</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##   examined pf_pos       pf_pr
## 1      220      0 0.000000000
## 2      216      0 0.000000000
## 3      127      0 0.000000000
## 4       56      0 0.000000000
## 5      219      0 0.000000000
## 6      215      1 0.004651163
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># You can quickly access the data frame as per a standard data frame, e.g.</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">pf_pr</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.004651163
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># You can use the plot or spplot function to get quick plots</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-1/unnamed-chunk-6-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spplot</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="p">,</span><span class="w"> </span><span class="n">zcol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"pf_pr"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-1/unnamed-chunk-6-2.png" alt="" /></p>

<p>Let’s have a look at SpatialPolygonsDataFrames. To load a polygon
shapefile (or other file types), you can use the <code class="language-plaintext highlighter-rouge">readOGR</code> function from
the <code class="language-plaintext highlighter-rouge">rgdal</code> package. For example, if you wanted to load in the province
boundaries for Ethiopia shapefile <code class="language-plaintext highlighter-rouge">ETH_Adm_1</code> from the
<code class="language-plaintext highlighter-rouge">ETH_Adm_1_shapefile</code> folder on
<a href="https://github.com/phw272c/phw272c.github.io/tree/master/data/ETH_Adm_1_shapefile">GitHub</a>,
assuming you have downloaded the folder of files you would use the
following command</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ETH_Adm_1 &lt;- readOGR("ETH_Adm_1_shapefile", "ETH_Adm_1")
</code></pre></div></div>

<p>As it happens, admin boundary data is accessible using the <code class="language-plaintext highlighter-rouge">getData</code>
function from the <code class="language-plaintext highlighter-rouge">raster</code> package. Be careful as some other packages
also have a <code class="language-plaintext highlighter-rouge">getData</code> function, so to specify that you want to use the
<code class="language-plaintext highlighter-rouge">getData</code> function from the <code class="language-plaintext highlighter-rouge">raster</code> package you can use the following
code</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># You first need the ISO3 codes for the country of interest. You can access these using `ccodes()`. For Ethiopia, the ISO3 is ETH</span><span class="w">

</span><span class="c1"># The getData function then allows you to retrieve the relevant admin level boundaries from GADM.</span><span class="w">
</span><span class="n">ETH_Adm_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">getData</span><span class="p">(</span><span class="s2">"GADM"</span><span class="p">,</span><span class="w"> </span><span class="n">country</span><span class="o">=</span><span class="s2">"ETH"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in raster::getData("GADM", country = "ETH", level = 1): getData will be removed in a future version of raster
## . Please use the geodata package instead
</code></pre></div></div>

<p>Now we can plot the point data in context</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot both country and data points</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">)</span><span class="w">
</span><span class="n">points</span><span class="p">(</span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">longitude</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">latitude</span><span class="p">,</span><span class="w">
     </span><span class="n">cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="o">$</span><span class="n">pf_pr</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w">
     </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Latitude"</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"Longitude"</span><span class="p">,</span><span class="w">
     </span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-1/unnamed-chunk-8-1.png" alt="" /></p>

<h1 id="plotting-data-using-web-maps">Plotting data using web maps</h1>

<p>Rather than just relying on R base graphics, we can easily create
webmaps using the <code class="language-plaintext highlighter-rouge">leaflet</code> package. There are many basemaps available.
See <a href="https://leaflet-extras.github.io/leaflet-providers/preview/">here</a>.
For any map, identify the Provider name, e.g. ”OpenStreetMap.Mapnik”, by
clicking on the map.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Define your basemap
basemap &lt;- leaflet() %&gt;% addTiles()
basemap

# Or choose another basemap
basemap &lt;- leaflet() %&gt;% addProviderTiles("Esri.WorldImagery")
basemap

#Let's choose a simple one
basemap &lt;- leaflet() %&gt;% addProviderTiles("CartoDB.Positron")
</code></pre></div></div>

<p>You can use the ‘piping’ command %&gt;% to add layers. As our point and
polygon data are already ‘Spatial’ object this is easy</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>basemap %&gt;% addPolygons(data=ETH_Adm_1)


# to change the colors/line weight
basemap %&gt;% addPolygons(data=ETH_Adm_1, color = "red", 
                        weight = 1, fillOpacity = 0.2)

#You can also add popups
basemap %&gt;% addPolygons(data=ETH_Adm_1, 
                        popup = ETH_Adm_1$NAME_1)

# If you want to add points as well
basemap %&gt;% addPolygons(data=ETH_Adm_1, weight = 2,
                        popup = ETH_Adm_1$NAME_1) %&gt;%
  
            addCircleMarkers(data=ETH_malaria_data_SPDF,
                             color="red", radius = 2)
</code></pre></div></div>

<p>The leaflet package also has some nice functions for generate color
palettes that map to a variable you want to display. For example, if we
wanted to create a color ramp relative to prevalence we could use the
<code class="language-plaintext highlighter-rouge">colorQuantile</code> function. See ?colorQuantile for other ways to build
color palettes such as <code class="language-plaintext highlighter-rouge">colorNumeric</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>library(wesanderson) # for a nice color palette
colorPal &lt;- colorNumeric(wes_palette("Zissou1")[1:5], ETH_malaria_data_SPDF$pf_pr, n = 5)

# colorPal is now a function you can apply to get the corresponding
# color for a value
colorPal(0.1)

basemap %&gt;% addPolygons(data=ETH_Adm_1, weight = 2, fillOpacity=0,
                        popup = ETH_Adm_1$NAME_1,
                        color = "gray") %&gt;%
  
  addCircleMarkers(data=ETH_malaria_data_SPDF,
                   color = colorPal(ETH_malaria_data_SPDF$pf_pr), 
                   radius = 2,
                   popup = as.character(ETH_malaria_data_SPDF$pf_pr))
</code></pre></div></div>

<p>You might want to add a legend. This just goes on as another layer on
the map. First define the labels. In this case, we are using quintiles.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>basemap %&gt;% addPolygons(data=ETH_Adm_1, weight = 2, fillOpacity=0,
                        popup = ETH_Adm_1$NAME_1,
                        color = "gray") %&gt;%
  
  addCircleMarkers(data=ETH_malaria_data_SPDF,
                   color = colorPal(ETH_malaria_data_SPDF$pf_pr), 
                   radius = 2,
                   popup = as.character(ETH_malaria_data_SPDF$pf_pr)) %&gt;%
  
  addLegend(pal = colorPal, 
            title = "Prevalence",
            values = ETH_malaria_data_SPDF$pf_pr )
</code></pre></div></div>

<p>For more complex popups, you can define the HTML</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>basemap %&gt;% addPolygons(data=ETH_Adm_1, weight = 2, fillOpacity=0,
                        popup = ETH_Adm_1$NAME_1,
                        color = "gray") %&gt;%
  
  addCircleMarkers(data=ETH_malaria_data_SPDF,
                   color = colorPal(ETH_malaria_data_SPDF$pf_pr), 
                   radius = 2,
                   popup = paste("&lt;p&gt;","Prevalence:",
                                 round(ETH_malaria_data_SPDF$pf_pr,2),
                                 "&lt;p&gt;")) %&gt;%
                                 
 addLegend(pal = colorPal, 
            title = "Prevalence",
            values = ETH_malaria_data_SPDF$pf_pr )
</code></pre></div></div>

<h1 id="plotting-raster-data">Plotting raster data</h1>

<p>If you have a local raster file (e.g. a .tif file), you can use the
<code class="language-plaintext highlighter-rouge">raster</code> command to load the file into R. For example, if you download
the
<a href="https://github.com/phw272c/phw272c.github.io/blob/master/data/elev_ETH.tif?raw=true">“elev_ETH.tif”</a>
file from this week’s data, you would use the following to load from a
local source:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>elev &lt;- raster("elev_ETH.tif")
</code></pre></div></div>

<p>You can also load using a URL, e.g.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>elev &lt;- raster("https://github.com/phw272c/phw272c.github.io/blob/master/data/elev_ETH.tif?raw=true")
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">getData</code> functon from the <code class="language-plaintext highlighter-rouge">raster</code> package allows you to get hold
of some select raster data, such as elevation and bioclimatic layers. To
get hold of elevation for Ethiopia, use the following</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">elev</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">getData</span><span class="p">(</span><span class="s2">"alt"</span><span class="p">,</span><span class="w"> </span><span class="n">country</span><span class="o">=</span><span class="s2">"ETH"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in raster::getData("alt", country = "ETH"): getData will be removed in a future version of raster
## . Please use the geodata package instead
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">elev</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 1416, 1824, 2582784  (nrow, ncol, ncell)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 32.9, 48.1, 3.2, 15  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : ETH_msk_alt.grd 
## names      : ETH_msk_alt 
## values     : -189, 4420  (min, max)
</code></pre></div></div>

<p>You can plot using the plot function</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">elev</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-1/unnamed-chunk-10-1.png" alt="" /></p>

<p>Alternatively, you can use leaflet</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>basemap %&gt;% addRasterImage(elev)
</code></pre></div></div>

<p>If you want to add a legend, you have to define the color palette first</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Define palette
raster_colorPal &lt;- colorNumeric(topo.colors(64), values(elev), na.color = NA)

# Plot
basemap %&gt;% addRasterImage(elev, color = raster_colorPal) %&gt;%
addLegend(values = values(elev), pal = raster_colorPal)
</code></pre></div></div>

<p>If you want to export the data, there are several options.</p>

<ol>
  <li>
    <p>Export button in the Viewer pane. Using ‘Save as webpage’ creates an
html file which you can open using a browser.</p>
  </li>
  <li>
    <p>Save as kml for someone to open in Google Earth</p>
  </li>
</ol>

<pre><code class="language-{=html}">&lt;!-- --&gt;
</code></pre>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>library(plotKML)
plotKML(ETH_malaria_data_SPDF) # see ?plotKML for more options
</code></pre></div></div>

<h1 id="pop-quiz">Pop quiz</h1>

<p>When using the base graphics to plot point data, how might you make the
points larger, but still relative to prevalence?</p>

<h2 id="resources">Resources</h2>

<p>The R packages
<a href="https://cran.r-project.org/web/packages/sp/index.html">sp</a> and
<a href="https://cran.r-project.org/web/packages/raster/index.html">raster</a> are
both important packages for spatial analysis.</p>

<p>R studio also have a fantastic
<a href="https://rstudio.github.io/leaflet/">site</a> outlining the use of leaflet</p>]]></content><author><name></name></author><summary type="html"><![CDATA[This week we will be learning about the process of moving from visualizing spatial data through to exploration and analysis. We will get our hands dirty with some R code and learn how to make beautiful maps. This week’s lecture will focus on some of the concepts behind spatial epidemiology. The code below covers loading and visualizing spatial data in R. You will then have a chance to apply that code to new data and questions in this week’s assignment.]]></summary></entry><entry><title type="html">Lab 1 - Manipulating spatial data</title><link href="http://localhost:4000/lab-1/" rel="alternate" type="text/html" title="Lab 1 - Manipulating spatial data" /><published>2023-03-03T00:00:00-08:00</published><updated>2023-03-03T00:00:00-08:00</updated><id>http://localhost:4000/lab-1</id><content type="html" xml:base="http://localhost:4000/lab-1/"><![CDATA[<p>In Lab 0, you got to load up some spatial data and make some pretty
maps. This week, we will be stepping up a gear and learning how to crop
and subset spatial data. We will also be go through the process of
resampling rasters.</p>

<h2 id="learning-outcomes">Learning outcomes</h2>

<p>By the end of this week, you will be able to:</p>

<ul>
  <li>Clip and subset vector and raster data</li>
  <li>Resample rasters</li>
  <li>Relate spatial data</li>
</ul>

<p>Load the necessary libraries for this week</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">raster</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">leaflet</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rgdal</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">geosphere</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rgeos</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">wesanderson</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">stats</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>First we are going to subset some spatial (polygon) data. For this
exersize, we are going to use the admin 1 boundaries for Ethiopia we
used in week 1. As a reminder, we can load these in from a local
shapefile using the readOGR function, or we can use the handy <code class="language-plaintext highlighter-rouge">getData</code>
function from the <code class="language-plaintext highlighter-rouge">raster</code> package to access GADM data.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_Adm_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">getData</span><span class="p">(</span><span class="s2">"GADM"</span><span class="p">,</span><span class="w"> </span><span class="n">country</span><span class="o">=</span><span class="s2">"ETH"</span><span class="p">,</span><span class="w"> </span><span class="n">level</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in raster::getData("GADM", country = "ETH", level = 1): getData will be removed in a future version of raster
## . Please use the geodata package instead
</code></pre></div></div>

<p>You can subset a SpatialPolygonsDataFrame just like a data frame. Let’s
subset the data first by row/polygon</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_Adm_1_cropped</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="p">[</span><span class="m">1</span><span class="p">,]</span><span class="w">

</span><span class="c1"># Get a summary of the cropped data</span><span class="w">
</span><span class="n">ETH_Adm_1_cropped</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class       : SpatialPolygonsDataFrame 
## features    : 1 
## extent      : 38.6394, 38.90624, 8.833486, 9.098195  (xmin, xmax, ymin, ymax)
## crs         : +proj=longlat +datum=WGS84 +no_defs 
## variables   : 10
## names       : GID_0,   NAME_0,   GID_1,      NAME_1,                                     VARNAME_1, NL_NAME_1,    TYPE_1, ENGTYPE_1, CC_1, HASC_1 
## value       :   ETH, Ethiopia, ETH.1_1, Addis Abeba, Āddīs Ābaba|Addis Ababa|Adis-Abeba|Ādīs Ābeba,        NA, Astedader,      City,   14,  ET.AA
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot over the top of the full dataset</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_Adm_1_cropped</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">ETH_Adm_1_cropped</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">,</span><span class="w"> </span><span class="n">lwd</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-3-1.png" alt="" /></p>

<p>You can also subset by name. For example, if we wanted to extract the
polygon representing the boundary of the province “Amhara”</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_Adm_1_Amhara</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">subset</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">NAME_1</span><span class="o">==</span><span class="s2">"Amhara"</span><span class="p">)</span><span class="w"> </span><span class="c1">#OR ETH_Adm_1[ETH_Adm_1$NAME_1=="Amhara",] will also work</span><span class="w">
</span><span class="n">ETH_Adm_1_Amhara</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class       : SpatialPolygonsDataFrame 
## features    : 1 
## extent      : 35.25711, 40.21244, 8.714812, 13.7687  (xmin, xmax, ymin, ymax)
## crs         : +proj=longlat +datum=WGS84 +no_defs 
## variables   : 10
## names       : GID_0,   NAME_0,   GID_1, NAME_1, VARNAME_1, NL_NAME_1, TYPE_1, ENGTYPE_1, CC_1, HASC_1 
## value       :   ETH, Ethiopia, ETH.3_1, Amhara,     Amara,        NA,  Kilil,     State,   03,  ET.AM
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Plot the result</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">ETH_Adm_1_Amhara</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="n">lwd</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-4-1.png" alt="" /> ### Pop quiz * How would
you plot all provinces except Amhara? * Try plotting all province using
leaflet, with Amhara colored red and all others colored orange.</p>

<h2 id="spatial-overlays">Spatial overlays</h2>

<p>Often, we have point and polygon data and wish to relate them. For
example, we might want to summarize point data over regions. To
illustrate this, we are going to use the Ethiopia malaria point
prevalence data and aggregate that to provincial level to get a
provincial level estimate of prevalence.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get the point prevalence data from the GitHub repo</span><span class="w">
</span><span class="n">ETH_malaria_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/mal_data_eth_2009_no_dups.csv"</span><span class="p">,</span><span class="n">header</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">

</span><span class="c1"># Convert to a SPDF</span><span class="w">
</span><span class="n">ETH_malaria_data_SPDF</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">SpatialPointsDataFrame</span><span class="p">(</span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"longitude"</span><span class="p">,</span><span class="w"> </span><span class="s2">"latitude"</span><span class="p">)],</span><span class="w">
                                      </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_malaria_data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"examined"</span><span class="p">,</span><span class="w"> </span><span class="s2">"pf_pos"</span><span class="p">,</span><span class="w"> </span><span class="s2">"pf_pr"</span><span class="p">)],</span><span class="w">
                                      </span><span class="n">proj4string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CRS</span><span class="p">(</span><span class="s2">"+init=epsg:4326"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>To identify the Province each point lies within you can use the <code class="language-plaintext highlighter-rouge">over</code>
function from the <code class="language-plaintext highlighter-rouge">sp</code> package</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ETH_Adm_1_per_point &lt;- over(ETH_malaria_data_SPDF, ETH_Adm_1)
  Error in .local(x, y, returnList, fn, ...) : identicalCRS(x, y) is not TRUE
</code></pre></div></div>

<p>This throws an error, because <code class="language-plaintext highlighter-rouge">ETH_malaria_data_SPDF</code> and <code class="language-plaintext highlighter-rouge">ETH_Adm_1</code> do
not have exactly the same coordinate reference system (CRS). Let’s take
a look</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crs</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
## Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs 
## WKT2 2019 representation:
## GEOGCRS["unknown",
##     DATUM["World Geodetic System 1984",
##         ELLIPSOID["WGS 84",6378137,298.257223563,
##             LENGTHUNIT["metre",1]],
##         ID["EPSG",6326]],
##     PRIMEM["Greenwich",0,
##         ANGLEUNIT["degree",0.0174532925199433],
##         ID["EPSG",8901]],
##     CS[ellipsoidal,2],
##         AXIS["longitude",east,
##             ORDER[1],
##             ANGLEUNIT["degree",0.0174532925199433,
##                 ID["EPSG",9122]]],
##         AXIS["latitude",north,
##             ORDER[2],
##             ANGLEUNIT["degree",0.0174532925199433,
##                 ID["EPSG",9122]]]]
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crs</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Coordinate Reference System:
## Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs 
## WKT2 2019 representation:
## GEOGCRS["WGS 84",
##     ENSEMBLE["World Geodetic System 1984 ensemble",
##         MEMBER["World Geodetic System 1984 (Transit)",
##             ID["EPSG",1166]],
##         MEMBER["World Geodetic System 1984 (G730)",
##             ID["EPSG",1152]],
##         MEMBER["World Geodetic System 1984 (G873)",
##             ID["EPSG",1153]],
##         MEMBER["World Geodetic System 1984 (G1150)",
##             ID["EPSG",1154]],
##         MEMBER["World Geodetic System 1984 (G1674)",
##             ID["EPSG",1155]],
##         MEMBER["World Geodetic System 1984 (G1762)",
##             ID["EPSG",1156]],
##         MEMBER["World Geodetic System 1984 (G2139)",
##             ID["EPSG",1309]],
##         ELLIPSOID["WGS 84",6378137,298.257223563,
##             LENGTHUNIT["metre",1],
##             ID["EPSG",7030]],
##         ENSEMBLEACCURACY[2.0],
##         ID["EPSG",6326]],
##     PRIMEM["Greenwich",0,
##         ANGLEUNIT["degree",0.0174532925199433],
##         ID["EPSG",8901]],
##     CS[ellipsoidal,2],
##         AXIS["longitude",east,
##             ORDER[1],
##             ANGLEUNIT["degree",0.0174532925199433,
##                 ID["EPSG",9122]]],
##         AXIS["latitude",north,
##             ORDER[2],
##             ANGLEUNIT["degree",0.0174532925199433,
##                 ID["EPSG",9122]]],
##     USAGE[
##         SCOPE["unknown"],
##         AREA["World."],
##         BBOX[-90,-180,90,180]]]
</code></pre></div></div>

<p>To reproject to the same CRS, you can use the <code class="language-plaintext highlighter-rouge">spTransform</code> function
from the <code class="language-plaintext highlighter-rouge">sp</code> package</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data_SPDF</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">spTransform</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="p">,</span><span class="w"> </span><span class="n">crs</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">))</span><span class="w">

</span><span class="c1"># Check the new;y projected object</span><span class="w">
</span><span class="n">ETH_malaria_data_SPDF</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class       : SpatialPointsDataFrame 
## features    : 203 
## extent      : 34.5418, 42.4915, 3.8966, 9.9551  (xmin, xmax, ymin, ymax)
## crs         : +proj=longlat +datum=WGS84 +no_defs 
## variables   : 3
## names       : examined, pf_pos,       pf_pr 
## min values  :       37,      0,           0 
## max values  :      221,     14, 0.127272727
</code></pre></div></div>

<p>Now we can re-run the over command</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_Adm_1_per_point</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">over</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>This gives us a table where each row represents a point from
<code class="language-plaintext highlighter-rouge">ETH_malaria_data_SPDF</code> and columns represent the data from <code class="language-plaintext highlighter-rouge">ETH_Adm_1</code>.
Let’s take a look</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">ETH_Adm_1_per_point</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##   GID_0   NAME_0   GID_1 NAME_1 VARNAME_1 NL_NAME_1 TYPE_1 ENGTYPE_1 CC_1
## 1   ETH Ethiopia ETH.8_1 Oromia   Oromiya      &lt;NA&gt;  Kilil     State   04
## 2   ETH Ethiopia ETH.8_1 Oromia   Oromiya      &lt;NA&gt;  Kilil     State   04
## 3   ETH Ethiopia ETH.8_1 Oromia   Oromiya      &lt;NA&gt;  Kilil     State   04
## 4   ETH Ethiopia ETH.8_1 Oromia   Oromiya      &lt;NA&gt;  Kilil     State   04
## 5   ETH Ethiopia ETH.8_1 Oromia   Oromiya      &lt;NA&gt;  Kilil     State   04
## 6   ETH Ethiopia ETH.8_1 Oromia   Oromiya      &lt;NA&gt;  Kilil     State   04
##   HASC_1
## 1  ET.OR
## 2  ET.OR
## 3  ET.OR
## 4  ET.OR
## 5  ET.OR
## 6  ET.OR
</code></pre></div></div>

<p>Now we can use this to calculate admin unit specific statistics. We
might be interested in the number of sites per admin unit. To get that,
we could just create a frequency table</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">table</span><span class="p">(</span><span class="n">ETH_Adm_1_per_point</span><span class="o">$</span><span class="n">NAME_1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
## Benshangul-Gumaz  Gambela Peoples           Oromia 
##                1                1              201
</code></pre></div></div>

<p>Or we can use the <code class="language-plaintext highlighter-rouge">tapply</code> function for more complex calculations.
<code class="language-plaintext highlighter-rouge">tapply</code> allows us to apply a function across groups. Let’s look at the
number examined per admin unit</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Nex_per_Adm1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tapply</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">examined</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_Adm_1_per_point</span><span class="o">$</span><span class="n">NAME_1</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">)</span><span class="w">
</span><span class="n">Nex_per_Adm1</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Benshangul-Gumaz  Gambela Peoples           Oromia 
##              109              108            24350
</code></pre></div></div>

<p>Now let’s get the number of positives by admin unit</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Npos_per_Adm1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tapply</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">pf_pos</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_Adm_1_per_point</span><span class="o">$</span><span class="n">NAME_1</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">)</span><span class="w">
</span><span class="n">Npos_per_Adm1</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Benshangul-Gumaz  Gambela Peoples           Oromia 
##                1                0               78
</code></pre></div></div>

<p>From these numbers, we can calculate the prevalence per province</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prev_per_Adm1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Npos_per_Adm1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">Nex_per_Adm1</span><span class="w">
</span><span class="n">prev_per_Adm1</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Benshangul-Gumaz  Gambela Peoples           Oromia 
##      0.009174312      0.000000000      0.003203285
</code></pre></div></div>

<p>If you want to merge these provincial prevalence estimates back into the
province object <code class="language-plaintext highlighter-rouge">ETH_Adm_1</code> it is best practice to create a new table of
prevalence by provice with unique ID for each province. That unique ID
can be used to relate and merge the data with <code class="language-plaintext highlighter-rouge">ETH_Adm_1</code>.</p>

<p>First convert your prev_per_Adm1 vector into a dataframe with an ID
column</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prev_per_Adm1_df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">NAME_1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">prev_per_Adm1</span><span class="p">),</span><span class="w">
                               </span><span class="n">prevalence</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev_per_Adm1</span><span class="p">,</span><span class="w">
                               </span><span class="n">row.names</span><span class="o">=</span><span class="kc">NULL</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Now merge this with the <code class="language-plaintext highlighter-rouge">ETH_Adm_1</code> data frame</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_Adm_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">merge</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">,</span><span class="w"> </span><span class="n">prev_per_Adm1_df</span><span class="p">,</span><span class="w">
                  </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"NAME_1"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>You can now see that the additional <code class="language-plaintext highlighter-rouge">prevalence</code> field has been added</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##             NAME_1 GID_0   NAME_0   GID_1
## 1      Addis Abeba   ETH Ethiopia ETH.1_1
## 2             Afar   ETH Ethiopia ETH.2_1
## 3           Amhara   ETH Ethiopia ETH.3_1
## 4 Benshangul-Gumaz   ETH Ethiopia ETH.4_1
## 5        Dire Dawa   ETH Ethiopia ETH.5_1
## 6  Gambela Peoples   ETH Ethiopia ETH.6_1
##                                       VARNAME_1 NL_NAME_1    TYPE_1 ENGTYPE_1
## 1 Āddīs Ābaba|Addis Ababa|Adis-Abeba|Ādīs Ābeba      &lt;NA&gt; Astedader      City
## 2                                                    &lt;NA&gt;     Kilil     State
## 3                                         Amara      &lt;NA&gt;     Kilil     State
## 4                              Beneshangul Gumu      &lt;NA&gt;     Kilil     State
## 5                                                    &lt;NA&gt; Astedader      City
## 6                                       Gambela      &lt;NA&gt;     Kilil     State
##   CC_1 HASC_1  prevalence
## 1   14  ET.AA          NA
## 2   02  ET.AF          NA
## 3   03  ET.AM          NA
## 4   06  ET.BE 0.009174312
## 5   15  ET.DD          NA
## 6   12  ET.GA 0.000000000
</code></pre></div></div>

<p>We can now plot province colored by prevalence. Let’s use the leaflet
package</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First define a color palette based on prevalence</span><span class="w">
</span><span class="n">colorPal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorNumeric</span><span class="p">(</span><span class="n">wes_palette</span><span class="p">(</span><span class="s2">"Zissou1"</span><span class="p">)[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">],</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">prevalence</span><span class="p">)</span><span class="w">

</span><span class="c1"># Plot with leaflet</span><span class="w">
</span><span class="n">leaflet</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addProviderTiles</span><span class="p">(</span><span class="s2">"CartoDB.Positron"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">addPolygons</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">ETH_Adm_1</span><span class="p">,</span><span class="w"> 
                                         </span><span class="n">col</span><span class="o">=</span><span class="n">colorPal</span><span class="p">(</span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">prevalence</span><span class="p">),</span><span class="w">
                                         </span><span class="n">fillOpacity</span><span class="o">=</span><span class="m">0.6</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                                         </span><span class="n">addLegend</span><span class="p">(</span><span class="n">pal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">colorPal</span><span class="p">,</span><span class="w"> 
                                         </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">prevalence</span><span class="p">,</span><span class="w">
                                         </span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Prevalence"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-17-1.png" alt="" /></p>

<h3 id="notes-on-table-joins">Notes on table joins</h3>

<p>In this example, we joined the table of prevalence values for each State
using the common <code class="language-plaintext highlighter-rouge">NAME_1</code> field Often, however, when you are joining a
table of data to some spatial data, they are from different sources and
the common field on which to match rows can be formatted differently.
For example if you were merging a table of state level data for the USA
using the state name, your table might have an entry for <code class="language-plaintext highlighter-rouge">California</code>
which would not match with your spatial data if it has <code class="language-plaintext highlighter-rouge">california</code> as
the corresponding entry. It is always preferable to use ID codes over
names for matching as these are often less variable. If you do have to
use a character string such as name, the following functions are useful
ways to reformat characters to make sure they match:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">substr</code> - this allows you to extract substrings, for example
<code class="language-plaintext highlighter-rouge">substr("Cali", 1,2)</code> extracts the first to second characters and
would give you back <code class="language-plaintext highlighter-rouge">Ca</code></li>
  <li><code class="language-plaintext highlighter-rouge">tolower</code> - converts all characters to lower case. <code class="language-plaintext highlighter-rouge">toupper</code> is the
reverse.</li>
  <li><code class="language-plaintext highlighter-rouge">gsub</code> - allows you to replace characters. For example
<code class="language-plaintext highlighter-rouge">gsub(" ", "-", "CA USA")</code> would replace any whitespace with <code class="language-plaintext highlighter-rouge">-</code>,
i.e. in this example it would return <code class="language-plaintext highlighter-rouge">CA-USA</code>.</li>
</ul>

<p><a href="https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/code/table_joins.R">Go
here</a>
for a worked example of table joins in R.</p>

<h3 id="pop-quiz">Pop quiz</h3>

<ul>
  <li>Try generating the same plot using a different color palette.</li>
  <li>How would you plot only the provinces for which you have prevalence
estimates?</li>
</ul>

<h1 id="manipulating-raster-data">Manipulating raster data</h1>

<p>You’ve now seen how to subset polygons and relate point and polygon
data. Now we are going to look at basic manipulations of raster data. We
are going to load 2 raster file, elevation and land use for Ethiopia.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get elevation using the getData function from the raster package</span><span class="w">
</span><span class="n">ETH_elev</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="o">::</span><span class="n">getData</span><span class="p">(</span><span class="s2">"alt"</span><span class="p">,</span><span class="w"> </span><span class="n">country</span><span class="o">=</span><span class="s2">"ETH"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning in raster::getData("alt", country = "ETH"): getData will be removed in a future version of raster
## . Please use the geodata package instead
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">ETH_elev</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-18-1.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Land use (# For information on land use classifications see http://due.esrin.esa.int/files/GLOBCOVER2009_Validation_Report_2.2.pdf)</span><span class="w">
</span><span class="n">ETH_land_use</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="p">(</span><span class="s2">"https://github.com/phw272c/phw272c.github.io/raw/master/data/ETH_land_use.tif"</span><span class="p">)</span><span class="w">
</span><span class="n">ETH_land_use</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 4121, 5384, 22187464  (nrow, ncol, ncell)
## resolution : 0.002777778, 0.002777778  (x, y)
## extent     : 33.00139, 47.95694, 3.398611, 14.84583  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : ETH_land_use.tif 
## names      : ETH_land_use 
## values     : 11, 210  (min, max)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Plot the land use raster</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_land_use</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-18-2.png" alt="" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># For a break down of the classes in Ethiopia aka how often each land use type occurs</span><span class="w">
</span><span class="c1">#(Note: this is just the number of pixels per land use type - NOT acres)</span><span class="w">
</span><span class="n">table</span><span class="p">(</span><span class="n">ETH_land_use</span><span class="p">[])</span><span class="w"> 
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 
##      11      14      20      30      40      60      90     110     120     130 
##  105074  336324 2451623 2223305  129786  813227       8 5254463  580793 1900890 
##     140     150     160     170     180     190     200     210 
## 1403832 1998099    6765      18   26026    6375 2947145 2003711
</code></pre></div></div>

<h2 id="resampling-rasters">Resampling rasters</h2>

<p>Its good practice to resample rasters to the same extent and resolution
(i.e. same grid). This makes it easier to deal with later and to relate
rasters to each other. The <code class="language-plaintext highlighter-rouge">resample</code> command in the <code class="language-plaintext highlighter-rouge">raster</code> package
makes this process easy. Here we are going to resample our land use
raster, but for a deeper dive on resampling rasters of different data
types, <a href="https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/code/raster_resampling.R">go
here</a>.
The default method is bilinear interpolation, which doesn’t make sense
for our categorical variable, so we should use the nearest neighbour
function ‘ngb’</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Takes a little time to run..</span><span class="w">
</span><span class="n">ETH_land_use_resampled</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">resample</span><span class="p">(</span><span class="n">ETH_land_use</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_elev</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="o">=</span><span class="s2">"ngb"</span><span class="p">)</span><span class="w"> 

</span><span class="c1"># Get summaries of both raster objects to check resolution and extent</span><span class="w">
</span><span class="c1"># and to see whether resampled values look right</span><span class="w">
</span><span class="n">ETH_land_use_resampled</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 1416, 1824, 2582784  (nrow, ncol, ncell)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 32.9, 48.1, 3.2, 15  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : memory
## names      : ETH_land_use 
## values     : 11, 210  (min, max)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_elev</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class      : RasterLayer 
## dimensions : 1416, 1824, 2582784  (nrow, ncol, ncell)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 32.9, 48.1, 3.2, 15  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : ETH_msk_alt.grd 
## names      : ETH_msk_alt 
## values     : -189, 4420  (min, max)
</code></pre></div></div>

<h2 id="manipulating-rasters">Manipulating rasters</h2>

<p>It is often the case that we want to change the resolution of a raster
for analysis. For example, for computational reasons we might want to
work at a coarser resolution. First, let’s check the resolution</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res</span><span class="p">(</span><span class="n">ETH_elev</span><span class="p">)</span><span class="w"> </span><span class="c1"># in decimal degrees. 1 dd roughly 111km at the equator</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 0.008333333 0.008333333
</code></pre></div></div>

<p>Let’s aggregate (make lower resolution) by a factor of 10</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_elev_low_res</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">aggregate</span><span class="p">(</span><span class="n">ETH_elev</span><span class="p">,</span><span class="w"> </span><span class="n">fact</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="c1"># by default, calculates mean</span><span class="w">
</span><span class="n">res</span><span class="p">(</span><span class="n">ETH_elev_low_res</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 0.08333333 0.08333333
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">ETH_elev_low_res</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-21-1.png" alt="" /></p>

<p>You can change the values of the pixels easily. For example, if you want
to change the <code class="language-plaintext highlighter-rouge">ETH_elev</code> raster from its native meters to feet, you can
mulitply by 3.28</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_elev_feet</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ETH_elev</span><span class="o">*</span><span class="m">3.28</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_elev_feet</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-22-1.png" alt="" /></p>

<p>Similarly, you can categorize raster values</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_elev_categorized</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cut</span><span class="p">(</span><span class="n">ETH_elev</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">ETH_elev_categorized</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-23-1.png" alt="" /></p>

<p>If a raster is the same resolution and extent, you can perform joint
operations on them, for example subtract values of one from another</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new_raster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ETH_elev</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">ETH_land_use_resampled</span><span class="w"> </span><span class="c1"># Meaningless! Just for illustrative purposes..</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">new_raster</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-24-1.png" alt="" /></p>

<h1 id="extracting-data-from-rasters">Extracting data from rasters</h1>

<p>Now let’s extract values of elevation at each survey point. You can use
the <code class="language-plaintext highlighter-rouge">extract</code> function from the raster package and insert the extracted
values as a new field on <code class="language-plaintext highlighter-rouge">ETH_malaria_data_SPDF</code></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">elev</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">extract</span><span class="p">(</span><span class="n">ETH_elev</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_malaria_data_SPDF</span><span class="p">)</span><span class="w">
</span><span class="n">ETH_malaria_data_SPDF</span><span class="w"> </span><span class="c1"># now has 3 variables</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class       : SpatialPointsDataFrame 
## features    : 203 
## extent      : 34.5418, 42.4915, 3.8966, 9.9551  (xmin, xmax, ymin, ymax)
## crs         : +proj=longlat +datum=WGS84 +no_defs 
## variables   : 4
## names       : examined, pf_pos,       pf_pr, elev 
## min values  :       37,      0,           0,  817 
## max values  :      221,     14, 0.127272727, 2451
</code></pre></div></div>

<p>You can also extract values using polygons e.g to get admin 1 level
elevations. You just have to define a function to apply, otherwise you
get all the pixel values per polygon. For very large rasters, check out
the <code class="language-plaintext highlighter-rouge">velox</code> package.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_Adm_1</span><span class="o">$</span><span class="n">elev</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">extract</span><span class="p">(</span><span class="n">ETH_elev</span><span class="p">,</span><span class="w"> </span><span class="n">ETH_Adm_1</span><span class="p">,</span><span class="w"> </span><span class="n">fun</span><span class="o">=</span><span class="n">mean</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="c1"># takes a little longer..</span><span class="w">
</span></code></pre></div></div>

<h1 id="exploratory-spatial-analysis">Exploratory spatial analysis</h1>

<p>We can now have a quick look at the relationship between prevalence and
elevation. First generate a prevalence variable</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">prevalence</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">pf_pos</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">examined</span><span class="w">
</span></code></pre></div></div>

<p>Now you can plot the relationship between prevalence and elevation</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ggplot</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">@</span><span class="n">data</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">elev</span><span class="p">,</span><span class="w"> </span><span class="n">prevalence</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-28-1.png" alt="" /></p>

<p>You might also be interested in distances to/from other features
(e.g. health facilities, water). Here we are going to load up a
waterbody layer (obtained via <a href="http://www.diva-gis.org/Data">http://www.diva-gis.org/Data</a>) and
calculate distance from each point. In this case, the file is in GeoJSON
format instead of Shapefile. <code class="language-plaintext highlighter-rouge">readOGR</code> is able to handle GeoJSON easily.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">waterbodies</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">readOGR</span><span class="p">(</span><span class="s2">"https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/ETH_waterbodies.geojson"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## Warning: OGR support is provided by the sf and terra packages among others

## OGR data source with driver: GeoJSON 
## Source: "https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/data/ETH_waterbodies.geojson", layer: "ETH_waterbodies"
## with 380 features
## It has 5 fields
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">waterbodies</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## class       : SpatialPolygonsDataFrame 
## features    : 380 
## extent      : 33.00001, 46.80059, 4.232061, 14.55  (xmin, xmax, ymin, ymax)
## crs         : +proj=longlat +datum=WGS84 +no_defs 
## variables   : 5
## names       : ISO,  COUNTRY,                 F_CODE_DES,                             HYC_DESCRI,                  NAME 
## min values  : ETH, Ethiopia,               Inland Water, Non-Perennial/Intermittent/Fluctuating, ABAY WENZ (BLUE NILE) 
## max values  : ETH, Ethiopia, Land Subject to Inundation,                    Perennial/Permanent,           ZIWAY HAYK'
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">waterbodies</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../images/week-2/unnamed-chunk-29-1.png" alt="" /></p>

<p>The goesphere package has some nice functions such as <code class="language-plaintext highlighter-rouge">dist2Line</code> which
calculates distance in meters from spatial data recorded using decimal
degrees. Warning: takes a little while to compute</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dist_to_water</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dist2Line</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="p">,</span><span class="w"> </span><span class="n">waterbodies</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>This produces a matrix, where each row represents each point in
<code class="language-plaintext highlighter-rouge">ETH_malaria_data_SPDF</code> and the first column is the distance in meters
to the nearest waterbody</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">dist_to_water</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##       distance      lon      lat  ID
## [1,] 116153.32 38.03253 6.426888 363
## [2,] 163802.37 38.56778 7.082849 358
## [3,] 137683.25 40.65231 8.808335 238
## [4,] 173427.48 37.62588 5.794201 367
## [5,]  40482.23 37.00735 4.811708 365
## [6,] 163677.02 38.56340 7.075962 358
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Can add to your data frame by extracting the first column</span><span class="w">
</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">dist_to_water</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dist_to_water</span><span class="p">[,</span><span class="m">1</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>If the objects you are interested in calucating distance to are points
as opposed to polygons/lines (as above) you first have to calculate the
distance to every point and then identify the minimum. For example,
imagine waterbodies data was only available as a point dataset (we can
fake this by calculating the centroid of each polygon)</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">waterbodies_points</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gCentroid</span><span class="p">(</span><span class="n">waterbodies</span><span class="p">,</span><span class="w"> </span><span class="n">byid</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Now calucate a distance matrix showing distances between each
observation and each waterbody point. the <code class="language-plaintext highlighter-rouge">distm</code> function creates a
distance matrix between every pair of data points and waterbody points
in meters.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dist_matrix</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">distm</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="p">,</span><span class="w"> </span><span class="n">waterbodies_points</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Then use the apply function to apply the ‘minimum’ function to each row
(as each row represents the distance of every waterbody point from our
first observation)</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">dist_to_water_point</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">dist_matrix</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The alternative, much faster, but potentially less accurate method to
‘distm’, is to use the nn2 function from the RANN package. This allows
you to calculate the nearest point from each observation and then you
can use the ‘distGeo’ function from the ‘geosphere’ package to calculate
the distance in meters. The reason this could be inaccurate, is that the
nearest point in decimal degrees might not be the nearest in meters as
degrees are not a good measure of distance. In most cases, you are
probably OK.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">RANN</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">geosphere</span><span class="p">)</span><span class="w">

</span><span class="c1"># Get the index of the waterbody points that are nearest to each observation</span><span class="w">
</span><span class="n">nn</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">nn2</span><span class="p">(</span><span class="n">waterbodies_points</span><span class="o">@</span><span class="n">coords</span><span class="p">,</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">@</span><span class="n">coords</span><span class="p">,</span><span class="w"> 
          </span><span class="n">k</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w">
          
</span><span class="c1"># Calculate the distance in meters between each observation and its nearest waterbody point   </span><span class="w">
</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">$</span><span class="n">dist_to_water_point</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">distGeo</span><span class="p">(</span><span class="n">ETH_malaria_data_SPDF</span><span class="o">@</span><span class="n">coords</span><span class="p">,</span><span class="w">
        </span><span class="n">waterbodies_points</span><span class="o">@</span><span class="n">coords</span><span class="p">[</span><span class="n">nn</span><span class="o">$</span><span class="n">nn.idx</span><span class="p">,])</span><span class="w">
</span></code></pre></div></div>

<h2 id="useful-resources">Useful resources</h2>

<ul>
  <li>
    <p>The <a href="https://rspatial.org/raster/pkg/1-introduction.html">raster package
vignette</a> is
extremely useful</p>
  </li>
  <li>
    <p>If you are bumping into speed issues extracting/summarizing raster
data, have a look at the <a href="https://isciences.gitlab.io/exactextractr/">exactextractr
package</a></p>
  </li>
</ul>

<h2 id="key-readings">Key readings</h2>

<p>This week is all about practice. Instead of working through journal
articles, have a play with your data and get to know how the functions
work.</p>

<h2 id="pop-quiz-answers">Pop quiz answers</h2>

<p>Can <a href="https://raw.githubusercontent.com/phw272c/phw272c.github.io/master/code/cheat_sheet_week2.R">be found
here</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[In Lab 0, you got to load up some spatial data and make some pretty maps. This week, we will be stepping up a gear and learning how to crop and subset spatial data. We will also be go through the process of resampling rasters.]]></summary></entry></feed>